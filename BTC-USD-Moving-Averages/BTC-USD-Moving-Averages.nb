(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Wolfram 14.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       154,          7]
NotebookDataLength[    116306,       2313]
NotebookOptionsPosition[     68717,       1434]
NotebookOutlinePosition[    114999,       2287]
CellTagsIndexPosition[    114956,       2284]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["BTC-USD Moving Averages", "Title",
 CellChangeTimes->{{3.910870641488784*^9, 3.910870672156954*^9}, {
   3.926025545790792*^9, 3.926025552724882*^9}, {3.926025595726514*^9, 
   3.926025757662788*^9}, {3.926025868590417*^9, 3.9260258908130703`*^9}, {
   3.926025923714999*^9, 3.926025947740068*^9}, {3.926025983974702*^9, 
   3.9260259969579153`*^9}, {3.926026132046829*^9, 3.9260261531265078`*^9}, {
   3.926026187121852*^9, 3.926026203619293*^9}, {3.9260262759617853`*^9, 
   3.926026368321966*^9}, {3.9260264467697067`*^9, 3.926026471440771*^9}, 
   3.946833575036257*^9, {3.9468337285215893`*^9, 3.946833740968305*^9}, {
   3.9510676135600767`*^9, 3.951067618898324*^9}, {3.951403495188859*^9, 
   3.95140349852347*^9}},ExpressionUUID->"f5fa712f-8f02-48db-ad7d-\
991505d584c6"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "\"\<Global`*\>\"", "]"}], "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"Buttons", " ", "to", " ", 
    RowBox[{"hide", " ", "/", " ", "show"}], " ", "code"}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"CloseAllInputsCells", "[", "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"nb", ",", "cells"}], "}"}], ",", 
      RowBox[{
       RowBox[{"nb", "=", 
        RowBox[{"EvaluationNotebook", "[", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"cells", "=", 
        RowBox[{"Cells", "[", 
         RowBox[{"nb", ",", 
          RowBox[{"CellStyle", "->", "\"\<Input\>\""}]}], "]"}]}], ";", 
       RowBox[{
        RowBox[{
         RowBox[{"SetOptions", "[", 
          RowBox[{"#", ",", 
           RowBox[{"CellOpen", "->", "False"}]}], "]"}], "&"}], "/@", 
        "cells"}], ";"}]}], "]"}]}], ";"}], "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"OpenAllInputsCells", "[", "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"nb", ",", "cells"}], "}"}], ",", 
      RowBox[{
       RowBox[{"nb", "=", 
        RowBox[{"EvaluationNotebook", "[", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"cells", "=", 
        RowBox[{"Cells", "[", 
         RowBox[{"nb", ",", 
          RowBox[{"CellStyle", "->", "\"\<Input\>\""}]}], "]"}]}], ";", 
       RowBox[{
        RowBox[{
         RowBox[{"SetOptions", "[", 
          RowBox[{"#", ",", 
           RowBox[{"CellOpen", "->", "True"}]}], "]"}], "&"}], "/@", 
        "cells"}], ";"}]}], "]"}]}], ";"}], "\n"}], "\[IndentingNewLine]", 
 RowBox[{"Row", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"Button", "[", 
     RowBox[{"\"\<Hide Code\>\"", ",", 
      RowBox[{"SelectionEvaluate", "[", 
       RowBox[{"CloseAllInputsCells", "[", "]"}], "]"}]}], "]"}], ",", 
    RowBox[{"Button", "[", 
     RowBox[{"\"\<Show Code\>\"", ",", 
      RowBox[{"SelectionEvaluate", "[", 
       RowBox[{"OpenAllInputsCells", "[", "]"}], "]"}]}], "]"}]}], "}"}], 
  "]"}]}], "Input",
 CellOpen->False,
 CellChangeTimes->{{3.9503706662894382`*^9, 3.950370670716475*^9}, {
   3.950716569289399*^9, 3.9507165917716703`*^9}, 3.95349089366973*^9},
 CellLabel->
  "In[791]:=",ExpressionUUID->"9a9e9e9d-ec59-4e5e-9d58-ff1c581459b9"],

Cell[BoxData[
 TemplateBox[{
   ButtonBox["\"Hide Code\"", ButtonFunction :> SelectionEvaluate[
      $CellContext`CloseAllInputsCells[]], Appearance -> Automatic, Evaluator -> 
    Automatic, Method -> "Preemptive"], 
   ButtonBox["\"Show Code\"", ButtonFunction :> SelectionEvaluate[
      $CellContext`OpenAllInputsCells[]], Appearance -> Automatic, Evaluator -> 
    Automatic, Method -> "Preemptive"]},
  "RowDefault"]], "Output",
 CellChangeTimes->{
  3.96012098185067*^9, 3.960542183440137*^9, 3.9610693154938173`*^9, 
   3.961244433025531*^9, 3.9622740708674517`*^9, 3.962917745192583*^9, 
   3.963136937721875*^9, 3.963399299907199*^9, 3.964003758309099*^9, 
   3.964603677474984*^9, 3.9648219485476313`*^9, {3.965219946725054*^9, 
   3.965219960261429*^9}, 3.965507158601091*^9, 3.966429504533853*^9, 
   3.9665936286120663`*^9, 3.966870237564198*^9, 3.967663027447324*^9, 
   3.967809588778695*^9, 3.968061325131865*^9, 3.968586997125125*^9, 
   3.968764666982854*^9, 3.969526240039599*^9, 3.969797439181213*^9, 
   3.970144083455916*^9},
 CellLabel->
  "Out[794]=",ExpressionUUID->"9bcbf4ae-0f7e-4530-9c45-c157afe5011b"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"SetDirectory", "[", 
   RowBox[{"NotebookDirectory", "[", "]"}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"settings", "=", 
    RowBox[{"<|", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"aspectratio", "->", 
       RowBox[{"1", "/", "3"}]}], "\[IndentingNewLine]", ",", 
      RowBox[{"imagemargins", "->", "20"}], "\[IndentingNewLine]", ",", 
      RowBox[{"imagesize", "->", "1200"}], "\[IndentingNewLine]", ",", 
      RowBox[{"labelstyle", "->", 
       RowBox[{"{", "16", "}"}]}], "\[IndentingNewLine]", ",", 
      RowBox[{"origindate", "->", "\"\<Oct. 1, 2011\>\""}], 
      "\[IndentingNewLine]", ",", 
      RowBox[{"plotbackground", "->", 
       RowBox[{"Lighter", "[", 
        RowBox[{"LightGray", ",", "0.75"}], "]"}]}], "\[IndentingNewLine]", ",", 
      RowBox[{"subtitlestyle", " ", "->", " ", 
       RowBox[{"{", "15", "}"}]}], "\[IndentingNewLine]", ",", 
      RowBox[{"ticksstyle", "->", 
       RowBox[{"{", "18", "}"}]}], "\[IndentingNewLine]", ",", 
      RowBox[{"titlestyle", "->", 
       RowBox[{"{", 
        RowBox[{"20", ",", "Red"}], "}"}]}]}], "\[IndentingNewLine]", 
     "|>"}]}], ";"}], "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"Function", " ", "shortcuts"}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"st", "=", "StringTemplate"}], ";"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"dollar", "[", "a_", "]"}], ":=", 
   RowBox[{
    RowBox[{"StringTemplate", "[", "\"\<$``\>\"", "]"}], "[", 
    RowBox[{"NumberForm", "[", 
     RowBox[{"a", ",", 
      RowBox[{"DigitBlock", "->", "3"}]}], "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"updatedstr", "=", 
    RowBox[{"Style", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"StringTemplate", "[", "\"\<(updated: ``)\>\"", "]"}], "[", 
       RowBox[{"DateString", "[", "]"}], "]"}], ",", 
      RowBox[{"settings", "[", "subtitlestyle", "]"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"btcData", "=", 
   RowBox[{"FinancialData", "[", "\[IndentingNewLine]", 
    RowBox[{"\"\<BTC/USD\>\"", "\[IndentingNewLine]", ",", 
     RowBox[{"settings", "[", "origindate", "]"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"mo100", "=", 
   RowBox[{"MovingAverage", "[", 
    RowBox[{"btcData", ",", "100"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"mo100latest", "=", 
   RowBox[{"dollar", "[", 
    RowBox[{"mo100", "[", "\"\<LastValue\>\"", "]"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"mo200", "=", 
   RowBox[{"MovingAverage", "[", 
    RowBox[{"btcData", ",", "200"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"mo200latest", "=", 
   RowBox[{"dollar", "[", 
    RowBox[{"mo200", "[", "\"\<LastValue\>\"", "]"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"mo1yr", "=", 
   RowBox[{"MovingAverage", "[", 
    RowBox[{"btcData", ",", "365"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"mo1yrlatest", "=", 
   RowBox[{"dollar", "[", 
    RowBox[{"mo1yr", "[", "\"\<LastValue\>\"", "]"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"mo2yr", "=", 
   RowBox[{"MovingAverage", "[", 
    RowBox[{"btcData", ",", 
     RowBox[{"365", "*", "2"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"mo2yrlatest", "=", 
   RowBox[{"dollar", "[", 
    RowBox[{"mo2yr", "[", "\"\<LastValue\>\"", "]"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"mo3yr", "=", 
   RowBox[{"MovingAverage", "[", 
    RowBox[{"btcData", ",", 
     RowBox[{"365", "*", "3"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"mo3yrlatest", "=", 
   RowBox[{"dollar", "[", 
    RowBox[{"mo3yr", "[", "\"\<LastValue\>\"", "]"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"mo4yr", "=", 
   RowBox[{"MovingAverage", "[", 
    RowBox[{"btcData", ",", 
     RowBox[{"365", "*", "4"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"mo4yrlatest", "=", 
   RowBox[{"dollar", "[", 
    RowBox[{"mo4yr", "[", "\"\<LastValue\>\"", "]"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"mo5yr", "=", 
   RowBox[{"MovingAverage", "[", 
    RowBox[{"btcData", ",", 
     RowBox[{"365", "*", "5"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"mo5yrlatest", "=", 
    RowBox[{"dollar", "[", 
     RowBox[{"mo5yr", "[", "\"\<LastValue\>\"", "]"}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"plottypefunc", "=", "DateListPlot"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"lines", "=", 
   RowBox[{"Range", "[", "1", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"selectlines", "=", 
   RowBox[{"CheckboxBar", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Dynamic", "[", "lines", "]"}], "\[IndentingNewLine]", ",", 
     RowBox[{
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Style", "[", 
          RowBox[{"#", ",", 
           RowBox[{"{", "16", "}"}]}], "]"}], "&"}], ",", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"1", "->", "\"\<BTC\>\""}], ",", 
            RowBox[{"2", "->", "\"\<100 day\>\""}], ",", 
            RowBox[{"3", "->", "\"\<200 day\>\""}], ",", 
            RowBox[{"4", "->", "\"\<1 year\>\""}], ",", 
            RowBox[{"5", "->", "\"\<2 year\>\""}], ",", " ", 
            RowBox[{"6", "->", " ", "\"\<3 year\>\""}], ",", " ", 
            RowBox[{"7", "->", " ", "\"\<4 year\>\""}], ",", " ", 
            RowBox[{"8", "->", " ", "\"\<5 year\>\""}]}], "}"}], "//", 
          "Association"}], ")"}]}], "]"}], "//", "Normal"}], 
     "\[IndentingNewLine]", ",", 
     RowBox[{"Method", "->", "\"\<Active\>\""}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"plottype", "=", "1"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"selectplottype", "=", 
   RowBox[{"RadioButtonBar", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Dynamic", "[", "plottype", "]"}], "\[IndentingNewLine]", ",", 
     RowBox[{
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Style", "[", 
          RowBox[{"#", ",", "16"}], "]"}], "&"}], ",", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"1", "\[Rule]", "\"\<Linear\>\""}], ",", 
            RowBox[{"2", "\[Rule]", "\"\<Log\>\""}]}], "}"}], "//", 
          "Association"}], ")"}]}], "]"}], "//", "Normal"}], 
     "\[IndentingNewLine]", ",", 
     RowBox[{"Method", "->", "\"\<Active\>\""}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"plotlines", "=", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
    "btcData", "\[IndentingNewLine]", ",", "mo100", "\[IndentingNewLine]", ",",
      "mo200", "\[IndentingNewLine]", ",", " ", "mo1yr", 
     "\[IndentingNewLine]", ",", " ", "mo2yr", "\[IndentingNewLine]", ",", 
     " ", "mo3yr", "\[IndentingNewLine]", ",", " ", "mo4yr", 
     "\[IndentingNewLine]", ",", " ", "mo5yr"}], "\[IndentingNewLine]", 
    "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"plotlabels", "=", 
   RowBox[{"{", 
    RowBox[{"\"\<BTC\>\"", "\[IndentingNewLine]", ",", 
     RowBox[{
      RowBox[{"StringTemplate", "[", "\"\<100 Day MA: ``\>\"", "]"}], "[", 
      "mo100latest", "]"}], "\[IndentingNewLine]", ",", 
     RowBox[{
      RowBox[{"StringTemplate", "[", "\"\<200 Day MA: ``\>\"", "]"}], "[", 
      "mo200latest", "]"}], "\[IndentingNewLine]", ",", 
     RowBox[{
      RowBox[{"StringTemplate", "[", "\"\<1 Yr MA: ``\>\"", "]"}], "[", 
      "mo1yrlatest", "]"}], "\[IndentingNewLine]", ",", 
     RowBox[{
      RowBox[{"StringTemplate", "[", "\"\<2 Yr MA: ``\>\"", "]"}], "[", 
      "mo2yrlatest", "]"}], "\[IndentingNewLine]", ",", 
     RowBox[{
      RowBox[{"StringTemplate", "[", "\"\<3 Yr MA: ``\>\"", "]"}], "[", 
      "mo3yrlatest", "]"}], "\[IndentingNewLine]", ",", 
     RowBox[{
      RowBox[{"StringTemplate", "[", "\"\<4 Yr MA: ``\>\"", "]"}], "[", 
      "mo4yrlatest", "]"}], "\[IndentingNewLine]", ",", 
     RowBox[{
      RowBox[{"StringTemplate", "[", "\"\<5 Yr MA: ``\>\"", "]"}], "[", 
      "mo5yrlatest", "]"}]}], "\[IndentingNewLine]", "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"plotlegends", "=", 
   RowBox[{"{", 
    RowBox[{"\"\<BTC (USD)\>\"", "\[IndentingNewLine]", 
     ",", "\"\<100 Day MA\>\"", "\[IndentingNewLine]", 
     ",", "\"\<200 Day MA\>\"", "\[IndentingNewLine]", 
     ",", "\"\<1 Year MA\>\"", "\[IndentingNewLine]", ",", "\"\<2 Year MA\>\"",
      "\[IndentingNewLine]", ",", "\"\<3 Year MA\>\"", "\[IndentingNewLine]", 
     ",", "\"\<4 Year MA\>\"", "\[IndentingNewLine]", 
     ",", "\"\<5 Year MA\>\""}], "\[IndentingNewLine]", "}"}]}], 
  ";"}]}], "Input",
 CellOpen->False,
 CellChangeTimes->{{3.910870641488784*^9, 3.910870672156954*^9}, {
   3.926025545790792*^9, 3.926025552724882*^9}, {3.926025595726514*^9, 
   3.926025757662788*^9}, {3.926025868590417*^9, 3.9260258908130703`*^9}, {
   3.926025923714999*^9, 3.926025947740068*^9}, {3.926025983974702*^9, 
   3.9260259969579153`*^9}, {3.926026132046829*^9, 3.9260261531265078`*^9}, {
   3.926026187121852*^9, 3.926026203619293*^9}, {3.9260262759617853`*^9, 
   3.926026368321966*^9}, {3.9260264467697067`*^9, 3.926026461668386*^9}, {
   3.93022746671277*^9, 3.93022749095067*^9}, {3.930227564643298*^9, 
   3.930227598796813*^9}, {3.930227678094948*^9, 3.930227726034398*^9}, {
   3.93092388654604*^9, 3.930923920049479*^9}, {3.930924038902313*^9, 
   3.930924040490107*^9}, {3.930945977242186*^9, 3.930946095047868*^9}, {
   3.9309462442547503`*^9, 3.930946306831041*^9}, {3.930946383173805*^9, 
   3.930946461609544*^9}, 3.930946496030859*^9, {3.930946686835168*^9, 
   3.930946797994755*^9}, {3.930946831017578*^9, 3.930946871755554*^9}, {
   3.930946901831844*^9, 3.930946910250114*^9}, {3.930946995801789*^9, 
   3.930947009547386*^9}, {3.930947405111923*^9, 3.930947437566589*^9}, {
   3.930947475972148*^9, 3.930947506118739*^9}, {3.930947538350464*^9, 
   3.930947564378302*^9}, {3.931375072970685*^9, 3.93137520955162*^9}, {
   3.931458288206808*^9, 3.931458546007607*^9}, {3.931458626482923*^9, 
   3.931458636827924*^9}, 3.931458689720317*^9, {3.931781894231324*^9, 
   3.9317819000639133`*^9}, {3.932823233232479*^9, 3.932823235520179*^9}, {
   3.932823306120234*^9, 3.9328233070781918`*^9}, {3.932825893259492*^9, 
   3.93282590851719*^9}, 3.93282602769488*^9, {3.932826817535812*^9, 
   3.9328268633811502`*^9}, {3.932826900997468*^9, 3.932826902880033*^9}, {
   3.9328269555109043`*^9, 3.932826955897855*^9}, 3.932827077449484*^9, {
   3.932827621386087*^9, 3.932827625832981*^9}, {3.932827693133355*^9, 
   3.932827775084743*^9}, {3.932827847243692*^9, 3.932827847713254*^9}, {
   3.932827941967702*^9, 3.932828013432345*^9}, {3.9328292283283997`*^9, 
   3.932829272360949*^9}, 3.932829471340073*^9, {3.932838038769987*^9, 
   3.9328380487022457`*^9}, {3.932838132616906*^9, 3.932838170001339*^9}, {
   3.9328382397570744`*^9, 3.932838249388608*^9}, {3.932838285214756*^9, 
   3.9328382977012587`*^9}, {3.932839227589013*^9, 3.932839231935809*^9}, {
   3.932839519868491*^9, 3.932839528379842*^9}, {3.9328395680173407`*^9, 
   3.9328396090268106`*^9}, {3.9328396597842913`*^9, 3.932839685790423*^9}, {
   3.932841272579116*^9, 3.932841307769472*^9}, {3.9328413549992657`*^9, 
   3.932841477692514*^9}, {3.932841640820034*^9, 3.932841681526181*^9}, 
   3.932919141411237*^9, {3.93291987199671*^9, 3.932919928437492*^9}, {
   3.946832813567532*^9, 3.9468328183847017`*^9}, {3.94840702769051*^9, 
   3.948407184694631*^9}, {3.9484072388651657`*^9, 3.948407238993711*^9}, {
   3.949060277623681*^9, 3.949060282733123*^9}, 3.949060326205386*^9, {
   3.949060535523785*^9, 3.94906053870173*^9}, {3.9507186702882*^9, 
   3.9507186869780684`*^9}, {3.950719115426339*^9, 3.950719118138866*^9}, {
   3.950734441914851*^9, 3.950734449252839*^9}, {3.9507345162300386`*^9, 
   3.950734550010179*^9}, {3.950734941416844*^9, 3.9507349459467382`*^9}, {
   3.950735470278764*^9, 3.9507354956172857`*^9}, {3.951083199176271*^9, 
   3.951083214201564*^9}, {3.951083273335619*^9, 3.9510833022641563`*^9}, 
   3.951083408472246*^9, {3.951084413161702*^9, 3.951084450243886*^9}, {
   3.951084759990588*^9, 3.9510847751724987`*^9}, 3.9510848962807903`*^9, {
   3.951085097663888*^9, 3.951085098262012*^9}, {3.9510852824772787`*^9, 
   3.9510852933044767`*^9}, {3.951085734123775*^9, 3.951085786093936*^9}, {
   3.951085867873287*^9, 3.951085906528122*^9}, {3.951085989938107*^9, 
   3.9510860476451683`*^9}, 3.951396193668157*^9, {3.951396337201198*^9, 
   3.951396339809115*^9}, {3.9514024320573387`*^9, 3.951402436087594*^9}, {
   3.951937347277423*^9, 3.951937355552862*^9}, {3.951937401930159*^9, 
   3.9519374155683117`*^9}, {3.951937661459876*^9, 3.95193766337397*^9}, {
   3.953058486065937*^9, 3.953058499658944*^9}, {3.953058546868307*^9, 
   3.953058547344516*^9}, {3.9530586366020203`*^9, 3.953058640457756*^9}, {
   3.9530588101409473`*^9, 3.9530588105818367`*^9}, {3.953058974424564*^9, 
   3.953058974795278*^9}, {3.953059370600265*^9, 3.953059371017674*^9}, {
   3.953062335760062*^9, 3.953062346882559*^9}, {3.953062381956051*^9, 
   3.953062386779356*^9}, {3.953136366802526*^9, 3.9531364211907463`*^9}, {
   3.9531364569641857`*^9, 3.95313645857206*^9}, {3.953207977935451*^9, 
   3.953207999400518*^9}, 3.953208065115376*^9, {3.9534105475008163`*^9, 
   3.953410575002919*^9}, {3.953490798588235*^9, 3.9534908102286463`*^9}, {
   3.95349101827028*^9, 3.95349105400175*^9}, {3.953491446200614*^9, 
   3.9534914783884897`*^9}, {3.9534990500159473`*^9, 3.953499052852811*^9}, {
   3.953499283914296*^9, 3.953499284014995*^9}, {3.953502070000494*^9, 
   3.953502070969689*^9}, {3.953502137593779*^9, 3.953502194476239*^9}, {
   3.953502271097883*^9, 3.9535022930587*^9}, {3.953502409187427*^9, 
   3.9535024100773907`*^9}, {3.953502446387911*^9, 3.953502448256444*^9}, {
   3.953503384558683*^9, 3.9535033857430553`*^9}, {3.9535034205388002`*^9, 
   3.953503426573949*^9}, {3.953503462908861*^9, 3.953503465240444*^9}, {
   3.953631638644034*^9, 3.9536316500246677`*^9}, {3.953732786486568*^9, 
   3.9537327906513968`*^9}, {3.953732976905493*^9, 3.953732977745701*^9}},
 CellLabel->
  "In[795]:=",ExpressionUUID->"22d7def2-8ef0-471c-a798-9bc673ed95b7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Module", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "detail", ",", "filename", ",", " ", "maplot", ",", "plotlabel", ",", 
         " ", "plottypefunc", ",", "rmaplot"}], "}"}], "\[IndentingNewLine]", 
       ",", 
       RowBox[{
        RowBox[{"plotlabel", "=", 
         RowBox[{"Column", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Join", "[", 
            RowBox[{
             RowBox[{"{", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Style", "[", 
                RowBox[{"\"\<Bitcoin Price (USD)\>\"", " ", ",", 
                 RowBox[{"settings", "[", "titlestyle", "]"}]}], "]"}], 
               "\[IndentingNewLine]", ",", 
               RowBox[{"Style", "[", 
                RowBox[{
                 RowBox[{"\"\<Latest: $\>\"", "  ", "<>", " ", 
                  RowBox[{"ToString", "[", 
                   RowBox[{"NumberForm", "[", 
                    RowBox[{
                    RowBox[{"btcData", "[", "\"\<LastValue\>\"", "]"}], ",", 
                    RowBox[{"DigitBlock", "->", "3"}]}], "]"}], "]"}]}], ",", 
                 
                 RowBox[{"settings", "[", "subtitlestyle", "]"}]}], "]"}]}], 
              "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", ",", 
             RowBox[{
              RowBox[{
               RowBox[{"Style", "[", 
                RowBox[{"#", ",", 
                 RowBox[{"settings", "[", "subtitlestyle", "]"}]}], "]"}], 
               "&"}], "/@", 
              RowBox[{"Part", "[", "\[IndentingNewLine]", 
               RowBox[{"plotlabels", "\[IndentingNewLine]", ",", 
                RowBox[{"Select", "[", 
                 RowBox[{"lines", ",", 
                  RowBox[{
                   RowBox[{"#", "!=", "1"}], "&"}]}], "]"}]}], 
               "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}],
            "\[IndentingNewLine]", ",", "Center"}], "\[IndentingNewLine]", 
          "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"plottypefunc", ":=", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"plottype", "==", "1"}], ",", "DateListPlot", ",", 
           "DateListLogPlot"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"maplot", "=", 
         RowBox[{"plottypefunc", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Part", "[", "\[IndentingNewLine]", 
            RowBox[{"plotlines", "\[IndentingNewLine]", ",", "lines"}], 
            "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
           RowBox[{"Background", "->", 
            RowBox[{"settings", "[", "plotbackground", "]"}]}], 
           "\[IndentingNewLine]", ",", 
           RowBox[{"FrameTicks", "->", "All"}], "\[IndentingNewLine]", ",", 
           RowBox[{"GridLines", "->", 
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"Join", "[", 
               RowBox[{
                RowBox[{"DateRange", "[", 
                 RowBox[{
                  RowBox[{"{", "2010", "}"}], ",", 
                  RowBox[{"{", "2030", "}"}], ",", 
                  RowBox[{"Quantity", "[", 
                   RowBox[{"1", ",", "\"\<Months\>\""}], "]"}]}], "]"}], ",", 
                
                RowBox[{
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"#", ",", "Thick"}], "}"}], "&"}], "/@", 
                 RowBox[{"DateRange", "[", 
                  RowBox[{
                   RowBox[{"{", "2010", "}"}], ",", 
                   RowBox[{"{", "2030", "}"}], ",", 
                   RowBox[{"Quantity", "[", 
                    RowBox[{"1", ",", "\"\<Years\>\""}], "]"}]}], "]"}]}]}], 
               "]"}], "\[IndentingNewLine]", ",", 
              RowBox[{"Range", "[", 
               RowBox[{"0", ",", "200000", ",", "10000"}], "]"}]}], 
             "\[IndentingNewLine]", "}"}]}], "\[IndentingNewLine]", ",", 
           RowBox[{"ImageSize", "->", 
            RowBox[{"settings", "[", "imagesize", "]"}]}], 
           "\[IndentingNewLine]", ",", 
           RowBox[{"ImageMargins", "->", 
            RowBox[{"settings", "[", "imagemargins", "]"}]}], 
           "\[IndentingNewLine]", ",", 
           RowBox[{"LabelStyle", "->", 
            RowBox[{"settings", "[", "labelstyle", "]"}]}], 
           "\[IndentingNewLine]", ",", 
           RowBox[{"PlotRange", "->", "Full"}], "\[IndentingNewLine]", ",", 
           RowBox[{"TicksStyle", "->", 
            RowBox[{"settings", "[", "ticksstyle", "]"}]}], 
           "\[IndentingNewLine]", ",", 
           RowBox[{"PlotLabel", "->", 
            RowBox[{"Column", "[", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"{", "\[IndentingNewLine]", 
               RowBox[{
               "plotlabel", "\[IndentingNewLine]", ",", "updatedstr"}], 
               "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", ",", 
              "Center"}], "]"}]}], "\[IndentingNewLine]", ",", 
           RowBox[{"PlotLegends", "->", 
            RowBox[{"Placed", "[", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"SwatchLegend", "[", 
               RowBox[{
                RowBox[{"Part", "[", "\[IndentingNewLine]", 
                 RowBox[{"plotlegends", "\[IndentingNewLine]", ",", "lines"}],
                  "\[IndentingNewLine]", "]"}], ",", 
                RowBox[{"LegendFunction", "\[Rule]", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"Framed", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{"Background", "\[Rule]", 
                    RowBox[{"settings", "[", "plotbackground", "]"}]}]}], 
                    "]"}], "&"}], ")"}]}]}], "]"}], "\[IndentingNewLine]", ",", 
              RowBox[{"{", 
               RowBox[{"Left", ",", "Top"}], "}"}]}], "\[IndentingNewLine]", 
             "]"}]}]}], "\[IndentingNewLine]", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"rmaplot", "=", 
         RowBox[{"DateListPlot", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"Prepend", "[", 
             RowBox[{
              RowBox[{"Table", "[", 
               RowBox[{
                RowBox[{"TimeSeriesThread", "[", 
                 RowBox[{
                  RowBox[{
                   FractionBox[
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "-", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]], "&"}], ",", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"plotlines", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"plotlines", "[", 
                    RowBox[{"[", "t", "]"}], "]"}]}], "}"}], ",", 
                  RowBox[{"ResamplingMethod", "->", 
                   RowBox[{"{", 
                    RowBox[{"\"\<Interpolation\>\"", ",", 
                    RowBox[{"InterpolationOrder", "->", "1"}]}], "}"}]}]}], 
                 "]"}], ",", 
                RowBox[{"{", 
                 RowBox[{"t", ",", 
                  RowBox[{"Select", "[", 
                   RowBox[{"lines", ",", 
                    RowBox[{
                    RowBox[{"#", ">", "1"}], "&"}]}], "]"}]}], "}"}]}], "]"}],
               ",", 
              RowBox[{"{", "}"}]}], "]"}], "/.", " ", 
            RowBox[{
             RowBox[{"{", "}"}], "->", 
             RowBox[{"{", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", "}"}], ","}], "}"}], "}"}]}]}], 
           "\[IndentingNewLine]", ",", 
           RowBox[{"AspectRatio", "->", 
            RowBox[{"settings", "[", "aspectratio", "]"}]}], 
           "\[IndentingNewLine]", ",", 
           RowBox[{"Background", "->", 
            RowBox[{"settings", "[", "plotbackground", "]"}]}], 
           "\[IndentingNewLine]", 
           RowBox[{"(*", 
            RowBox[{",", 
             RowBox[{"FrameTicks", "->", 
              RowBox[{"{", 
               RowBox[{"All", ",", 
                RowBox[{
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"#", ",", 
                    RowBox[{"PercentForm", "[", "#", "]"}]}], "}"}], "&"}], "/@", 
                 RowBox[{"Join", "[", 
                  RowBox[{
                   RowBox[{"Range", "[", 
                    RowBox[{
                    RowBox[{"-", "50"}], ",", 
                    RowBox[{"-", "0.5"}], ",", "0.5"}], "]"}], ",", 
                   RowBox[{"{", "0", "}"}], ",", 
                   RowBox[{"Range", "[", 
                    RowBox[{"0.5", ",", "50", ",", "0.5"}], "]"}]}], 
                  "]"}]}]}], "}"}]}]}], "*)"}], "\[IndentingNewLine]", ",", 
           RowBox[{"FrameTicks", "->", "All"}], "\[IndentingNewLine]", ",", 
           RowBox[{"GridLines", "->", 
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"Join", "[", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"DateRange", "[", 
                 RowBox[{
                  RowBox[{"{", "2010", "}"}], ",", 
                  RowBox[{"{", "2030", "}"}], ",", 
                  RowBox[{"Quantity", "[", 
                   RowBox[{"1", ",", "\"\<Months\>\""}], "]"}]}], "]"}], 
                "\[IndentingNewLine]", ",", 
                RowBox[{
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"#", ",", "Thick"}], "}"}], "&"}], "/@", 
                 RowBox[{"DateRange", "[", 
                  RowBox[{
                   RowBox[{"{", "2010", "}"}], ",", 
                   RowBox[{"{", "2030", "}"}], ",", 
                   RowBox[{"Quantity", "[", 
                    RowBox[{"1", ",", "\"\<Years\>\""}], "]"}]}], "]"}]}]}], 
               "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
              "Automatic"}], "\[IndentingNewLine]", "}"}]}], 
           "\[IndentingNewLine]", ",", 
           RowBox[{"ImageMargins", "->", 
            RowBox[{"settings", "[", "imagemargins", "]"}]}], 
           "\[IndentingNewLine]", ",", 
           RowBox[{"ImageSize", "->", 
            RowBox[{"settings", "[", "imagesize", "]"}]}], 
           "\[IndentingNewLine]", ",", 
           RowBox[{"Joined", "->", "False"}], "\[IndentingNewLine]", ",", 
           RowBox[{"LabelStyle", "->", 
            RowBox[{"settings", "[", "labelstyle", "]"}]}], 
           "\[IndentingNewLine]", ",", 
           RowBox[{"PlotLabel", "->", 
            RowBox[{"Column", "[", 
             RowBox[{
              RowBox[{"{", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"Style", "[", 
                 RowBox[{"\"\<Relative above/below the moving average\>\"", ",", 
                  RowBox[{"settings", "[", "titlestyle", "]"}]}], "]"}], 
                "\[IndentingNewLine]", ",", "updatedstr"}], 
               "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", ",", 
              "Center"}], "\[IndentingNewLine]", "]"}]}], 
           "\[IndentingNewLine]", ",", 
           RowBox[{"TicksStyle", "->", 
            RowBox[{"settings", "[", "ticksstyle", "]"}]}]}], 
          "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"plottype", "==", "1"}], " ", "\[IndentingNewLine]", "&&", 
           " ", 
           RowBox[{
            RowBox[{"Length", "[", "lines", "]"}], "==", "2"}], 
           "\[IndentingNewLine]", "&&", " ", 
           RowBox[{
            RowBox[{"First", "[", "lines", "]"}], "==", "1"}]}], 
          "\[IndentingNewLine]", ",", 
          RowBox[{"(", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"detail", " ", "=", 
             RowBox[{"StringReplace", "[", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Last", "[", "\[IndentingNewLine]", 
                RowBox[{"Part", "[", "\[IndentingNewLine]", 
                 RowBox[{"plotlegends", "\[IndentingNewLine]", ",", "lines"}],
                  "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", "]"}], 
               "\[IndentingNewLine]", ",", 
               RowBox[{"\"\< \>\"", "->", " ", "\"\<-\>\""}]}], 
              "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"filename", " ", "=", " ", 
             
             RowBox[{"\"\<BTC-USD-\>\"", "<>", "detail", 
              "<>", "\"\<.jpg\>\""}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"Export", "[", 
             RowBox[{"filename", ",", "maplot"}], "]"}], ";"}], 
           "\[IndentingNewLine]", ")"}]}], "\[IndentingNewLine]", "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"Column", "[", 
         RowBox[{
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{"maplot", "\[IndentingNewLine]", ",", 
            RowBox[{"Spacer", "[", "20", "]"}], "\[IndentingNewLine]", ",", 
            "rmaplot"}], "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", 
          ",", "Center"}], "]"}]}]}], "\[IndentingNewLine]", "]"}], 
     "\[IndentingNewLine]", ",", 
     RowBox[{"Dynamic", "[", "selectlines", "]"}], "\[IndentingNewLine]", ",", 
     RowBox[{"Dynamic", "[", "selectplottype", "]"}]}], "\[IndentingNewLine]",
     "]"}], "\[IndentingNewLine]"}]}]], "Input",
 CellOpen->False,
 CellChangeTimes->{{3.910870641488784*^9, 3.910870672156954*^9}, {
   3.926025545790792*^9, 3.926025552724882*^9}, {3.926025595726514*^9, 
   3.926025757662788*^9}, {3.926025868590417*^9, 3.9260258908130703`*^9}, {
   3.926025923714999*^9, 3.926025947740068*^9}, {3.926025983974702*^9, 
   3.9260259969579153`*^9}, {3.926026132046829*^9, 3.9260261531265078`*^9}, {
   3.926026187121852*^9, 3.926026203619293*^9}, {3.9260262759617853`*^9, 
   3.926026368321966*^9}, {3.9260264467697067`*^9, 3.926026461668386*^9}, {
   3.93022746671277*^9, 3.93022749095067*^9}, {3.930227564643298*^9, 
   3.930227598796813*^9}, {3.930227678094948*^9, 3.930227726034398*^9}, {
   3.93092388654604*^9, 3.930923920049479*^9}, {3.930924038902313*^9, 
   3.930924040490107*^9}, {3.930945977242186*^9, 3.930946095047868*^9}, {
   3.9309462442547503`*^9, 3.930946306831041*^9}, {3.930946383173805*^9, 
   3.930946461609544*^9}, 3.930946496030859*^9, {3.930946686835168*^9, 
   3.930946797994755*^9}, {3.930946831017578*^9, 3.930946871755554*^9}, {
   3.930946901831844*^9, 3.930946910250114*^9}, {3.930946995801789*^9, 
   3.930947009547386*^9}, {3.930947405111923*^9, 3.930947437566589*^9}, {
   3.930947475972148*^9, 3.930947506118739*^9}, {3.930947538350464*^9, 
   3.930947564378302*^9}, {3.931375072970685*^9, 3.93137520955162*^9}, {
   3.931458288206808*^9, 3.931458546007607*^9}, {3.931458626482923*^9, 
   3.931458636827924*^9}, 3.931458689720317*^9, {3.931781894231324*^9, 
   3.9317819000639133`*^9}, {3.932823233232479*^9, 3.932823235520179*^9}, {
   3.932823306120234*^9, 3.9328233070781918`*^9}, {3.932825893259492*^9, 
   3.932825996241819*^9}, {3.932826778668117*^9, 3.932826788209551*^9}, {
   3.932826916319316*^9, 3.9328269314232264`*^9}, {3.9328270406207733`*^9, 
   3.932827055832047*^9}, {3.932827785133774*^9, 3.932827809339817*^9}, {
   3.9328280170095387`*^9, 3.932828018073957*^9}, 3.932828080264769*^9, {
   3.9328283480718737`*^9, 3.932828378211445*^9}, {3.932828557080608*^9, 
   3.9328285899230537`*^9}, {3.932828647662094*^9, 3.932828777909708*^9}, {
   3.9328292855120583`*^9, 3.932829329207509*^9}, {3.9328294882267838`*^9, 
   3.9328294888976*^9}, {3.932829655657403*^9, 3.932829656624363*^9}, {
   3.932837963110736*^9, 3.93283798114072*^9}, {3.9328380848352118`*^9, 
   3.932838089545402*^9}, {3.932838151461606*^9, 3.932838156770879*^9}, {
   3.932838227439218*^9, 3.932838233633648*^9}, {3.932838272571656*^9, 
   3.932838277445059*^9}, {3.932839702013933*^9, 3.9328397748223658`*^9}, {
   3.9329196334765873`*^9, 3.93291963754069*^9}, {3.94579668069576*^9, 
   3.945796704570714*^9}, {3.946832997553685*^9, 3.9468330737917147`*^9}, {
   3.946833126955905*^9, 3.946833177198357*^9}, {3.946833223759438*^9, 
   3.9468332458462343`*^9}, {3.948987898481009*^9, 3.9489878990336733`*^9}, {
   3.949060368588005*^9, 3.949060369852696*^9}, {3.949060426180048*^9, 
   3.949060444450863*^9}, {3.949060485412519*^9, 3.949060496128162*^9}, 
   3.94906549826518*^9, {3.949065738472533*^9, 3.949065765081531*^9}, {
   3.950718442056315*^9, 3.950718464462699*^9}, 3.950718497007555*^9, {
   3.950734533072043*^9, 3.950734563771668*^9}, {3.9507346189697733`*^9, 
   3.950734629719369*^9}, {3.950734834036971*^9, 3.950734892496415*^9}, {
   3.950735612837654*^9, 3.950735618068153*^9}, {3.951081946210751*^9, 
   3.95108195450351*^9}, {3.951082144218356*^9, 3.951082169539357*^9}, {
   3.9510830497682123`*^9, 3.951083069552888*^9}, {3.951397695076914*^9, 
   3.951397701985179*^9}, {3.951401961130857*^9, 3.951401966145995*^9}, {
   3.951402348958255*^9, 3.951402356972924*^9}, {3.951402484768441*^9, 
   3.951402485329115*^9}, 3.951466408912615*^9, {3.9519388980874023`*^9, 
   3.95193899213946*^9}, {3.951939022507739*^9, 3.95193905844584*^9}, {
   3.951939121882154*^9, 3.951939145517727*^9}, {3.9519402466737957`*^9, 
   3.951940292003772*^9}, {3.951940436696375*^9, 3.951940459806469*^9}, {
   3.9519405373569813`*^9, 3.951940602676712*^9}, {3.951940743048534*^9, 
   3.951940812761529*^9}, {3.951940858343627*^9, 3.951940891828772*^9}, {
   3.951941508775174*^9, 3.951941551184389*^9}, {3.9519417276507196`*^9, 
   3.951941728923072*^9}, 3.9519430378846188`*^9, {3.952086395367135*^9, 
   3.952086403257742*^9}, {3.953058563504233*^9, 3.9530585671900473`*^9}, {
   3.953058651508236*^9, 3.953058656271008*^9}, {3.953058716852913*^9, 
   3.953058736364398*^9}, {3.953059228637064*^9, 3.953059244533924*^9}, {
   3.953136478689885*^9, 3.953136492909713*^9}, {3.953284635683201*^9, 
   3.953284645167223*^9}, {3.953410932067309*^9, 3.953410971687167*^9}, {
   3.9534112420872726`*^9, 3.953411242652175*^9}, 3.953411371295886*^9, {
   3.9534114718416653`*^9, 3.9534115290295486`*^9}, {3.9534115693943777`*^9, 
   3.953411639850704*^9}, {3.953490594580394*^9, 3.953490610386375*^9}, {
   3.9534907555602093`*^9, 3.953490759471476*^9}, {3.953491115464107*^9, 
   3.953491115865149*^9}, {3.9534913847248783`*^9, 3.953491395764954*^9}, {
   3.953491508321891*^9, 3.9534915195423307`*^9}, {3.953631672257195*^9, 
   3.9536317153285837`*^9}, 3.953632059203624*^9, {3.953632101370332*^9, 
   3.953632104231805*^9}, {3.953632183812706*^9, 3.953632184254171*^9}, {
   3.953733510539967*^9, 3.9537336086852007`*^9}, {3.953733642045012*^9, 
   3.9537336432602577`*^9}, {3.9537336998980827`*^9, 3.953733701890291*^9}, {
   3.953733935065398*^9, 3.9537339396586237`*^9}, {3.954104325284519*^9, 
   3.954104343874659*^9}},
 CellLabel->
  "In[822]:=",ExpressionUUID->"02b4a66c-d52d-466d-99b8-567eb1e34c19"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{
      Hold[
       Dynamic[$CellContext`selectlines]], Manipulate`Dump`ThisIsNotAControl, 
      ControlType -> None}, {
      Hold[
       Dynamic[$CellContext`selectplottype]], 
      Manipulate`Dump`ThisIsNotAControl, ControlType -> None}}, 
    Typeset`size$$ = {1240., {670.2547251811526, 675.9866587749026}}, 
    Typeset`update$$ = 0, Typeset`initDone$$, Typeset`skipInitDone$$ = True, 
    Typeset`keyframeActionsQ$$ = False, Typeset`keyframeList$$ = {}}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {}, "ControllerVariables" :> {}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$, Typeset`keyframeActionsQ$$, 
        Typeset`keyframeList$$}, "Body" :> 
      Module[{$CellContext`detail, $CellContext`filename, \
$CellContext`maplot, $CellContext`plotlabel, $CellContext`plottypefunc, \
$CellContext`rmaplot}, $CellContext`plotlabel = Column[
           Join[{
             Style["Bitcoin Price (USD)", 
              $CellContext`settings[$CellContext`titlestyle]], 
             Style["Latest: $" <> ToString[
                NumberForm[
                 $CellContext`btcData["LastValue"], DigitBlock -> 3]], 
              $CellContext`settings[$CellContext`subtitlestyle]]}, 
            Map[Style[#, 
              $CellContext`settings[$CellContext`subtitlestyle]]& , 
             Part[$CellContext`plotlabels, 
              Select[$CellContext`lines, # != 1& ]]]], 
           Center]; $CellContext`plottypefunc := 
         If[$CellContext`plottype == 1, DateListPlot, 
           DateListLogPlot]; $CellContext`maplot = $CellContext`plottypefunc[
           Part[$CellContext`plotlines, $CellContext`lines], 
           Background -> $CellContext`settings[$CellContext`plotbackground], 
           FrameTicks -> All, GridLines -> {
             Join[
              DateRange[{2010}, {2030}, 
               Quantity[1, "Months"]], 
              Map[{#, Thick}& , 
               DateRange[{2010}, {2030}, 
                Quantity[1, "Years"]]]], 
             Range[0, 200000, 10000]}, 
           ImageSize -> $CellContext`settings[$CellContext`imagesize], 
           ImageMargins -> $CellContext`settings[$CellContext`imagemargins], 
           LabelStyle -> $CellContext`settings[$CellContext`labelstyle], 
           PlotRange -> Full, 
           TicksStyle -> $CellContext`settings[$CellContext`ticksstyle], 
           PlotLabel -> 
           Column[{$CellContext`plotlabel, $CellContext`updatedstr}, Center], 
           PlotLegends -> Placed[
             SwatchLegend[
              Part[$CellContext`plotlegends, $CellContext`lines], 
              LegendFunction -> (
               Framed[#, 
                Background -> \
$CellContext`settings[$CellContext`plotbackground]]& )], {
             Left, Top}]]; $CellContext`rmaplot = DateListPlot[
           ReplaceAll[
            Prepend[
             Table[
              TimeSeriesThread[(Part[#, 1] - Part[#, 2])/Part[#, 2]& , {
                Part[$CellContext`plotlines, 1], 
                Part[$CellContext`plotlines, $CellContext`t]}, 
               ResamplingMethod -> {
                "Interpolation", InterpolationOrder -> 1}], {$CellContext`t, 
               Select[$CellContext`lines, # > 1& ]}], {}], {} -> {{{}, 
               Null}}], 
           AspectRatio -> $CellContext`settings[$CellContext`aspectratio], 
           Background -> $CellContext`settings[$CellContext`plotbackground], 
           FrameTicks -> All, GridLines -> {
             Join[
              DateRange[{2010}, {2030}, 
               Quantity[1, "Months"]], 
              Map[{#, Thick}& , 
               DateRange[{2010}, {2030}, 
                Quantity[1, "Years"]]]], Automatic}, 
           ImageMargins -> $CellContext`settings[$CellContext`imagemargins], 
           ImageSize -> $CellContext`settings[$CellContext`imagesize], Joined -> 
           False, LabelStyle -> \
$CellContext`settings[$CellContext`labelstyle], PlotLabel -> Column[{
              Style["Relative above/below the moving average", 
               $CellContext`settings[$CellContext`titlestyle]], \
$CellContext`updatedstr}, Center], 
           TicksStyle -> $CellContext`settings[$CellContext`ticksstyle]]; If[
          
          And[$CellContext`plottype == 1, Length[$CellContext`lines] == 2, 
           First[$CellContext`lines] == 1], $CellContext`detail = 
           StringReplace[
             Last[
              Part[$CellContext`plotlegends, $CellContext`lines]], " " -> 
             "-"]; $CellContext`filename = 
           "BTC-USD-" <> $CellContext`detail <> ".jpg"; 
          Export[$CellContext`filename, $CellContext`maplot]; Null]; 
        Column[{$CellContext`maplot, 
           Spacer[20], $CellContext`rmaplot}, Center]], "Specifications" :> {
        Dynamic[$CellContext`selectlines], 
        Dynamic[$CellContext`selectplottype]}, "Options" :> {}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{1289.1, {727.2925334086916, 733.0244670024416}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{{3.960120982407493*^9, 3.9601210502808237`*^9}, {
   3.960542184615861*^9, 3.9605422675929823`*^9}, {3.961069316288566*^9, 
   3.9610693841655827`*^9}, 3.961244433890786*^9, {3.961244470329913*^9, 
   3.9612445428178873`*^9}, {3.961244594649561*^9, 3.961244605181498*^9}, {
   3.961244653401301*^9, 3.961244654517076*^9}, 3.9612446901679583`*^9, {
   3.962274071843598*^9, 3.962274167182417*^9}, {3.9629177464539433`*^9, 
   3.962917806166698*^9}, {3.962917840166461*^9, 3.962917867923154*^9}, {
   3.963136938676159*^9, 3.963136969770542*^9}, {3.963137023982005*^9, 
   3.963137087604653*^9}, 3.963399301143118*^9, {3.963399333782379*^9, 
   3.9633994264947*^9}, 3.964003758926817*^9, 3.964603683700419*^9, 
   3.9648219503024893`*^9, {3.9652199475137873`*^9, 3.965219960868477*^9}, 
   3.965507159693408*^9, 3.96642950579033*^9, 3.966593639425486*^9, 
   3.9668702382729197`*^9, 3.967663028307087*^9, 3.967809589640386*^9, 
   3.968061325937872*^9, 3.968586997685944*^9, 3.968764667704417*^9, 
   3.969526240867901*^9, 3.969797440964465*^9, 3.970144084075708*^9},
 CellLabel->
  "Out[822]=",ExpressionUUID->"5ebe3417-4e68-460b-83e4-038404cde0ec"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{3.954707802559723*^9},
 CellLabel->
  "In[823]:=",ExpressionUUID->"a602610a-4242-4db5-9e9e-f0004447e683"],

Cell[CellGroupData[{

Cell[BoxData["\[AliasDelimiter]"], "Input",
 CellOpen->False,
 CellChangeTimes->{3.951403174003639*^9},
 CellLabel->
  "In[824]:=",ExpressionUUID->"60f0faab-c40c-4a3e-a5f7-c80d919e4679"],

Cell[BoxData["\[AliasDelimiter]"], "Output",
 CellChangeTimes->{
  3.960120982706625*^9, 3.9605421849793997`*^9, 3.961069316775894*^9, 
   3.961244434267501*^9, 3.962274072295751*^9, 3.9629177469064417`*^9, 
   3.963136939285871*^9, 3.963399301796853*^9, 3.96400375911098*^9, 
   3.9646036839042063`*^9, 3.964821950893036*^9, {3.965219947705152*^9, 
   3.965219961054956*^9}, 3.965507159885395*^9, 3.966429506001902*^9, 
   3.966593639632638*^9, 3.966870238470541*^9, 3.967663028527087*^9, 
   3.9678095898794518`*^9, 3.9680613261431828`*^9, 3.9685869978687963`*^9, 
   3.968764667886752*^9, 3.969526241090354*^9, 3.9697974417484837`*^9, 
   3.970144084273943*^9},
 CellLabel->
  "Out[824]=",ExpressionUUID->"5daa3d18-9316-4949-bc6d-c35d2febb885"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Past n days moving average", "Section",
 CellChangeTimes->{{3.931778847021064*^9, 3.9317789179146833`*^9}, {
  3.931778955221694*^9, 3.931778965006196*^9}, {3.931780065852172*^9, 
  3.931780074893587*^9}},ExpressionUUID->"4de07029-d8b0-40fb-ac97-\
1a91d36f1eb6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Module", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"btcn", ",", " ", "mon", ",", " ", "meann", ",", "mean"}], 
      "}"}], "\[IndentingNewLine]", ",", 
     RowBox[{
      RowBox[{"btcn", "=", 
       RowBox[{"Take", "[", 
        RowBox[{
         RowBox[{"btcData", "//", "Normal"}], ",", 
         RowBox[{"-", "n"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"mon", "=", " ", 
       RowBox[{"Take", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"MovingAverage", "[", 
           RowBox[{"btcData", ",", "n"}], "]"}], "//", "Normal"}], ",", 
         RowBox[{"-", "n"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"mon", "=", " ", 
         RowBox[{
          RowBox[{"MovingAverage", "[", 
           RowBox[{"btcData", ",", "n"}], "]"}], "//", "Normal"}]}], ";"}], 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{"mean", "=", 
       RowBox[{"Mean", "[", 
        RowBox[{"Last", " ", "/@", "btcn"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"meann", "=", 
       RowBox[{"NumberForm", "[", 
        RowBox[{
         RowBox[{"Mean", "[", 
          RowBox[{"Last", " ", "/@", "btcn"}], "]"}], ",", 
         RowBox[{"DigitBlock", "->", "3"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"plotlabel", " ", "=", " ", 
       RowBox[{"Column", "[", 
        RowBox[{
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Style", "[", 
            RowBox[{"\"\<Bitcoin Price (USD)\>\"", " ", ",", 
             RowBox[{"settings", "[", "titlestyle", "]"}]}], "]"}], 
           "\[IndentingNewLine]", ",", 
           RowBox[{"Style", "[", 
            RowBox[{
             RowBox[{"\"\<Latest: $\>\"", "  ", "<>", " ", 
              RowBox[{"ToString", "[", 
               RowBox[{"NumberForm", "[", 
                RowBox[{
                 RowBox[{"btcData", "[", "\"\<LastValue\>\"", "]"}], ",", 
                 RowBox[{"DigitBlock", "->", "3"}]}], "]"}], "]"}]}], " ", ",", 
             RowBox[{"settings", "[", "subtitlestyle", "]"}]}], "]"}], 
           "\[IndentingNewLine]", ",", 
           RowBox[{"Style", "[", 
            RowBox[{
             RowBox[{"\"\<Current \>\"", " ", "<>", " ", 
              RowBox[{"ToString", "[", "n", "]"}], 
              "<>", "\"\< Day Moving Average: \>\"", "<>", 
              RowBox[{"dollar", "[", "meann", "]"}]}], ",", 
             RowBox[{"settings", "[", "subtitlestyle", "]"}]}], "]"}], 
           "\[IndentingNewLine]", ",", "updatedstr"}], "\[IndentingNewLine]", 
          "}"}], "\[IndentingNewLine]", ",", "Center"}], 
        "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Column", "[", 
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"DateListPlot", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"btcn", ",", " ", "mon"}], "}"}], "\[IndentingNewLine]", ",", 
           RowBox[{"AspectRatio", "->", 
            RowBox[{"settings", "[", "aspectratio", "]"}]}], 
           "\[IndentingNewLine]", ",", 
           RowBox[{"Background", "->", 
            RowBox[{"settings", "[", "plotbackground", "]"}]}], 
           "\[IndentingNewLine]", ",", 
           RowBox[{"FrameTicks", "->", "All"}], "\[IndentingNewLine]", ",", 
           RowBox[{"GridLines", "->", 
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"Join", "[", 
               RowBox[{
                RowBox[{"DateRange", "[", 
                 RowBox[{
                  RowBox[{"{", "2010", "}"}], ",", 
                  RowBox[{"{", "2030", "}"}], ",", 
                  RowBox[{"Quantity", "[", 
                   RowBox[{"1", ",", "\"\<Months\>\""}], "]"}]}], "]"}], ",", 
                
                RowBox[{
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"#", ",", "Thick"}], "}"}], "&"}], "/@", 
                 RowBox[{"DateRange", "[", 
                  RowBox[{
                   RowBox[{"{", "2010", "}"}], ",", 
                   RowBox[{"{", "2030", "}"}], ",", 
                   RowBox[{"Quantity", "[", 
                    RowBox[{"1", ",", "\"\<Years\>\""}], "]"}]}], "]"}]}]}], 
               "]"}], "\[IndentingNewLine]", ",", 
              RowBox[{"Join", "[", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"{", 
                  RowBox[{"mean", ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{"{", 
                    RowBox[{"Red", ",", "Thick", ",", " ", "Dashed"}], "}"}], 
                    "]"}]}], "}"}], "}"}], ",", 
                RowBox[{"Range", "[", 
                 RowBox[{"0", ",", "200000", ",", "5000"}], "]"}]}], "]"}]}], 
             "\[IndentingNewLine]", "}"}]}], "\[IndentingNewLine]", ",", 
           RowBox[{"ImageSize", "->", 
            RowBox[{"settings", "[", "imagesize", "]"}]}], 
           "\[IndentingNewLine]", ",", 
           RowBox[{"ImageMargins", "->", 
            RowBox[{"settings", "[", "imagemargins", "]"}]}], 
           "\[IndentingNewLine]", ",", 
           RowBox[{"LabelStyle", "->", 
            RowBox[{"settings", "[", "labelstyle", "]"}]}], 
           "\[IndentingNewLine]", ",", 
           RowBox[{"PlotLabel", "->", "plotlabel"}], "\[IndentingNewLine]", ",", 
           RowBox[{"PlotLegends", "->", 
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{"\"\<Price\>\"", "\[IndentingNewLine]", ",", 
              RowBox[{
               RowBox[{"ToString", "[", "n", "]"}], " ", "<>", 
               " ", "\"\< Day Moving Average\>\""}]}], "\[IndentingNewLine]", 
             "}"}]}], "\[IndentingNewLine]", ",", 
           RowBox[{"PlotRange", "->", "Full"}], "\[IndentingNewLine]", ",", 
           RowBox[{"TicksStyle", "->", 
            RowBox[{"settings", "[", "ticksstyle", "]"}]}]}], 
          "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
         RowBox[{"Spacer", "[", "20", "]"}], "\[IndentingNewLine]", ",", 
         RowBox[{"DateListPlot", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{"First", "[", "#", "]"}], "//", "First"}], ",", 
               RowBox[{"N", "[", 
                FractionBox[
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"First", "[", "#", "]"}], "//", "Last"}], ")"}], "-", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"Last", "[", "#", "]"}], "//", "Last"}], ")"}]}], 
                 
                 RowBox[{
                  RowBox[{"Last", "[", "#", "]"}], "//", "Last"}]], "]"}]}], 
              "}"}], "&"}], "/@", " ", 
            RowBox[{"MapThread", "[", 
             RowBox[{"List", ",", 
              RowBox[{"{", 
               RowBox[{"btcn", ",", "mon"}], "}"}]}], "]"}]}], 
           "\[IndentingNewLine]", ",", 
           RowBox[{"AspectRatio", "->", 
            RowBox[{"settings", "[", "aspectratio", "]"}]}], 
           "\[IndentingNewLine]", ",", 
           RowBox[{"Background", "->", 
            RowBox[{"settings", "[", "plotbackground", "]"}]}], 
           "\[IndentingNewLine]", ",", 
           RowBox[{"ImageSize", "->", 
            RowBox[{"settings", "[", "imagesize", "]"}]}], 
           "\[IndentingNewLine]", ",", 
           RowBox[{"ImageMargins", "->", 
            RowBox[{"settings", "[", "imagemargins", "]"}]}], 
           "\[IndentingNewLine]", ",", 
           RowBox[{"FrameTicks", "->", 
            RowBox[{"{", 
             RowBox[{"All", ",", 
              RowBox[{
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"#", ",", 
                  RowBox[{"PercentForm", "[", "#", "]"}]}], "}"}], "&"}], "/@", 
               RowBox[{"Join", "[", 
                RowBox[{
                 RowBox[{"Range", "[", 
                  RowBox[{
                   RowBox[{"-", "5"}], ",", 
                   RowBox[{"-", "0.1"}], ",", "0.1"}], "]"}], ",", 
                 RowBox[{"{", "0", "}"}], ",", 
                 RowBox[{"Range", "[", 
                  RowBox[{"0.1", ",", "5", ",", "0.1"}], "]"}]}], "]"}]}]}], 
             "}"}]}], "\[IndentingNewLine]", ",", 
           RowBox[{"GridLines", "->", 
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"Join", "[", 
               RowBox[{
                RowBox[{"DateRange", "[", 
                 RowBox[{
                  RowBox[{"{", "2010", "}"}], ",", 
                  RowBox[{"{", "2030", "}"}], ",", 
                  RowBox[{"Quantity", "[", 
                   RowBox[{"1", ",", "\"\<Months\>\""}], "]"}]}], "]"}], ",", 
                
                RowBox[{
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"#", ",", "Thick"}], "}"}], "&"}], "/@", 
                 RowBox[{"DateRange", "[", 
                  RowBox[{
                   RowBox[{"{", "2010", "}"}], ",", 
                   RowBox[{"{", "2030", "}"}], ",", 
                   RowBox[{"Quantity", "[", 
                    RowBox[{"1", ",", "\"\<Years\>\""}], "]"}]}], "]"}]}]}], 
               "]"}], "\[IndentingNewLine]", ",", " ", 
              RowBox[{"Join", "[", 
               RowBox[{
                RowBox[{"Range", "[", 
                 RowBox[{
                  RowBox[{"-", "10"}], ",", "10", ",", "0.05"}], "]"}], ",", 
                RowBox[{"{", 
                 RowBox[{"{", 
                  RowBox[{"0", ",", "Thick"}], "}"}], "}"}]}], "]"}]}], 
             "\[IndentingNewLine]", "}"}]}], "\[IndentingNewLine]", ",", 
           RowBox[{"LabelStyle", "->", 
            RowBox[{"settings", "[", "labelstyle", "]"}]}], 
           "\[IndentingNewLine]", ",", 
           RowBox[{"TicksStyle", "->", 
            RowBox[{"settings", "[", "ticksstyle", "]"}]}], 
           "\[IndentingNewLine]", ",", 
           RowBox[{"PlotLabel", "->", 
            RowBox[{"Column", "[", 
             RowBox[{
              RowBox[{"{", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"Style", "[", 
                 RowBox[{"\"\<Relative above/below the moving average\>\"", ",", 
                  RowBox[{"settings", "[", "titlestyle", "]"}]}], "]"}], 
                "\[IndentingNewLine]", ",", "updatedstr"}], 
               "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", ",", 
              "Center"}], "\[IndentingNewLine]", "]"}]}]}], 
          "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}]}], 
        "\[IndentingNewLine]", "}"}], "]"}]}]}], "\[IndentingNewLine]", "]"}],
    "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"n", ",", "200", ",", 
       RowBox[{"Style", "[", 
        RowBox[{"\"\<Moving Average\>\"", ",", "16"}], "]"}]}], "}"}], ",", 
     RowBox[{
      RowBox[{"Join", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"100", "->", " ", "\"\<100 days\>\""}], ",", 
          RowBox[{"200", " ", "->", " ", "\"\<200 days\>\""}], ",", 
          RowBox[{"500", "->", " ", "\"\<500 days\>\""}]}], "}"}], ",", 
        RowBox[{"MapIndexed", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"#1", " ", "->", " ", 
            RowBox[{
             RowBox[{"ToString", "[", 
              RowBox[{"First", "[", "#2", "]"}], "]"}], " ", "<>", 
             " ", "\"\< yr\>\""}]}], "&"}], ",", 
          RowBox[{"Range", "[", 
           RowBox[{"365", ",", 
            RowBox[{"365", " ", "*", " ", "6"}], ",", "365"}], "]"}]}], 
         "]"}]}], "]"}], "//", "Sort"}]}], "}"}]}], "\[IndentingNewLine]", 
  "]"}]], "Input",
 CellOpen->False,
 CellChangeTimes->{{3.931778847021064*^9, 3.9317789179146833`*^9}, {
   3.931778955221694*^9, 3.931779031553317*^9}, {3.931779130967485*^9, 
   3.931779231945709*^9}, {3.931779478412808*^9, 3.931779576580185*^9}, {
   3.931780079753195*^9, 3.931780243832143*^9}, {3.931780298296356*^9, 
   3.93178031995195*^9}, {3.931780409546237*^9, 3.93178056319989*^9}, {
   3.931780596553117*^9, 3.931780597900181*^9}, {3.931780686670824*^9, 
   3.931780716184067*^9}, {3.9317807562388268`*^9, 3.931780781912668*^9}, {
   3.931781391361537*^9, 3.931781463136104*^9}, {3.931781592417137*^9, 
   3.931781594518848*^9}, {3.9317816550741158`*^9, 3.93178165603586*^9}, {
   3.9317816890030527`*^9, 3.931781690155242*^9}, {3.931781937332431*^9, 
   3.931781996296576*^9}, {3.931782037757682*^9, 3.931782049214764*^9}, {
   3.931898427440661*^9, 3.931898443801206*^9}, 3.931898620343934*^9, 
   3.931898651840127*^9, {3.931898715058672*^9, 3.931898718296762*^9}, {
   3.932587800958024*^9, 3.932587803154348*^9}, {3.93291840247709*^9, 
   3.9329184284242897`*^9}, {3.932918484645184*^9, 3.932918488571426*^9}, {
   3.932918545137916*^9, 3.932918550910448*^9}, 3.9329189637059183`*^9, 
   3.932919092520793*^9, {3.932919697541628*^9, 3.932919755217108*^9}, {
   3.932919823022087*^9, 3.932919843789604*^9}, {3.934480111117696*^9, 
   3.934480183380362*^9}, {3.9344802268905582`*^9, 3.9344802457296352`*^9}, {
   3.934480425588777*^9, 3.934480515297563*^9}, {3.93497111829*^9, 
   3.9349712496212893`*^9}, {3.94683337298873*^9, 3.946833444954999*^9}, {
   3.948987944705619*^9, 3.9489879530443707`*^9}, {3.950735328444635*^9, 
   3.9507353350616913`*^9}, {3.9507355472942963`*^9, 3.950735564354507*^9}, {
   3.951083580589435*^9, 3.951083636473559*^9}, {3.95108380116348*^9, 
   3.951083864368375*^9}, {3.951083900179134*^9, 3.951083913018723*^9}, 
   3.951083956315279*^9, {3.95108609786479*^9, 3.951086106844447*^9}, 
   3.9513958307067966`*^9, {3.95139591316286*^9, 3.951395915176148*^9}, {
   3.951395952249949*^9, 3.951395980958734*^9}, {3.951396022029833*^9, 
   3.9513960356542263`*^9}, {3.951403395481434*^9, 3.951403435117565*^9}, 
   3.951467119367474*^9, {3.951467151166666*^9, 3.9514671517351093`*^9}, {
   3.953059261268828*^9, 3.953059270162171*^9}, {3.9530594465400677`*^9, 
   3.953059468943033*^9}, {3.953062671160239*^9, 3.953062738737741*^9}, {
   3.953062830010601*^9, 3.953062830516263*^9}, {3.953063092380926*^9, 
   3.9530631109020443`*^9}, {3.9531365793523283`*^9, 
   3.9531366151636133`*^9}, {3.9532847577130117`*^9, 3.953284789205282*^9}, {
   3.953490642074526*^9, 3.953490712076952*^9}, {3.953490767518695*^9, 
   3.953490780837414*^9}, {3.953491119868032*^9, 3.953491120232987*^9}, {
   3.95349174103633*^9, 3.9534917588527117`*^9}, {3.9534918462649307`*^9, 
   3.953491868485325*^9}, {3.953491907882359*^9, 3.953491908229457*^9}, {
   3.9535031304139643`*^9, 3.95350313302843*^9}, {3.953631732708932*^9, 
   3.9536318664491673`*^9}},
 CellLabel->
  "In[825]:=",ExpressionUUID->"cf261ae5-a1d3-465a-9c65-0206705e1cc5"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`n$$ = 200, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`n$$], 200, 
       Style["Moving Average", 16]}, {
      100 -> "100 days", 200 -> "200 days", 365 -> "1 yr", 500 -> "500 days", 
       730 -> "2 yr", 1095 -> "3 yr", 1460 -> "4 yr", 1825 -> "5 yr", 2190 -> 
       "6 yr"}, ControlType -> PopupMenu}}, Typeset`size$$ = {
    1462.8796875, {525.9821391059039, 531.7140726996539}}, Typeset`update$$ = 
    0, Typeset`initDone$$, Typeset`skipInitDone$$ = True, 
    Typeset`keyframeActionsQ$$ = False, Typeset`keyframeList$$ = {}}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`n$$ = 200}, 
      "ControllerVariables" :> {}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$, Typeset`keyframeActionsQ$$, 
        Typeset`keyframeList$$}, "Body" :> 
      Module[{$CellContext`btcn$, $CellContext`mon$, $CellContext`meann$, \
$CellContext`mean$}, $CellContext`btcn$ = Take[
           
           Normal[$CellContext`btcData], -$CellContext`n$$]; \
$CellContext`mon$ = Take[
           Normal[
            
            MovingAverage[$CellContext`btcData, $CellContext`n$$]], \
-$CellContext`n$$]; $CellContext`mean$ = Mean[
           Map[Last, $CellContext`btcn$]]; $CellContext`meann$ = NumberForm[
           Mean[
            Map[Last, $CellContext`btcn$]], DigitBlock -> 
           3]; $CellContext`plotlabel = Column[{
            Style["Bitcoin Price (USD)", 
             $CellContext`settings[$CellContext`titlestyle]], 
            Style["Latest: $" <> ToString[
               NumberForm[
                $CellContext`btcData["LastValue"], DigitBlock -> 3]], 
             $CellContext`settings[$CellContext`subtitlestyle]], 
            Style[
            "Current " <> ToString[$CellContext`n$$] <> 
             " Day Moving Average: " <> \
$CellContext`dollar[$CellContext`meann$], 
             $CellContext`settings[$CellContext`subtitlestyle]], \
$CellContext`updatedstr}, Center]; Column[{
           
           DateListPlot[{$CellContext`btcn$, $CellContext`mon$}, 
            AspectRatio -> $CellContext`settings[$CellContext`aspectratio], 
            Background -> $CellContext`settings[$CellContext`plotbackground], 
            FrameTicks -> All, GridLines -> {
              Join[
               DateRange[{2010}, {2030}, 
                Quantity[1, "Months"]], 
               Map[{#, Thick}& , 
                DateRange[{2010}, {2030}, 
                 Quantity[1, "Years"]]]], 
              Join[{{$CellContext`mean$, 
                 Directive[{Red, Thick, Dashed}]}}, 
               Range[0, 200000, 5000]]}, 
            ImageSize -> $CellContext`settings[$CellContext`imagesize], 
            ImageMargins -> $CellContext`settings[$CellContext`imagemargins], 
            LabelStyle -> $CellContext`settings[$CellContext`labelstyle], 
            PlotLabel -> $CellContext`plotlabel, 
            PlotLegends -> {
             "Price", ToString[$CellContext`n$$] <> " Day Moving Average"}, 
            PlotRange -> Full, 
            TicksStyle -> $CellContext`settings[$CellContext`ticksstyle]], 
           Spacer[20], 
           DateListPlot[
            Map[{
              First[
               First[#]], 
              N[(Last[
                  First[#]] - Last[
                 Last[#]])/Last[
                Last[#]]]}& , 
             MapThread[List, {$CellContext`btcn$, $CellContext`mon$}]], 
            AspectRatio -> $CellContext`settings[$CellContext`aspectratio], 
            Background -> $CellContext`settings[$CellContext`plotbackground], 
            ImageSize -> $CellContext`settings[$CellContext`imagesize], 
            ImageMargins -> $CellContext`settings[$CellContext`imagemargins], 
            FrameTicks -> {All, 
              Map[{#, 
                PercentForm[#]}& , 
               Join[
                Range[-5, -0.1, 0.1], {0}, 
                Range[0.1, 5, 0.1]]]}, GridLines -> {
              Join[
               DateRange[{2010}, {2030}, 
                Quantity[1, "Months"]], 
               Map[{#, Thick}& , 
                DateRange[{2010}, {2030}, 
                 Quantity[1, "Years"]]]], 
              Join[
               Range[-10, 10, 0.05], {{0, Thick}}]}, 
            LabelStyle -> $CellContext`settings[$CellContext`labelstyle], 
            TicksStyle -> $CellContext`settings[$CellContext`ticksstyle], 
            PlotLabel -> Column[{
               Style["Relative above/below the moving average", 
                $CellContext`settings[$CellContext`titlestyle]], \
$CellContext`updatedstr}, Center]]}]], 
      "Specifications" :> {{{$CellContext`n$$, 200, 
          Style["Moving Average", 16]}, {
         100 -> "100 days", 200 -> "200 days", 365 -> "1 yr", 500 -> 
          "500 days", 730 -> "2 yr", 1095 -> "3 yr", 1460 -> "4 yr", 1825 -> 
          "5 yr", 2190 -> "6 yr"}}}, "Options" :> {}, "DefaultOptions" :> {}],
     
     ImageSizeCache->{1511.9796875, {573.721656317818, 579.453589911568}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{
  3.960120982716548*^9, 3.9605421849944677`*^9, 3.961069316793564*^9, 
   3.9612444342919817`*^9, 3.962274072317687*^9, 3.9629177469325113`*^9, 
   3.96313693930681*^9, 3.963399301815598*^9, 3.964003759126588*^9, 
   3.9646036839217167`*^9, 3.964821950908923*^9, {3.9652199477213573`*^9, 
   3.965219961067725*^9}, 3.965507159899869*^9, 3.966429506016292*^9, 
   3.966593639649791*^9, 3.966870238488655*^9, 3.9676630285411463`*^9, 
   3.9678095898972483`*^9, 3.968061326198449*^9, 3.968586997881948*^9, 
   3.968764667903549*^9, 3.96952624110597*^9, 3.969797441820435*^9, 
   3.970144084288204*^9},
 CellLabel->
  "Out[825]=",ExpressionUUID->"5954989f-0e60-4b49-bfa4-2c56727de1a3"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1370.25, 878.25},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
DockedCells->{
  Cell[
   BoxData[
    DynamicModuleBox[{LinterUIDockedCell`Private`notebook$$}, 
     GraphicsBox[{
       InsetBox[
        TemplateBox[{
          PaneBox[
           StyleBox[
           "\"Code Analysis\"", FontColor -> GrayLevel[0.4], FontFamily -> 
            "Source Sans Pro", FontWeight -> Plain, FontSize -> 13, 
            StripOnInput -> False], 
           BaselinePosition -> (Baseline -> Scaled[0.65])], 
          TemplateBox[{8}, "Spacer1"], 
          PaneBox[
           
           PaneSelectorBox[{{False, False} -> 
             TemplateBox[{0}, "Spacer1"], {True, False} -> 
             TemplateBox[{0}, "Spacer1"], {True, True} -> PaneBox[
               InterpretationBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEExpressions", "PercolateAnimator"][Medium]], 
                ProgressIndicator[Appearance -> "Percolate"], 
                BaseStyle -> {"Deploy"}], BaselinePosition -> Scaled[0.05]], {
              False, True} -> 
             DynamicModuleBox[{
               CodeInspector`LinterUI`Private`tracker$$ = 
                CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts}, 
               DynamicWrapperBox[
                DynamicBox[
                 ToBoxes[
                 CodeInspector`LinterUI`Private`tracker$$; 
                  LinterUIDockedCell`Private`dockedCellSeverityCountsButton[
                   LinterUIDockedCell`Private`notebook$$], TraditionalForm], 
                 TrackedSymbols :> {
                  CodeInspector`LinterUI`Private`tracker$$}], 
                If[
                CodeInspector`LinterUI`Private`tracker$$ =!= 
                 CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts, CodeInspector`LinterUI`Private`tracker$$ = 
                 CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts]], DynamicModuleValues :> {}]}, 
            Dynamic[FEPrivate`EvaluatorStatus["Local"]; {
               CodeInspector`LinterUI`Private`varValue[
               LinterUIDockedCell`Private`notebook$$, "AnalysisInProgressQ"], 
               
               TrueQ[
                CodeInspector`LinterUI`Private`varValue[
                LinterUIDockedCell`Private`notebook$$, 
                 "DockedCellPresentQ"]]}], ImageSize -> Automatic], 
           BaselinePosition -> Scaled[0.15]]}, "Row", 
         DisplayFunction -> (PaneBox[
           RowBox[{
             TemplateSlotSequence[1, "\[InvisibleSpace]"]}], Alignment -> 
           Baseline]& ), InterpretationFunction -> (RowBox[{"Row", "[", 
            RowBox[{
              RowBox[{"{", 
                TemplateSlotSequence[1, ","], "}"}], ",", 
              RowBox[{"Alignment", "\[Rule]", "Baseline"}]}], "]"}]& )], 
        Offset[{8, 0}, {-1, 0}], {-1, 0}], 
       InsetBox[
        PaneSelectorBox[{
         True -> DynamicModuleBox[{
            CodeInspector`LinterUI`Private`hoverQ$$ = False, 
             CodeInspector`LinterUI`Private`mouseDownQ$$ = False, 
             CodeInspector`LinterUI`Private`fontColor$$}, 
            ButtonBox[
             DynamicWrapperBox[
              TemplateBox[{
                DynamicWrapperBox[
                 StyleBox[
                  PaneBox[
                  "\"Reanalyze Notebook\"", ContentPadding -> True, 
                   FrameMargins -> None, BaselinePosition -> Baseline], 
                  FontColor -> 
                  Dynamic[CodeInspector`LinterUI`Private`fontColor$$], 
                  FontColor -> GrayLevel[0.2], FontFamily -> 
                  "Source Sans Pro", FontWeight -> Plain, FontSize -> 14, 
                  StripOnInput -> False], 
                 CodeInspector`LinterUI`Private`fontColor$$ = Which[
                   TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextInactiveColor"], 
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextHoverColor"], True, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextColor"]]], ContentPadding -> False, 
                FrameMargins -> {{9, 9}, {0, 0}}, 
                Alignment -> {Center, Center}, ImageSize -> {Automatic, 19}, 
                RoundingRadius -> 3, FrameStyle -> Dynamic[
                  Directive[
                   AbsoluteThickness[0.5], 
                   Which[
                    TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeInactiveColor"], 
                    CodeInspector`LinterUI`Private`hoverQ$$, 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeHoverColor"], True, 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeColor"]]]], Background -> Dynamic[
                  Which[
                   TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackInactiveColor"], 
                   And[
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                    CodeInspector`LinterUI`Private`mouseDownQ$$], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackMouseDownColor"], 
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackHoverColor"], True, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackColor"]]]}, "Highlighted"], 
              CodeInspector`LinterUI`Private`hoverQ$$ = 
               CurrentValue["MouseOver"]; 
              CodeInspector`LinterUI`Private`mouseDownQ$$ = 
               CurrentValue["MouseButtonTest"]], 
             Appearance -> {
              "Default" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True], "Hover" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True], 
               "Pressed" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True]}, 
             BaselinePosition -> Baseline, 
             ButtonFunction :> (
              If[OptionValue[{
                  ImageSize -> {Automatic, 19}, 
                   FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                   Baseline, Alignment -> {Center, Center}, Method -> 
                   "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                   "TextHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                   "BackHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                   "EdgeHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, "ActiveQ"] =!= 
                False, 
                CodeInspector`LinterUI`Private`attachAnalysisAction[
                 EvaluationNotebook[]]]; 
              CodeInspector`LinterUI`Private`mouseDownQ$$ = False), 
             ContentPadding -> False, Evaluator -> Automatic, Method -> 
             "Queued"], DynamicModuleValues :> {}], False -> ButtonBox[
            TemplateBox[{
              StyleBox[
              "\"Analyze Notebook\"", FontColor -> GrayLevel[0.2], FontFamily -> 
               "Source Sans Pro", FontWeight -> Plain, FontSize -> 14, 
               StripOnInput -> False], ImageSize -> {Automatic, 19}, 
              FrameMargins -> {{9, 9}, {0, 0}}, BaselinePosition -> Baseline, 
              Alignment -> {Center, Center}, Background -> GrayLevel[1], 
              FrameStyle -> Dynamic[
                If[
                 CurrentValue["MouseOver"], 
                 Hue[0.55, 0.82, 0.87], 
                 GrayLevel[0.8]]]}, "Highlighted"], 
            Appearance -> {
             "Default" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True], "Hover" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True], "Pressed" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True]}, 
            ButtonFunction :> (CurrentValue[
                EvaluationNotebook[], DockedCells] = 
              With[{LinterUIDockedCell`Private`dockedCells = CurrentValue[
                   EvaluationNotebook[], DockedCells]}, 
                Pick[LinterUIDockedCell`Private`dockedCells, 
                 Map[Quiet[
                    Options[#, CellTags]] =!= {
                   CellTags -> "CodeAnalysisDockedCell"}& , 
                  LinterUIDockedCell`Private`dockedCells]]]; 
             Needs["CodeInspector`"]; 
             CodeInspector`AttachAnalysis[
              LinterUIDockedCell`Private`notebook$$]), Evaluator -> Automatic,
             Method -> "Queued"]}, 
         Dynamic[FEPrivate`EvaluatorStatus["Local"]; TrueQ[
            CodeInspector`LinterUI`Private`varValue[
            LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"]]], 
         ImageSize -> Automatic], 
        Offset[{-26, 0}, {1, 0}], {1, 0}], 
       TagBox[
        TagBox[
         TooltipBox[{{
            GrayLevel[0.6], 
            DiskBox[
             Offset[{-11, 0}, {1, 0}], 
             Offset[6]]}, {
            GrayLevel[0.97], 
            AbsoluteThickness[1.5], 
            CapForm["Round"], 
            LineBox[{{
               Offset[{-13, 2}, {1, 0}], 
               Offset[{-9, -2}, {1, 0}]}, {
               Offset[{-13, -2}, {1, 0}], 
               Offset[{-9, 2}, {1, 0}]}}]}}, "\"Close analysis\"", 
          TooltipDelay -> 0, TooltipStyle -> "TextStyling"], 
         Annotation[#, "Close analysis", "Tooltip"]& ], 
        EventHandlerTag[{"MouseClicked" :> (Map[NotebookDelete, 
             Flatten[
              CodeInspector`LinterUI`Private`varValue[
              LinterUIDockedCell`Private`notebook$$, All, 
               "UIAttachedCells"]]]; Map[NotebookDelete, 
             Flatten[
              CodeInspector`LinterUI`Private`varValue[
              LinterUIDockedCell`Private`notebook$$, All, 
               "CleanCellBracketMarker"]]]; CurrentValue[
              EvaluationNotebook[], DockedCells] = 
            With[{LinterUIDockedCell`Private`dockedCells = CurrentValue[
                 EvaluationNotebook[], DockedCells]}, 
              Pick[LinterUIDockedCell`Private`dockedCells, 
               Map[Quiet[
                  Options[#, CellTags]] =!= {
                 CellTags -> "CodeAnalysisDockedCell"}& , 
                LinterUIDockedCell`Private`dockedCells]]]; 
           CodeInspector`LinterUI`Private`applyToVar[Remove, {
              EvaluationNotebook[], All}]; 
           CodeInspector`LinterUI`Private`varSet[{
             LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"}, 
             False]), Method -> "Preemptive", PassEventsDown -> Automatic, 
          PassEventsUp -> True}]]}, AspectRatio -> Full, 
      ImageSize -> {Full, 23}, PlotRange -> {{-1, 1}, {-1, 1}}], 
     Deinitialization :> 
     CodeInspector`LinterUI`Private`varSet[{
       LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"}, False], 
     DynamicModuleValues :> {}, 
     Initialization :> ({
       LinterUIDockedCell`Private`dockedCellSeverityCountsButton[
          Pattern[LinterUIDockedCell`Private`notebook, 
           Blank[NotebookObject]]] := 
        With[{LinterUIDockedCell`Private`formatIcon = 
           Show[#, ImageSize -> {13, 9}, BaselinePosition -> Scaled[-0.2]]& }, 
          ActionMenu[
           Highlighted[
            Row[{
              CodeInspector`LinterUI`Private`lintSeverityCountsIconRow[
              LinterUIDockedCell`Private`notebook, "exclamSize" -> 12, 
               FontSize -> 14, FontWeight -> Plain], 
              Spacer[2], 
              LinterUIDockedCell`Private`formatIcon[
               CodeInspector`LinterUI`Private`iconData["DownChevron"][
                CodeInspector`LinterUI`Private`colorData["UIDark"]]]}], 
            ImageSize -> {Automatic, 19}, BaselinePosition -> Baseline, 
            Background -> White, Frame -> True, FrameStyle -> Dynamic[
              If[
               CurrentValue["MouseOver"], 
               Hue[0.55, 0.82, 0.87], 
               GrayLevel[0.8]]], FrameMargins -> {6 {1, 1}, {1, 1}}, 
            Alignment -> {Center, Baseline}], 
           Map[
           LinterUIDockedCell`Private`dockedCellMenuItem[
            LinterUIDockedCell`Private`notebook, #]& , 
            CodeInspector`LinterUI`Private`varValue[
            LinterUIDockedCell`Private`notebook, All, "Cell"]], Appearance -> 
           None]], LinterUIDockedCell`Private`dockedCellMenuItem[
          Pattern[LinterUIDockedCell`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[LinterUIDockedCell`Private`cell, 
           Blank[CellObject]]] := With[{}, Graphics[{
             Inset[
              With[{LinterUIDockedCell`Private`expressionString = First[
                  FrontEndExecute[
                   FrontEnd`ExportPacket[
                    First[
                    CodeInspector`LinterUI`Private`varValue[
                    LinterUIDockedCell`Private`notebook, 
                    LinterUIDockedCell`Private`cell, "CellContents"]], 
                    "InputText"]]]}, {
               LinterUIDockedCell`Private`noLineBreaks = 
                StringReplace[
                 LinterUIDockedCell`Private`expressionString, "\n" -> " "]}, {
               LinterUIDockedCell`Private`previewString = 
                StringTake[LinterUIDockedCell`Private`noLineBreaks, {1, 
                   UpTo[LinterUIDockedCell`Private`$previewLength]}]}, 
               CodeInspector`LinterUI`Private`styleData["FixedWidth"][
                If[
                StringLength[LinterUIDockedCell`Private`expressionString] > 
                 LinterUIDockedCell`Private`$previewLength, 
                 StringDrop[LinterUIDockedCell`Private`previewString, -1] <> 
                 "\[Ellipsis]", 
                 LinterUIDockedCell`Private`previewString]]], {-1, 0}, {-1, 
              0}], 
             Inset[
              CodeInspector`LinterUI`Private`lintSeverityCountsIconRow[
              LinterUIDockedCell`Private`cell], {1, 0}, {1, 0}]}, 
            ImageSize -> {300, 25}, AspectRatio -> Full, 
            PlotRange -> {{-1, 1}, {-1, 1}}, ImagePadding -> None] :> (
           SelectionMove[LinterUIDockedCell`Private`cell, All, Cell]; 
           With[{
             LinterUIDockedCell`Private`nb = 
              ParentNotebook[LinterUIDockedCell`Private`cell]}, 
             FrontEndExecute[
              FrontEnd`FrontEndToken[
              LinterUIDockedCell`Private`nb, "OpenSelectionParents"]]]; 
           SelectionMove[LinterUIDockedCell`Private`cell, After, Cell])], 
        LinterUIDockedCell`Private`$previewLength = 28, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`notebook, 
            Blank[NotebookObject]], All, 
           Pattern[CodeInspector`LinterUI`Private`name, 
            Blank[String]]}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Map[Apply[CodeInspector`LinterUI`Private`function, 
           Join[
            ToHeldExpression[#], 
            Hold[CodeInspector`LinterUI`Private`args]]]& , 
          
          Names[(CodeInspector`LinterUI`Private`varNameString[
             CodeInspector`LinterUI`Private`notebook] <> "*") <> 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]], 
           Pattern[CodeInspector`LinterUI`Private`name, 
            Blank[String]]}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Apply[CodeInspector`LinterUI`Private`function, 
          Join[
           ToHeldExpression[
            CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments]], 
           Hold[CodeInspector`LinterUI`Private`args]]], Null, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]], All}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Map[Apply[CodeInspector`LinterUI`Private`function, 
           Join[
            ToHeldExpression[#], 
            Hold[CodeInspector`LinterUI`Private`args]]]& , 
          Names[
          CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> "*"]], 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], All, 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := Map[Symbol, 
          
          Names[(CodeInspector`LinterUI`Private`varNameString[
             CodeInspector`LinterUI`Private`notebook] <> "*") <> 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := Symbol[
          CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`nameArguments, 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], All] := Map[Symbol, 
          Names[
          CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> "*"]], 
        CodeInspector`LinterUI`Private`varSet[{
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]]}, 
          Pattern[CodeInspector`LinterUI`Private`value, 
           Blank[]]] := Apply[Set, 
          Append[
           ToHeldExpression[
            CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments]], 
           CodeInspector`LinterUI`Private`value]], 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]]] := ((
           "CodeInspector`LinterUI`Private`Vars`" <> "$$") <> 
          With[{CodeInspector`LinterUI`Private`nbID = 
             Last[CodeInspector`LinterUI`Private`notebook]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`nbID], 
             StringReplace[CodeInspector`LinterUI`Private`nbID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`nbID]]]) <> "$$", Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]]] := (
          CodeInspector`LinterUI`Private`varNameString[
            Replace[
             ParentNotebook[CodeInspector`LinterUI`Private`cell], $Failed -> 
             EvaluationNotebook[]]] <> 
          With[{CodeInspector`LinterUI`Private`cellID = 
             First[CodeInspector`LinterUI`Private`cell]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`cellID], 
             StringReplace[CodeInspector`LinterUI`Private`cellID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`cellID]]]) <> "$$", Null,
         CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]]] := (
          CodeInspector`LinterUI`Private`varNameString[
           CodeInspector`LinterUI`Private`notebook] <> 
          With[{CodeInspector`LinterUI`Private`cellID = 
             First[CodeInspector`LinterUI`Private`cell]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`cellID], 
             StringReplace[CodeInspector`LinterUI`Private`cellID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`cellID]]]) <> "$$", Null,
         CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`notebook] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`cell] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`notebook, 
           CodeInspector`LinterUI`Private`cell] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], 
          Pattern[CodeInspector`LinterUI`Private`lint, 
           Blank[CodeInspector`InspectionObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := ((
           CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> Apply[Sequence, 
             Riffle[
              Map[StringDelete[
                ToString[#], 
                Alternatives["[", "]", "{", "}", ",", " "]]& , 
               CodeInspector`LinterUI`Private`extractFirstList[
                Last[CodeInspector`LinterUI`Private`lint][
                CodeParser`Source]]], "$"]]) <> "$$") <> 
         CodeInspector`LinterUI`Private`name, 
        CodeInspector`LinterUI`Private`extractFirstList[
          Pattern[CodeInspector`LinterUI`Private`expr, 
           Blank[]]] := FirstCase[CodeInspector`LinterUI`Private`expr, 
          Blank[List], {}, {0, Infinity}]}; 
      LinterUIDockedCell`Private`notebook$$ = EvaluationNotebook[]), 
     UnsavedVariables :> {LinterUIDockedCell`Private`notebook$$}]], 
   CellFrame -> {{0, 0}, {1, 1}}, CellFrameMargins -> {{0, 0}, {0, 0}}, 
   CellFrameColor -> GrayLevel[0.85], Background -> GrayLevel[0.97], CellTags -> 
   "CodeAnalysisDockedCell"]},
FrontEndVersion->"14.3 for Mac OS X ARM (64-bit) (July 8, 2025)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"c4d59863-72bc-4e6e-9ba2-6774c3e58737"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[576, 22, 786, 11, 96, "Title",ExpressionUUID->"f5fa712f-8f02-48db-ad7d-991505d584c6"],
Cell[CellGroupData[{
Cell[1387, 37, 2412, 66, 19, "Input",ExpressionUUID->"9a9e9e9d-ec59-4e5e-9d58-ff1c581459b9",
 CellOpen->False],
Cell[3802, 105, 1132, 20, 44, "Output",ExpressionUUID->"9bcbf4ae-0f7e-4530-9c45-c157afe5011b"]
}, Open  ]],
Cell[4949, 128, 14385, 297, 19, "Input",ExpressionUUID->"22d7def2-8ef0-471c-a798-9bc673ed95b7",
 CellOpen->False],
Cell[CellGroupData[{
Cell[19359, 429, 19236, 372, 19, "Input",ExpressionUUID->"02b4a66c-d52d-466d-99b8-567eb1e34c19",
 CellOpen->False],
Cell[38598, 803, 7023, 133, 1496, "Output",ExpressionUUID->"5ebe3417-4e68-460b-83e4-038404cde0ec"]
}, Open  ]],
Cell[45636, 939, 151, 3, 29, "Input",ExpressionUUID->"a602610a-4242-4db5-9e9e-f0004447e683"],
Cell[CellGroupData[{
Cell[45812, 946, 186, 4, 19, "Input",ExpressionUUID->"60f0faab-c40c-4a3e-a5f7-c80d919e4679",
 CellOpen->False],
Cell[46001, 952, 747, 12, 33, "Output",ExpressionUUID->"5daa3d18-9316-4949-bc6d-c35d2febb885"]
}, Open  ]],
Cell[CellGroupData[{
Cell[46785, 969, 268, 4, 66, "Section",ExpressionUUID->"4de07029-d8b0-40fb-ac97-1a91d36f1eb6"],
Cell[CellGroupData[{
Cell[47078, 977, 15056, 317, 19, "Input",ExpressionUUID->"cf261ae5-a1d3-465a-9c65-0206705e1cc5",
 CellOpen->False],
Cell[62137, 1296, 6540, 133, 1170, "Output",ExpressionUUID->"5954989f-0e60-4b49-bfa4-2c56727de1a3"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

