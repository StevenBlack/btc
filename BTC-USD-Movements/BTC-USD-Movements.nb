(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Wolfram 14.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       154,          7]
NotebookDataLength[    327024,       6054]
NotebookOptionsPosition[    325113,       6010]
NotebookOutlinePosition[    325511,       6026]
CellTagsIndexPosition[    325468,       6023]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Bitcoin-USD Movements", "Title",
 CellChangeTimes->{{3.817771249918704*^9, 3.817771272743654*^9}, {
  3.930597030408122*^9, 3.930597040645636*^9}, {3.93077730386965*^9, 
  3.9307773049960012`*^9}, {3.950478725765079*^9, 
  3.950478730649313*^9}},ExpressionUUID->"d0156753-738e-4289-aedc-\
5077aa29e1a2"],

Cell["\<\
This notebook serves to analyze Bitcoin price movements on either a daily, \
weekly, or monthly basis .\
\>", "Text",
 CellChangeTimes->{{3.949947167054709*^9, 
  3.949947212016868*^9}},ExpressionUUID->"267939b8-5eda-4511-bf7d-\
42ed242c822b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "Since", " ", "Mathematica", " ", "operates", " ", "in", " ", "a", " ", 
     "global", " ", "environment"}], ",", " ", 
    RowBox[{
     RowBox[{"let", "'"}], "s", " ", "clear", " ", "all", " ", "that"}], ",", 
    " ", 
    RowBox[{"so", " ", 
     RowBox[{"we", "'"}], "re", " ", "clean"}]}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"Clear", "[", "\"\<Global`\>\"", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"Buttons", " ", "to", " ", 
     RowBox[{"hide", " ", "/", " ", "show"}], " ", "code"}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"CloseAllInputsCells", "[", "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"nb", ",", "cells"}], "}"}], ",", 
       RowBox[{
        RowBox[{"nb", "=", 
         RowBox[{"EvaluationNotebook", "[", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"cells", "=", 
         RowBox[{"Cells", "[", 
          RowBox[{"nb", ",", 
           RowBox[{"CellStyle", "->", "\"\<Input\>\""}]}], "]"}]}], ";", 
        RowBox[{
         RowBox[{
          RowBox[{"SetOptions", "[", 
           RowBox[{"#", ",", 
            RowBox[{"CellOpen", "->", "False"}]}], "]"}], "&"}], "/@", 
         "cells"}], ";"}]}], "]"}]}], ";"}], "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"OpenAllInputsCells", "[", "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"nb", ",", "cells"}], "}"}], ",", 
       RowBox[{
        RowBox[{"nb", "=", 
         RowBox[{"EvaluationNotebook", "[", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"cells", "=", 
         RowBox[{"Cells", "[", 
          RowBox[{"nb", ",", 
           RowBox[{"CellStyle", "->", "\"\<Input\>\""}]}], "]"}]}], ";", 
        RowBox[{
         RowBox[{
          RowBox[{"SetOptions", "[", 
           RowBox[{"#", ",", 
            RowBox[{"CellOpen", "->", "True"}]}], "]"}], "&"}], "/@", 
         "cells"}], ";"}]}], "]"}]}], ";"}], "\n", "\[IndentingNewLine]", 
   RowBox[{"Row", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Button", "[", 
       RowBox[{"\"\<Hide Code\>\"", ",", 
        RowBox[{"SelectionEvaluate", "[", 
         RowBox[{"CloseAllInputsCells", "[", "]"}], "]"}]}], "]"}], ",", 
      RowBox[{"Button", "[", 
       RowBox[{"\"\<Show Code\>\"", ",", 
        RowBox[{"SelectionEvaluate", "[", 
         RowBox[{"OpenAllInputsCells", "[", "]"}], "]"}]}], "]"}]}], "}"}], 
    "]"}], "\n"}]}]], "Input",
 CellOpen->False,
 CellChangeTimes->{{3.9501353119954033`*^9, 3.950135312947233*^9}, {
  3.950135348619203*^9, 3.950135387089275*^9}, {3.950735214777595*^9, 
  3.95073521673057*^9}},
 CellLabel->
  "In[385]:=",ExpressionUUID->"9e5f9d4f-7f8a-46d3-b2ed-6aba96bf060c"],

Cell[BoxData[
 TemplateBox[{
   ButtonBox["\"Hide Code\"", ButtonFunction :> SelectionEvaluate[
      $CellContext`CloseAllInputsCells[]], Appearance -> Automatic, Evaluator -> 
    Automatic, Method -> "Preemptive"], 
   ButtonBox["\"Show Code\"", ButtonFunction :> SelectionEvaluate[
      $CellContext`OpenAllInputsCells[]], Appearance -> Automatic, Evaluator -> 
    Automatic, Method -> "Preemptive"]},
  "RowDefault"]], "Output",
 CellChangeTimes->{
  3.952950242158903*^9, 3.9530648211300364`*^9, 3.953064958622326*^9, 
   3.953064994240164*^9, 3.953065349950439*^9, 3.953065465573783*^9, 
   3.953126301207666*^9, 3.953126763140174*^9, 3.95312695500004*^9, 
   3.953127117979952*^9, 3.9531271852779837`*^9, 3.953127515891465*^9, 
   3.953127565970191*^9, 3.953127614148252*^9, 3.953127664280751*^9, 
   3.953136707707389*^9, 3.9531368280231953`*^9, 3.953136973229302*^9, 
   3.953137162354211*^9, 3.953137357043047*^9, 3.953137409894322*^9, 
   3.953137478783972*^9, 3.953137580524066*^9, 3.953285299268303*^9, 
   3.9532853579233027`*^9, 3.953285456811905*^9, 3.9534102329466753`*^9, 
   3.9542733120956717`*^9, 3.95444635802569*^9, 3.9551400263429003`*^9, 
   3.95548301709028*^9, 3.955483914695512*^9, 3.955484592070867*^9, 
   3.9556323769979563`*^9, 3.955788802405212*^9, 3.9559111390723*^9, {
   3.955911408801759*^9, 3.955911408886239*^9}, 3.956325663929028*^9, 
   3.9565835736747913`*^9, 3.9566950342389593`*^9, 3.957003217109652*^9, 
   3.95738834267148*^9, 3.957668020911253*^9, 3.958544604531591*^9, 
   3.958766187928995*^9, 3.958902507986314*^9, 3.9593733764582148`*^9},
 CellLabel->
  "Out[388]=",ExpressionUUID->"cb78cd40-b31f-4d52-98c8-00ce14abcd11"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"SetDirectory", "[", 
   RowBox[{"NotebookDirectory", "[", "]"}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"settings", "=", 
    RowBox[{"<|", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"imagemargins", "->", "20"}], "\[IndentingNewLine]", ",", 
      RowBox[{"imagesize", "->", "1200"}], "\[IndentingNewLine]", ",", 
      RowBox[{"labelstyle", "->", 
       RowBox[{"{", "18", "}"}]}], "\[IndentingNewLine]", ",", 
      RowBox[{"origindate", "->", "\"\<Sep. 14, 2011\>\""}], 
      "\[IndentingNewLine]", ",", 
      RowBox[{"plotbackground", "->", 
       RowBox[{"Lighter", "[", 
        RowBox[{"LightGray", ",", "0.75"}], "]"}]}], "\[IndentingNewLine]", ",", 
      RowBox[{"plotmarkers", "->", 
       RowBox[{"{", 
        RowBox[{"None", ",", 
         RowBox[{"{", 
          RowBox[{"\"\<OpenMarkers\>\"", ",", "8"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\"\<OpenMarkers\>\"", ",", "8"}], "}"}]}], "}"}]}], 
      "\[IndentingNewLine]", ",", 
      RowBox[{"plotstyle", "->", 
       RowBox[{"{", 
        RowBox[{"Automatic", ",", 
         RowBox[{"Darker", "[", "Green", "]"}], ",", 
         RowBox[{"Lighter", "[", "Red", "]"}]}], "}"}]}], 
      "\[IndentingNewLine]", ",", 
      RowBox[{"subtitlestyle", "->", 
       RowBox[{"{", "15", "}"}]}], "\[IndentingNewLine]", ",", 
      RowBox[{"ticksstyle", "->", 
       RowBox[{"{", "16", "}"}]}], "\[IndentingNewLine]", ",", 
      RowBox[{"titlestyle", "->", 
       RowBox[{"{", 
        RowBox[{"20", ",", "Red"}], "}"}]}]}], "\[IndentingNewLine]", 
     "|>"}]}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Put", " ", "these", " ", "stats", " ", "in", " ", "the", " ", "summary", " ",
     "boxes", " ", "placed", " ", "within", " ", "each", " ", "plot"}], " ", 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"bstats", "[", "lst_", "]"}], ":=", 
    RowBox[{"Return", "[", 
     RowBox[{
      RowBox[{"<|", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"count", "->", 
         RowBox[{"Length", "[", "lst", "]"}]}], "\[IndentingNewLine]", ",", 
        RowBox[{"min", "->", 
         RowBox[{"Min", "[", "lst", "]"}]}], "\[IndentingNewLine]", ",", 
        RowBox[{"mean", "->", 
         RowBox[{"Mean", "[", "lst", "]"}]}], "\[IndentingNewLine]", ",", 
        RowBox[{"median", "->", " ", 
         RowBox[{"Median", "[", "lst", "]"}]}], "\[IndentingNewLine]", ",", 
        RowBox[{"max", "->", 
         RowBox[{"Max", "[", "lst", "]"}]}], "\[IndentingNewLine]", ",", 
        RowBox[{"std", "->", 
         RowBox[{"StandardDeviation", "[", "lst", "]"}]}]}], 
       "\[IndentingNewLine]", "|>"}], "//", "Dataset"}], "]"}]}], ";"}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Time", " ", "increment", " ", "strings", " ", "for", " ", "selection"}], 
   " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ly", "[", "str_", "]"}], ":=", 
   RowBox[{"Switch", "[", 
    RowBox[{
    "str", ",", "\"\<Day\>\"", ",", "\"\<Daily\>\"", ",", "\"\<Week\>\"", 
     ",", "\"\<Weekly\>\"", ",", "\"\<Month\>\"", ",", "\"\<Monthly\>\"", 
     ",", "\"\<Year\>\"", ",", "\"\<Yearly\>\""}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ticks2", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{"#", ",", 
       RowBox[{"PercentForm", "[", 
        RowBox[{"Quantity", "[", 
         RowBox[{
          RowBox[{"100", " ", "#"}], ",", "\"\<Percent\>\""}], "]"}], "]"}]}],
       "}"}], "&"}], "/@", 
    RowBox[{"Range", "[", 
     RowBox[{
      RowBox[{"-", "1"}], ",", "1", ",", 
      RowBox[{"1", "/", "10"}]}], "]"}]}]}], ";"}]}], "Input",
 CellOpen->False,
 CellChangeTimes->{{3.8177712771187572`*^9, 3.817771354507091*^9}, {
   3.8177713929562473`*^9, 3.817771421842383*^9}, {3.81777234032673*^9, 
   3.817772365921872*^9}, {3.817772900122843*^9, 3.817772901627557*^9}, {
   3.817772967416851*^9, 3.817772970984816*^9}, {3.817774358515341*^9, 
   3.8177743595448027`*^9}, 3.821802077208342*^9, {3.821802118436161*^9, 
   3.821802120410658*^9}, {3.82180324238376*^9, 3.821803278453909*^9}, {
   3.927054799207635*^9, 3.927054858146652*^9}, 3.927054942536396*^9, {
   3.927055190180209*^9, 3.9270551960366983`*^9}, {3.9270552513052807`*^9, 
   3.927055269404099*^9}, {3.927055363517065*^9, 3.927055365652321*^9}, {
   3.927057277666922*^9, 3.927057328625134*^9}, {3.927057674949617*^9, 
   3.927057747245629*^9}, {3.927057780332376*^9, 3.92705779149765*^9}, 
   3.927061559021743*^9, 3.927062694740728*^9, {3.927063396491254*^9, 
   3.927063397375469*^9}, {3.927066618866694*^9, 3.927066631763128*^9}, {
   3.930773109729363*^9, 3.930773190049923*^9}, {3.93077336157609*^9, 
   3.9307733926136627`*^9}, {3.930776446298995*^9, 3.930776461924596*^9}, {
   3.93077658236301*^9, 3.93077659485312*^9}, {3.930778312654232*^9, 
   3.930778323771391*^9}, {3.930778358159801*^9, 3.930778370578583*^9}, {
   3.930778424845128*^9, 3.930778428022979*^9}, {3.9464685601417103`*^9, 
   3.9464686307565603`*^9}, {3.949946444621788*^9, 3.949946628473647*^9}, {
   3.9499467098534727`*^9, 3.9499467764283133`*^9}, {3.9499472411967287`*^9, 
   3.9499472588539143`*^9}, {3.950475775641748*^9, 3.9504757865508537`*^9}, 
   3.950477104847649*^9, 3.950479479916936*^9, {3.950735200045561*^9, 
   3.950735209161579*^9}, {3.953064338873884*^9, 3.95306438133858*^9}, 
   3.953064600039442*^9, {3.953064987565001*^9, 3.953064988937965*^9}, {
   3.9530651199757957`*^9, 3.953065120414742*^9}, {3.953065301482101*^9, 
   3.953065314167074*^9}, {3.953065345130644*^9, 3.9530653467559233`*^9}, {
   3.953065418741219*^9, 3.95306544503125*^9}, {3.953126136533811*^9, 
   3.953126176322988*^9}, {3.9531262190876017`*^9, 3.953126252248312*^9}, {
   3.9531267514510117`*^9, 3.953126756395422*^9}, 3.9531268925827417`*^9, {
   3.9531270650823717`*^9, 3.95312706549288*^9}},
 CellLabel->
  "In[389]:=",ExpressionUUID->"7ba4890e-baff-4440-b611-c0ef85b503a5"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"Here", " ", "we", " ", "fetch", " ", "the", " ", "data"}], ",", 
    " ", 
    RowBox[{
    "and", " ", "normalize", " ", "it", " ", "from", " ", "a", " ", "Dataset",
      " ", "to", " ", "a", " ", "plain", " ", "list"}]}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"btcDataFull", " ", "=", " ", 
     RowBox[{
      RowBox[{"FinancialData", "[", 
       RowBox[{"\"\<BTC/USD\>\"", ",", " ", 
        RowBox[{"settings", "[", "origindate", "]"}]}], "]"}], "//", 
      "Normal"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "How", " ", "many", " ", "days", " ", "data", " ", "have", " ", "we", " ", 
     RowBox[{"got", "?"}]}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"days", " ", "=", " ", 
     RowBox[{"btcDataFull", "//", "Length"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "How", " ", "much", " ", "of", " ", "the", " ", "list", " ", "do", " ", 
     "we", " ", "take", " ", "for", " ", 
     RowBox[{"display", "?"}]}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"takes", "=", 
     RowBox[{
      RowBox[{"MapIndexed", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"#1", "->", 
          RowBox[{"Style", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"ToString", "[", 
              RowBox[{"First", "[", "#2", "]"}], "]"}], "<>", 
             " ", "\"\< yr\>\""}], ",", "16"}], "]"}]}], "&"}], 
        "\[IndentingNewLine]", ",", 
        RowBox[{"Join", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Range", "[", 
           RowBox[{"365", ",", "days", ",", "365"}], "]"}], 
          "\[IndentingNewLine]", ",", 
          RowBox[{"{", "days", "}"}]}], "\[IndentingNewLine]", "]"}]}], 
       "\[IndentingNewLine]", "]"}], "//", "ReverseSort"}]}], 
    ";"}]}]}]], "Input",
 CellOpen->False,
 CellChangeTimes->{
  3.930773388145524*^9, {3.930773444754338*^9, 3.930773445519784*^9}, {
   3.932596286662141*^9, 3.932596328014542*^9}, {3.932596363373996*^9, 
   3.932596367672576*^9}, 3.933099040149756*^9, {3.933100284894334*^9, 
   3.9331002977591*^9}, {3.949946782809309*^9, 3.949946875593206*^9}, {
   3.949946936281502*^9, 3.949946966519264*^9}, 3.9499472739002457`*^9, {
   3.953126185853492*^9, 3.9531261957797213`*^9}},
 CellLabel->
  "In[394]:=",ExpressionUUID->"c3aff205-d97a-4203-8afb-492c50dd5de2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"The", " ", "real", " ", "fun", " ", "begins", " ", "here"}], " ", 
   "*)"}], "\[IndentingNewLine]", 
  RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Module", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", "filename", "}"}], "\[IndentingNewLine]", ",", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "insetscale", " ", "places", " ", "some", " ", "of", " ", "the", " ", 
        "inset", " ", "stat", " ", "boxes", " ", "horizontally"}], " ", 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"insetscale", "=", 
        RowBox[{"{", 
         RowBox[{".07", ",", ".875"}], "}"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"intervally", "=", 
        RowBox[{"ly", "[", "interval", "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"btcData", "=", 
        RowBox[{"TimeSeriesAggregate", "[", 
         RowBox[{
          RowBox[{"Take", "[", 
           RowBox[{"btcDataFull", ",", 
            RowBox[{"-", "since"}]}], "]"}], ",", "interval", ",", "Last"}], 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"labelstyle", "=", 
        RowBox[{"{", "18", "}"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"updatedstr", "=", 
        RowBox[{"Style", "[", 
         RowBox[{
          RowBox[{"StringForm", "[", 
           RowBox[{"\"\<(updated: ``)\>\"", " ", ",", " ", 
            RowBox[{"DateString", "[", "]"}]}], "]"}], ",", "15"}], "]"}]}], ";",
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
        "A", " ", "B", " ", "S", " ", "O", " ", "L", " ", "U", " ", "T", " ", 
         "E", "   ", "C", " ", "H", " ", "A", " ", "N", " ", "G", " ", "E", " ",
          "S"}], " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"absolutechanges", " ", "=", " ", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Last", "[", 
            RowBox[{"btcData", "[", 
             RowBox[{"[", "n", "]"}], "]"}], "]"}], "-", 
           RowBox[{"Last", "[", 
            RowBox[{"btcData", "[", 
             RowBox[{"[", 
              RowBox[{"n", "-", "1"}], "]"}], "]"}], "]"}]}], ",", 
          RowBox[{"{", 
           RowBox[{"n", ",", "2", ",", " ", 
            RowBox[{"Length", "@", "btcData"}]}], "}"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"tsabsolutechanges", "=", " ", 
        RowBox[{"TimeSeries", "[", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"First", "[", 
              RowBox[{"btcData", "[", 
               RowBox[{"[", "n", "]"}], "]"}], "]"}], ",", 
             RowBox[{
              RowBox[{"Last", "[", 
               RowBox[{"btcData", "[", 
                RowBox[{"[", "n", "]"}], "]"}], "]"}], "-", 
              RowBox[{"Last", "[", 
               RowBox[{"btcData", "[", 
                RowBox[{"[", 
                 RowBox[{"n", "-", "1"}], "]"}], "]"}], "]"}]}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"n", ",", "2", ",", " ", 
             RowBox[{"Length", "@", "btcData"}]}], "}"}]}], "]"}], "]"}]}], ";",
        "\[IndentingNewLine]", 
       RowBox[{"dlpabsolute", "=", 
        RowBox[{"DateListPlot", "[", "\[IndentingNewLine]", 
         RowBox[{"tsabsolutechanges", "\[IndentingNewLine]", ",", 
          RowBox[{"PlotLabel", "->", 
           RowBox[{"Column", "[", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"{", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Style", "[", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"StringForm", "[", 
                  
                  RowBox[{"\"\<Absolute `` Price Changes (USD)\>\"", ",", 
                   "intervally"}], "]"}], "\[IndentingNewLine]", ",", 
                 RowBox[{"settings", "[", "titlestyle", "]"}]}], 
                "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
               RowBox[{"StringForm", "[", "\[IndentingNewLine]", 
                RowBox[{"\"\<`` ``s\>\"", "\[IndentingNewLine]", ",", 
                 RowBox[{"Length", "[", 
                  RowBox[{"tsabsolutechanges", "[", "\"\<Values\>\"", "]"}], 
                  "]"}], "\[IndentingNewLine]", ",", "interval"}], 
                "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
               "updatedstr"}], "\[IndentingNewLine]", "}"}], 
             "\[IndentingNewLine]", ",", "Center"}], "\[IndentingNewLine]", 
            "]"}]}], "\[IndentingNewLine]", ",", 
          RowBox[{"ImageSize", "->", 
           RowBox[{"settings", "[", "imagesize", "]"}]}], 
          "\[IndentingNewLine]", ",", 
          RowBox[{"ImageMargins", "->", 
           RowBox[{"settings", "[", "imagemargins", "]"}]}], 
          "\[IndentingNewLine]", ",", 
          RowBox[{"PlotRange", "->", "Full"}], "\[IndentingNewLine]", ",", 
          RowBox[{"FrameTicks", "->", "All"}], "\[IndentingNewLine]", ",", 
          RowBox[{"TicksStyle", "->", 
           RowBox[{"settings", "[", "ticksstyle", "]"}]}], 
          "\[IndentingNewLine]", ",", " ", 
          RowBox[{"GridLines", "->", 
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Join", "[", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"interval", " ", "==", "\"\<Day\>\""}], 
                 "\[IndentingNewLine]", ",", 
                 RowBox[{"DateRange", "[", 
                  RowBox[{
                   RowBox[{"{", "2010", "}"}], ",", 
                   RowBox[{"{", "2030", "}"}], ",", 
                   RowBox[{"Quantity", "[", 
                    RowBox[{"1", ",", "\"\<Months\>\""}], "]"}]}], "]"}], 
                 "\[IndentingNewLine]", ",", 
                 RowBox[{"DateRange", "[", 
                  RowBox[{
                   RowBox[{"{", "2010", "}"}], ",", 
                   RowBox[{"{", "2030", "}"}], ",", 
                   RowBox[{"Quantity", "[", 
                    RowBox[{"1", ",", "\"\<Quarters\>\""}], "]"}]}], "]"}]}], 
                "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
               RowBox[{
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"#", ",", "Thick"}], "}"}], "&"}], "/@", 
                RowBox[{"DateRange", "[", 
                 RowBox[{
                  RowBox[{"{", "2010", "}"}], ",", 
                  RowBox[{"{", "2030", "}"}], ",", 
                  RowBox[{"Quantity", "[", 
                   RowBox[{"1", ",", "\"\<Years\>\""}], "]"}]}], "]"}]}]}], 
              "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
             RowBox[{"Join", "[", 
              RowBox[{
               RowBox[{"Range", "[", 
                RowBox[{
                 RowBox[{"-", "50000"}], ",", "50000", ",", "1000"}], "]"}], ",", 
               RowBox[{
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"#", ",", "Thick"}], "}"}], "&"}], "/@", " ", 
                RowBox[{"Range", "[", 
                 RowBox[{
                  RowBox[{"-", "50000"}], ",", "50000", ",", "5000"}], 
                 "]"}]}]}], "]"}]}], "}"}]}], "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{",", 
            RowBox[{"GridLines", "->", "Automatic"}]}], "*)"}], 
          "\[IndentingNewLine]", ",", " ", 
          RowBox[{"Joined", "->", "False"}], "\[IndentingNewLine]", ",", 
          RowBox[{"FrameLabel", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"HoldForm", "[", 
                RowBox[{"US", " ", "Dollars"}], "]"}], ",", "None"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"None", ",", "None"}], "}"}]}], "}"}]}], 
          "\[IndentingNewLine]", ",", 
          RowBox[{"LabelStyle", "->", 
           RowBox[{"settings", "[", "labelstyle", "]"}]}], 
          "\[IndentingNewLine]", ",", 
          RowBox[{"Background", "->", 
           RowBox[{"settings", "[", "plotbackground", "]"}]}], 
          "\[IndentingNewLine]", ",", 
          RowBox[{"Epilog", "->", "\[IndentingNewLine]", 
           RowBox[{"Inset", "[", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Framed", "[", 
              RowBox[{"bstats", "[", "absolutechanges", "]"}], "]"}], 
             "\[IndentingNewLine]", ",", 
             RowBox[{"Scaled", "[", "insetscale", "]"}], 
             "\[IndentingNewLine]", ",", 
             RowBox[{"Background", "->", "White"}]}], "\[IndentingNewLine]", 
            "]"}]}]}], "\[IndentingNewLine]", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"filename", " ", "=", " ", 
        RowBox[{
         RowBox[{"StringForm", "[", 
          
          RowBox[{"\"\<BTC-USD-Movements-Absolute-``.jpg\>\"", ",", 
           "intervally"}], "]"}], "//", "ToString"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Export", "[", 
        RowBox[{"filename", ",", " ", "dlpabsolute"}], "]"}], ";", "\n", 
       RowBox[{"rankabs", "=", 
        RowBox[{"SortBy", "[", 
         RowBox[{
          RowBox[{"tsabsolutechanges", "//", "Normal"}], ",", "Last"}], 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"worstabs", "=", 
        RowBox[{
         RowBox[{"Take", "[", 
          RowBox[{"rankabs", ",", 
           RowBox[{"Min", "[", 
            RowBox[{"100", ",", 
             RowBox[{"Length", "[", "rankabs", "]"}]}], "]"}]}], "]"}], "//", 
         "Dataset"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"bestabs", "=", 
        RowBox[{
         RowBox[{"ReverseSortBy", "[", 
          RowBox[{
           RowBox[{"Take", "[", 
            RowBox[{"rankabs", ",", 
             RowBox[{"Max", "[", 
              RowBox[{
               RowBox[{"-", "100"}], ",", 
               RowBox[{"-", 
                RowBox[{"Length", "[", "rankabs", "]"}]}]}], "]"}]}], "]"}], ",", 
           RowBox[{
            RowBox[{"#", "[", 
             RowBox[{"[", "2", "]"}], "]"}], "&"}]}], "]"}], "//", 
         "Dataset"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"worstandbestabs", "=", 
        RowBox[{"Column", "[", 
         RowBox[{
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Style", "[", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"StringForm", "[", 
               
               RowBox[{"\"\<Worst and Best ``s (Absolute Dollars)\>\"", ",", 
                " ", "interval"}], "]"}], "\[IndentingNewLine]", ",", 
              RowBox[{"settings", "[", "titlestyle", "]"}]}], 
             "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
            "updatedstr", "\[IndentingNewLine]", ",", 
            RowBox[{"Row", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"worstabs", ",", "bestabs"}], "}"}], 
              "\[IndentingNewLine]", ",", 
              RowBox[{"ImageSize", "->", "600"}], "\[IndentingNewLine]", ",", 
              " ", 
              RowBox[{"Alignment", "->", "Center"}]}], "\[IndentingNewLine]", 
             "]"}]}], "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", ",", 
          RowBox[{"Alignment", "->", "Center"}], "\[IndentingNewLine]", ",", 
          " ", 
          RowBox[{"Frame", "->", "True"}]}], "\[IndentingNewLine]", "]"}]}], ";",
        "\n", 
       RowBox[{"filename", " ", "=", " ", 
        RowBox[{
         RowBox[{"StringForm", "[", 
          
          RowBox[{"\"\<BTC-USD-Movements-Best-Worst-Absolute-``.jpg\>\"", ",",
            "intervally"}], "]"}], "//", "ToString"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Export", "[", 
        RowBox[{"filename", ",", "worstandbestabs"}], "]"}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
        "R", " ", "E", " ", "L", " ", "A", " ", "T", " ", "I", " ", "V", " ", 
         "E", "   ", "C", " ", "H", " ", "A", " ", "N", " ", "G", " ", "E", " ",
          "S"}], " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"relativechanges", " ", "=", " ", 
        RowBox[{"Table", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"First", "[", 
             RowBox[{"btcData", "[", 
              RowBox[{"[", "n", "]"}], "]"}], "]"}], ",", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"Last", "[", 
                RowBox[{"btcData", "[", 
                 RowBox[{"[", "n", "]"}], "]"}], "]"}], "-", 
               RowBox[{"Last", "[", 
                RowBox[{"btcData", "[", 
                 RowBox[{"[", 
                  RowBox[{"n", "-", "1"}], "]"}], "]"}], "]"}]}], ")"}], "/", 
             
             RowBox[{"(", 
              RowBox[{"Mean", "[", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"Last", "[", 
                  RowBox[{"btcData", "[", 
                   RowBox[{"[", "n", "]"}], "]"}], "]"}], ",", 
                 RowBox[{"Last", "[", 
                  RowBox[{"btcData", "[", 
                   RowBox[{"[", 
                    RowBox[{"n", "-", "1"}], "]"}], "]"}], "]"}]}], "}"}], 
               "]"}], ")"}]}]}], "\[IndentingNewLine]", "}"}], 
          "\[IndentingNewLine]", ",", 
          RowBox[{"{", 
           RowBox[{"n", ",", "2", ",", " ", 
            RowBox[{"Length", "@", "btcData"}]}], "}"}]}], 
         "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"tsrelativechanges", " ", "=", " ", 
        RowBox[{"TimeSeries", "[", "relativechanges", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"dlprelative", "=", 
        RowBox[{"DateListPlot", "[", "\[IndentingNewLine]", 
         RowBox[{"tsrelativechanges", "\[IndentingNewLine]", ",", 
          RowBox[{"PlotLabel", "->", 
           RowBox[{"Column", "[", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"{", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Style", "[", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"StringForm", "[", 
                  RowBox[{"\"\<Relative `` Changes\>\"", ",", "intervally"}], 
                  "]"}], "\[IndentingNewLine]", ",", 
                 RowBox[{"settings", "[", "titlestyle", "]"}]}], 
                "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
               RowBox[{"StringForm", "[", "\[IndentingNewLine]", 
                RowBox[{"\"\<`` ``s\>\"", "\[IndentingNewLine]", ",", 
                 RowBox[{"Length", "[", 
                  RowBox[{"tsrelativechanges", "[", "\"\<Values\>\"", "]"}], 
                  "]"}], "\[IndentingNewLine]", ",", "interval"}], 
                "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
               "updatedstr"}], "\[IndentingNewLine]", "}"}], 
             "\[IndentingNewLine]", ",", "Center"}], "\[IndentingNewLine]", 
            "]"}]}], "\[IndentingNewLine]", ",", 
          RowBox[{"PlotRange", "->", "All"}], "\[IndentingNewLine]", ",", 
          RowBox[{"GridLines", "->", 
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Join", "[", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"interval", " ", "==", "\"\<Day\>\""}], 
                 "\[IndentingNewLine]", ",", 
                 RowBox[{"DateRange", "[", 
                  RowBox[{
                   RowBox[{"{", "2010", "}"}], ",", 
                   RowBox[{"{", "2030", "}"}], ",", 
                   RowBox[{"Quantity", "[", 
                    RowBox[{"1", ",", "\"\<Months\>\""}], "]"}]}], "]"}], 
                 "\[IndentingNewLine]", ",", 
                 RowBox[{"DateRange", "[", 
                  RowBox[{
                   RowBox[{"{", "2010", "}"}], ",", 
                   RowBox[{"{", "2030", "}"}], ",", 
                   RowBox[{"Quantity", "[", 
                    RowBox[{"1", ",", "\"\<Quarters\>\""}], "]"}]}], "]"}]}], 
                "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
               RowBox[{
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"#", ",", "Thick"}], "}"}], "&"}], "/@", 
                RowBox[{"DateRange", "[", 
                 RowBox[{
                  RowBox[{"{", "2010", "}"}], ",", 
                  RowBox[{"{", "2030", "}"}], ",", 
                  RowBox[{"Quantity", "[", 
                   RowBox[{"1", ",", "\"\<Years\>\""}], "]"}]}], "]"}]}]}], 
              "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
             RowBox[{"Range", "[", 
              RowBox[{
               RowBox[{"-", "1"}], ",", "1", ",", 
               RowBox[{"1", "/", "10"}]}], "]"}]}], "\[IndentingNewLine]", 
            "}"}]}], "\[IndentingNewLine]", ",", 
          RowBox[{"FrameTicks", "->", 
           RowBox[{"{", 
            RowBox[{"All", ",", 
             RowBox[{
              RowBox[{
               RowBox[{"{", 
                RowBox[{"#", ",", 
                 RowBox[{"PercentForm", "[", "#", "]"}]}], "}"}], "&"}], "/@", 
              RowBox[{"Join", "[", 
               RowBox[{
                RowBox[{"Range", "[", 
                 RowBox[{
                  RowBox[{"-", "1"}], ",", 
                  RowBox[{"-", "0.1"}], ",", "0.1"}], "]"}], ",", 
                RowBox[{"{", "0", "}"}], ",", 
                RowBox[{"Range", "[", 
                 RowBox[{"0.1", ",", "1", ",", "0.1"}], "]"}]}], "]"}]}]}], 
            "}"}]}], "\[IndentingNewLine]", ",", 
          RowBox[{"TicksStyle", "->", 
           RowBox[{"settings", "[", "ticksstyle", "]"}]}], 
          "\[IndentingNewLine]", ",", 
          RowBox[{"Joined", "->", "False"}], "\[IndentingNewLine]", ",", 
          RowBox[{"PlotMarkers", "\[Rule]", 
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{"Automatic", "\[IndentingNewLine]", ",", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"interval", " ", "==", "\"\<Day\>\""}], 
               "\[IndentingNewLine]", ",", 
               RowBox[{"Scaled", "[", "0.005", "]"}], "\[IndentingNewLine]", ",", 
               RowBox[{"Scaled", "[", "0.010", "]"}]}], "\[IndentingNewLine]",
               "]"}]}], "\[IndentingNewLine]", "}"}]}], "\[IndentingNewLine]",
           ",", 
          RowBox[{"Filling", "->", "Axis"}], "\[IndentingNewLine]", ",", 
          RowBox[{"FillingStyle", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{"Red", ",", " ", "Green"}], "}"}]}], 
          "\[IndentingNewLine]", ",", 
          RowBox[{"Background", "\[Rule]", 
           RowBox[{"settings", "[", "plotbackground", "]"}]}], 
          "\[IndentingNewLine]", ",", 
          RowBox[{"ImageSize", "->", 
           RowBox[{"settings", "[", "imagesize", "]"}]}], 
          "\[IndentingNewLine]", ",", 
          RowBox[{"LabelStyle", "->", " ", 
           RowBox[{"settings", "[", "labelstyle", "]"}]}], 
          "\[IndentingNewLine]", ",", 
          RowBox[{"ImageMargins", "->", 
           RowBox[{"settings", "[", "imagemargins", "]"}]}], 
          "\[IndentingNewLine]", ",", 
          RowBox[{"Epilog", "->", "\[IndentingNewLine]", 
           RowBox[{"Inset", "[", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Framed", "[", 
              RowBox[{"bstats", "[", 
               RowBox[{"tsrelativechanges", "[", "\"\<Values\>\"", "]"}], 
               "]"}], "]"}], "\[IndentingNewLine]", ",", 
             RowBox[{"Scaled", "[", "insetscale", "]"}], 
             "\[IndentingNewLine]", ",", 
             RowBox[{"Background", "->", "White"}]}], "\[IndentingNewLine]", 
            "]"}]}]}], "\[IndentingNewLine]", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"filename", " ", "=", " ", 
        RowBox[{
         RowBox[{"StringForm", "[", 
          
          RowBox[{"\"\<BTC-USD-Movements-Relative-``.jpg\>\"", ",", 
           "intervally"}], "]"}], "//", "ToString"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Export", "[", 
        RowBox[{"filename", ",", " ", "dlprelative"}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"rankrel", "=", 
        RowBox[{"SortBy", "[", 
         RowBox[{
          RowBox[{"tsrelativechanges", "//", "Normal"}], ",", "Last"}], 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"worstrel", "=", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"#", "[", 
              RowBox[{"[", "1", "]"}], "]"}], ",", 
             RowBox[{
              RowBox[{"#", "[", 
               RowBox[{"[", "2", "]"}], "]"}], "//", "PercentForm"}]}], "}"}],
            "&"}], "/@", 
          RowBox[{"Take", "[", 
           RowBox[{"rankrel", ",", 
            RowBox[{"Min", "[", 
             RowBox[{"100", ",", 
              RowBox[{"Length", "[", "rankrel", "]"}]}], "]"}]}], "]"}]}], "//",
          "Dataset"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"bestrel", "=", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"#", "[", 
               RowBox[{"[", "1", "]"}], "]"}], ",", 
              RowBox[{
               RowBox[{"#", "[", 
                RowBox[{"[", "2", "]"}], "]"}], "//", "PercentForm"}]}], 
             "}"}], "&"}], "/@", 
           RowBox[{"ReverseSortBy", "[", 
            RowBox[{
             RowBox[{"Take", "[", 
              RowBox[{"rankrel", ",", 
               RowBox[{"Max", "[", 
                RowBox[{
                 RowBox[{"-", "100"}], ",", 
                 RowBox[{"-", 
                  RowBox[{"Length", "[", "rankrel", "]"}]}]}], "]"}]}], "]"}],
              ",", 
             RowBox[{
              RowBox[{"#", "[", 
               RowBox[{"[", "2", "]"}], "]"}], "&"}]}], "]"}]}], ")"}], "//", 
         "Dataset"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"worstandbestrel", "=", 
        RowBox[{"Column", "[", 
         RowBox[{
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Style", "[", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"StringForm", "[", 
               
               RowBox[{"\"\<Worst and Best ``s (Relative)\>\"", ",", " ", 
                "interval"}], "]"}], "\[IndentingNewLine]", ",", 
              RowBox[{"settings", "[", "titlestyle", "]"}]}], 
             "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
            "updatedstr", "\[IndentingNewLine]", ",", 
            RowBox[{"Row", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"worstrel", ",", "bestrel"}], "}"}], 
              "\[IndentingNewLine]", ",", 
              RowBox[{"ImageSize", "->", "600"}], "\[IndentingNewLine]", ",", 
              " ", 
              RowBox[{"Alignment", "->", "Center"}]}], "\[IndentingNewLine]", 
             "]"}]}], "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", ",", 
          RowBox[{"Alignment", "->", "Center"}], "\[IndentingNewLine]", ",", 
          " ", 
          RowBox[{"Frame", "->", "True"}]}], "\[IndentingNewLine]", "]"}]}], ";",
        "\[IndentingNewLine]", 
       RowBox[{"filename", " ", "=", " ", 
        RowBox[{
         RowBox[{"StringForm", "[", 
          
          RowBox[{"\"\<BTC-USD-Movements-Best-Worst-Relative-``.jpg\>\"", ",",
            "intervally"}], "]"}], "//", "ToString"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Export", "[", 
        RowBox[{"filename", ",", "worstandbestrel"}], "]"}], ";", "\n", 
       RowBox[{"positives", "=", 
        RowBox[{"Select", "[", 
         RowBox[{
          RowBox[{"tsrelativechanges", "[", "\"\<Values\>\"", "]"}], ",", 
          RowBox[{
           RowBox[{"#", ">", "0"}], "&"}]}], " ", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"negatives", "=", 
        RowBox[{"Select", "[", 
         RowBox[{
          RowBox[{"tsrelativechanges", "[", "\"\<Values\>\"", "]"}], ",", 
          RowBox[{
           RowBox[{"#", "<", "0"}], "&"}]}], " ", "]"}]}], ";", "\n", 
       RowBox[{"mhistpositive", "=", 
        RowBox[{"Histogram", "[", "\[IndentingNewLine]", 
         RowBox[{
         "positives", "\[IndentingNewLine]", ",", "25", "\[IndentingNewLine]",
           ",", 
          RowBox[{"PlotLabel", "->", 
           RowBox[{"Column", "[", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"{", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Style", "[", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"StringForm", "[", 
                  
                  RowBox[{"\"\<Relative `` Positive Price Movements\>\"", ",",
                    "intervally"}], "]"}], "\[IndentingNewLine]", ",", 
                 RowBox[{"settings", "[", "titlestyle", "]"}]}], 
                "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
               RowBox[{"StringForm", "[", "\[IndentingNewLine]", 
                RowBox[{"\"\<`` of `` ``s\>\"", "\[IndentingNewLine]", ",", 
                 RowBox[{"Length", "[", "positives", "]"}], 
                 "\[IndentingNewLine]", ",", 
                 RowBox[{
                  RowBox[{"Length", "[", "positives", "]"}], " ", "+", 
                  RowBox[{"Length", "[", " ", "negatives", "]"}]}], 
                 "\[IndentingNewLine]", ",", "interval"}], 
                "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
               "updatedstr"}], "\[IndentingNewLine]", "}"}], 
             "\[IndentingNewLine]", ",", "Center"}], "\[IndentingNewLine]", 
            "]"}]}], "\[IndentingNewLine]", ",", 
          RowBox[{"LabelStyle", "->", 
           RowBox[{"settings", "[", "labelstyle", "]"}]}], 
          "\[IndentingNewLine]", ",", 
          RowBox[{"PlotRange", "->", "Full"}], "\[IndentingNewLine]", ",", 
          RowBox[{"ImageSize", "->", 
           RowBox[{"settings", "[", "imagesize", "]"}]}], 
          "\[IndentingNewLine]", ",", 
          RowBox[{"ImageMargins", "->", 
           RowBox[{"settings", "[", "imagemargins", "]"}]}], 
          "\[IndentingNewLine]", ",", 
          RowBox[{"GridLines", "->", "Automatic"}], "\[IndentingNewLine]", ",", 
          RowBox[{"Ticks", "->", 
           RowBox[{"{", 
            RowBox[{"ticks2", ",", " ", "Automatic"}], "}"}]}], 
          "\[IndentingNewLine]", ",", 
          RowBox[{"FrameTicks", "->", "All"}], "\[IndentingNewLine]", ",", 
          RowBox[{"ChartStyle", "->", "Green"}], "\[IndentingNewLine]", ",", 
          RowBox[{"LabelingFunction", "\[Rule]", "Above"}], 
          "\[IndentingNewLine]", ",", 
          RowBox[{"Background", "->", 
           RowBox[{"settings", "[", "plotbackground", "]"}]}], 
          "\[IndentingNewLine]", ",", 
          RowBox[{"Epilog", "->", 
           RowBox[{"Inset", "[", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Framed", "[", 
              RowBox[{"bstats", "[", "positives", "]"}], "]"}], 
             "\[IndentingNewLine]", ",", 
             RowBox[{"Scaled", "[", 
              RowBox[{"{", 
               RowBox[{".50", ",", ".85"}], "}"}], "]"}], 
             "\[IndentingNewLine]", ",", 
             RowBox[{"Background", "->", "White"}]}], "\[IndentingNewLine]", 
            "]"}]}]}], "\[IndentingNewLine]", "]"}]}], ";", "\n", 
       RowBox[{"mhistnegative", "=", 
        RowBox[{"Histogram", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"{", "negatives", "}"}], "\[IndentingNewLine]", ",", "50", 
          "\[IndentingNewLine]", ",", 
          RowBox[{"PlotLabel", "->", 
           RowBox[{"Column", "[", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"{", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Style", "[", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"StringForm", "[", 
                  
                  RowBox[{"\"\<Relative `` Negative Price Movements\>\"", ",",
                    "intervally"}], "]"}], "\[IndentingNewLine]", ",", 
                 RowBox[{"settings", "[", "titlestyle", "]"}]}], 
                "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
               RowBox[{"StringForm", "[", "\[IndentingNewLine]", 
                RowBox[{"\"\<`` of `` ``s\>\"", "\[IndentingNewLine]", ",", 
                 RowBox[{"Length", "[", "negatives", "]"}], 
                 "\[IndentingNewLine]", ",", 
                 RowBox[{
                  RowBox[{"Length", "[", "positives", "]"}], " ", "+", 
                  RowBox[{"Length", "[", " ", "negatives", "]"}]}], 
                 "\[IndentingNewLine]", ",", "interval"}], 
                "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
               "updatedstr"}], "\[IndentingNewLine]", "}"}], 
             "\[IndentingNewLine]", ",", "Center"}], "\[IndentingNewLine]", 
            "]"}]}], "\[IndentingNewLine]", ",", 
          RowBox[{"LabelStyle", "->", 
           RowBox[{"settings", "[", "labelstyle", "]"}]}], 
          "\[IndentingNewLine]", ",", 
          RowBox[{"PlotRange", "->", "Full"}], "\[IndentingNewLine]", ",", 
          RowBox[{"ImageSize", "->", 
           RowBox[{"settings", "[", "imagesize", "]"}]}], 
          "\[IndentingNewLine]", ",", 
          RowBox[{"ImageMargins", "->", 
           RowBox[{"settings", "[", "imagemargins", "]"}]}], 
          "\[IndentingNewLine]", ",", 
          RowBox[{"GridLines", "->", "Automatic"}], "\[IndentingNewLine]", ",", 
          RowBox[{"Ticks", "->", 
           RowBox[{"{", 
            RowBox[{"ticks2", ",", " ", "Automatic"}], "}"}]}], 
          "\[IndentingNewLine]", ",", 
          RowBox[{"FrameTicks", "->", "All"}], "\[IndentingNewLine]", ",", 
          RowBox[{"ChartStyle", "->", "Red"}], "\[IndentingNewLine]", ",", 
          RowBox[{"LabelingFunction", "\[Rule]", "Above"}], 
          "\[IndentingNewLine]", ",", 
          RowBox[{"LabelingFunction", "\[Rule]", "Above"}], 
          "\[IndentingNewLine]", ",", 
          RowBox[{"Background", "->", 
           RowBox[{"settings", "[", "plotbackground", "]"}]}], 
          "\[IndentingNewLine]", ",", 
          RowBox[{"Epilog", "->", 
           RowBox[{"Inset", "[", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Framed", "[", 
              RowBox[{"bstats", "[", "negatives", "]"}], "]"}], 
             "\[IndentingNewLine]", ",", 
             RowBox[{"Scaled", "[", 
              RowBox[{"{", 
               RowBox[{".50", ",", ".85"}], "}"}], "]"}], 
             "\[IndentingNewLine]", ",", 
             RowBox[{"Background", "->", "White"}]}], "\[IndentingNewLine]", 
            "]"}]}]}], "\[IndentingNewLine]", "]"}]}], ";", "\n", 
       RowBox[{"mhistcombined", "=", 
        RowBox[{"Manipulate", "[", "\n", 
         RowBox[{
          RowBox[{"Histogram", "[", 
           RowBox[{
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{"positives", ",", "negatives"}], "}"}], 
            "\[IndentingNewLine]", ",", "x", "\[IndentingNewLine]", ",", 
            RowBox[{"PlotLabel", "->", 
             RowBox[{"Column", "[", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"{", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"Style", "[", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"StringForm", "[", 
                    
                    RowBox[{"\"\<Relative `` Movements\>\"", ",", 
                    "intervally"}], "]"}], "\[IndentingNewLine]", ",", 
                   RowBox[{"settings", "[", "titlestyle", "]"}]}], 
                  "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
                 RowBox[{"StringForm", "[", "\[IndentingNewLine]", 
                  RowBox[{"\"\<`` ``s\>\"", "\[IndentingNewLine]", ",", 
                   RowBox[{
                    RowBox[{"Length", "[", "positives", "]"}], " ", "+", 
                    RowBox[{"Length", "[", " ", "negatives", "]"}]}], 
                   "\[IndentingNewLine]", ",", "interval"}], 
                  "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
                 "updatedstr"}], "\[IndentingNewLine]", "}"}], 
               "\[IndentingNewLine]", ",", "Center"}], "\[IndentingNewLine]", 
              "]"}]}], "\[IndentingNewLine]", ",", 
            RowBox[{"LabelStyle", "->", 
             RowBox[{"settings", "[", "labelstyle", "]"}]}], 
            "\[IndentingNewLine]", ",", 
            RowBox[{"PlotRange", "->", "Full"}], "\[IndentingNewLine]", ",", 
            RowBox[{"ImageSize", "->", 
             RowBox[{"settings", "[", "imagesize", "]"}]}], 
            "\[IndentingNewLine]", ",", 
            RowBox[{"ImageMargins", "->", 
             RowBox[{"settings", "[", "imagemargins", "]"}]}], 
            "\[IndentingNewLine]", ",", 
            RowBox[{"GridLines", "->", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Range", "[", 
                RowBox[{
                 RowBox[{"-", "1"}], ",", "1", ",", 
                 RowBox[{"1", "/", "10"}]}], "]"}], ",", "Automatic"}], 
              "}"}]}], "\[IndentingNewLine]", 
            RowBox[{"(*", 
             RowBox[{",", 
              RowBox[{"Ticks", "->", 
               RowBox[{"{", 
                RowBox[{"ticks2", ",", " ", "Automatic"}], "}"}]}]}], "*)"}], 
            "\[IndentingNewLine]", ",", 
            RowBox[{"FrameTicks", "->", "All"}], "\[IndentingNewLine]", ",", 
            RowBox[{"ChartStyle", "->", 
             RowBox[{"{", 
              RowBox[{"Green", ",", " ", "Red"}], "}"}]}], 
            "\[IndentingNewLine]", ",", 
            RowBox[{"LabelStyle", "->", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"x", ">", "75"}], ",", "labelstyle", ",", 
               RowBox[{"{", 
                RowBox[{"labelstyle", ",", 
                 RowBox[{"Directive", "[", 
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{"x", "<", "50"}], ",", "12", ",", "8"}], "]"}], 
                  "]"}]}], "}"}]}], "]"}]}], "\[IndentingNewLine]", ",", 
            RowBox[{"LabelingFunction", "\[Rule]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"x", ">", "75"}], ",", "None", ",", "Above"}], "]"}]}],
             "\[IndentingNewLine]", ",", 
            RowBox[{"Background", "->", 
             RowBox[{"settings", "[", "plotbackground", "]"}]}], 
            "\[IndentingNewLine]", ",", 
            RowBox[{"Epilog", "->", 
             RowBox[{"{", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Inset", "[", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"Framed", "[", 
                  RowBox[{"bstats", "[", 
                   RowBox[{"Join", "[", 
                    RowBox[{"positives", ",", "negatives"}], "]"}], "]"}], 
                  "]"}], "\[IndentingNewLine]", ",", 
                 RowBox[{"Scaled", "[", 
                  RowBox[{"{", 
                   RowBox[{".30", ",", ".90"}], "}"}], "]"}], 
                 "\[IndentingNewLine]", ",", 
                 RowBox[{"Background", "->", "White"}]}], 
                "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
               RowBox[{"Inset", "[", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"Framed", "[", 
                  RowBox[{"bstats", "[", "negatives", "]"}], "]"}], 
                 "\[IndentingNewLine]", ",", 
                 RowBox[{"Scaled", "[", 
                  RowBox[{"{", 
                   RowBox[{".10", ",", ".40"}], "}"}], "]"}], 
                 "\[IndentingNewLine]", ",", 
                 RowBox[{"Background", "->", "White"}]}], 
                "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
               RowBox[{"Inset", "[", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"Framed", "[", 
                  RowBox[{"bstats", "[", "positives", "]"}], "]"}], 
                 "\[IndentingNewLine]", ",", 
                 RowBox[{"Scaled", "[", 
                  RowBox[{"{", 
                   RowBox[{".90", ",", ".40"}], "}"}], "]"}], 
                 "\[IndentingNewLine]", ",", 
                 RowBox[{"Background", "->", "White"}]}], 
                "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
              "}"}]}]}], "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", 
          ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"x", ",", "50", ",", 
              RowBox[{"Style", "[", 
               RowBox[{"\"\<Bins: \>\"", ",", 
                RowBox[{"{", "15", "}"}]}], "]"}]}], "}"}], ",", 
            RowBox[{"Range", "[", 
             RowBox[{"10", ",", "200", ",", "10"}], "]"}]}], "}"}]}], 
         "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"filename", " ", "=", " ", 
        RowBox[{
         RowBox[{"StringForm", "[", 
          
          RowBox[{"\"\<BTC-USD-Movements-Histogram-Relative-``.jpg\>\"", ",", 
           "intervally"}], "]"}], "//", "ToString"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Export", "[", 
        RowBox[{"filename", ",", "mhistcombined"}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Column", "[", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Style", "[", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"StringForm", "[", 
             RowBox[{"\"\<Absolute `` Movements\>\"", ",", "intervally"}], 
             "]"}], "\[IndentingNewLine]", ",", "\"\<Section\>\""}], 
           "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
          "dlpabsolute", "\[IndentingNewLine]", ",", "worstandbestabs", 
          "\[IndentingNewLine]", ",", 
          RowBox[{"Spacer", "[", "10", "]"}], "\[IndentingNewLine]", ",", 
          RowBox[{"Style", "[", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"StringForm", "[", 
             RowBox[{"\"\<Relative `` Movements\>\"", ",", "intervally"}], 
             "]"}], "\[IndentingNewLine]", ",", "\"\<Section\>\""}], 
           "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
          "dlprelative", "\[IndentingNewLine]", ",", "worstandbestrel", 
          "\[IndentingNewLine]", ",", "mhistpositive", "\[IndentingNewLine]", 
          ",", "mhistnegative", "\[IndentingNewLine]", ",", "mhistcombined"}],
          "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", "]"}]}]}], 
     "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"interval", ",", "\"\<Day\>\""}], "}"}], "\[IndentingNewLine]",
       ",", 
      RowBox[{
       RowBox[{
        RowBox[{"#", "->", 
         RowBox[{"Style", "[", 
          RowBox[{"#", ",", "16"}], "]"}]}], "&"}], "/@", 
       RowBox[{"{", 
        RowBox[{"\"\<Day\>\"", ",", " ", "\"\<Week\>\"", 
         ",", "\"\<Month\>\""}], "}"}]}]}], "\[IndentingNewLine]", "}"}], 
    "\[IndentingNewLine]", ",", " ", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"since", ",", "days"}], "}"}], "\[IndentingNewLine]", ",", " ",
       "takes"}], "\[IndentingNewLine]", "}"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 CellOpen->False,
 CellChangeTimes->{{3.8218033167751827`*^9, 3.821803323707226*^9}, {
   3.821804089920792*^9, 3.82180409050572*^9}, {3.821804128614079*^9, 
   3.821804129231569*^9}, {3.92705529908486*^9, 3.927055321906384*^9}, {
   3.927055376213205*^9, 3.927055378815543*^9}, {3.927057365887572*^9, 
   3.927057373129609*^9}, {3.927057428750336*^9, 3.927057436893665*^9}, {
   3.927057797980306*^9, 3.927057802677081*^9}, {3.927057864444936*^9, 
   3.927058009584536*^9}, {3.927058044238235*^9, 3.927058070623851*^9}, {
   3.927058234939542*^9, 3.927058262415997*^9}, {3.927058326275997*^9, 
   3.927058367452791*^9}, {3.927058428579284*^9, 3.927058445797999*^9}, {
   3.927058497790576*^9, 3.92705854971666*^9}, {3.927061293557071*^9, 
   3.927061327477988*^9}, {3.927062697995244*^9, 3.927062700564319*^9}, {
   3.9305971401480093`*^9, 3.9305971428932962`*^9}, {3.9305983838003473`*^9, 
   3.930598407745353*^9}, {3.930599371863182*^9, 3.930599454097058*^9}, {
   3.930599699809755*^9, 3.930599709292581*^9}, {3.9306025805098124`*^9, 
   3.930602590569699*^9}, {3.93060331751073*^9, 3.930603433075329*^9}, 
   3.930765369658333*^9, 3.930765417242362*^9, {3.930765448044935*^9, 
   3.930765471625808*^9}, {3.9307698677931957`*^9, 3.93076988493323*^9}, 
   3.930773259890384*^9, {3.93077345097508*^9, 3.930773525263661*^9}, {
   3.9307736750984993`*^9, 3.930773678362458*^9}, {3.930773734603702*^9, 
   3.930773800972302*^9}, {3.930773837621329*^9, 3.930773897074624*^9}, {
   3.930774651144957*^9, 3.930774659320655*^9}, {3.930775143426763*^9, 
   3.930775164581171*^9}, 3.930775863724771*^9, {3.930776260565336*^9, 
   3.930776262866468*^9}, {3.930776429554811*^9, 3.930776431664075*^9}, {
   3.93077652883814*^9, 3.930776531516225*^9}, {3.930776638490739*^9, 
   3.930776641128249*^9}, {3.930777017691364*^9, 3.93077706666937*^9}, 
   3.930777366103262*^9, {3.930777436880534*^9, 3.930777557963817*^9}, {
   3.932589205024778*^9, 3.932589223645443*^9}, {3.932589258068941*^9, 
   3.932589264598353*^9}, {3.932589326653183*^9, 3.93258933758797*^9}, {
   3.932589381526539*^9, 3.932589382565201*^9}, {3.932589422429088*^9, 
   3.9325894379942417`*^9}, {3.932589485162304*^9, 3.9325895011418667`*^9}, {
   3.932589540598324*^9, 3.9325895409774523`*^9}, 3.932589604287313*^9, {
   3.9325962492639027`*^9, 3.9325962529330273`*^9}, {3.932596672788417*^9, 
   3.932596738727755*^9}, {3.9325973497790747`*^9, 3.9325973512406683`*^9}, {
   3.9325974280299463`*^9, 3.932597472987382*^9}, {3.932597532404661*^9, 
   3.93259754137379*^9}, {3.932597611138356*^9, 3.932597613568362*^9}, 
   3.933098641802431*^9, {3.933099723848826*^9, 3.933099771605461*^9}, {
   3.9330998292701817`*^9, 3.9330998675702143`*^9}, 3.933100039304443*^9, {
   3.933100405623919*^9, 3.93310051642211*^9}, {3.933100595573762*^9, 
   3.933100611715904*^9}, {3.933100662100307*^9, 3.933100677055583*^9}, {
   3.946468389642935*^9, 3.9464684429666767`*^9}, {3.946469009418079*^9, 
   3.946469029045267*^9}, {3.94646908763061*^9, 3.946469138862685*^9}, {
   3.9464692388784237`*^9, 3.9464692793218737`*^9}, 3.9464697468028917`*^9, {
   3.9464753883558493`*^9, 3.946475399764448*^9}, {3.946475719290412*^9, 
   3.946475719906127*^9}, {3.946475769781231*^9, 3.946475784778319*^9}, {
   3.946475814889237*^9, 3.946475818320519*^9}, {3.946476619916438*^9, 
   3.9464766379627037`*^9}, {3.946476668630064*^9, 3.9464766690879*^9}, {
   3.946476714810535*^9, 3.9464767263613586`*^9}, 3.947354674751561*^9, 
   3.947354736160553*^9, {3.947354862463785*^9, 3.947354866579899*^9}, {
   3.947354938222332*^9, 3.9473549707045193`*^9}, {3.949947289229928*^9, 
   3.949947300440281*^9}, {3.9499473497010527`*^9, 3.9499473608217163`*^9}, {
   3.9499473917350187`*^9, 3.949947506737507*^9}, {3.949947536750325*^9, 
   3.949947557438916*^9}, {3.94994759982307*^9, 3.949947620011689*^9}, {
   3.9499477548455563`*^9, 3.949947789988323*^9}, {3.949947846349784*^9, 
   3.949947847772584*^9}, {3.9499478811382437`*^9, 3.949947948972628*^9}, {
   3.950136617201415*^9, 3.950136722068115*^9}, {3.950136965707509*^9, 
   3.9501369675538816`*^9}, {3.950472717893097*^9, 3.95047275254395*^9}, {
   3.9504727861350803`*^9, 3.9504728162165117`*^9}, {3.9504728537417192`*^9, 
   3.95047289890126*^9}, {3.9504729385619497`*^9, 3.9504730032171164`*^9}, {
   3.9504737120767317`*^9, 3.950473754315509*^9}, {3.950473797575324*^9, 
   3.950473894659935*^9}, {3.950473991981297*^9, 3.9504741590890627`*^9}, {
   3.950474238162531*^9, 3.950474238767166*^9}, {3.9504743022186317`*^9, 
   3.9504744155939293`*^9}, {3.950474488221025*^9, 3.950474499538802*^9}, {
   3.950474534929267*^9, 3.950474560142592*^9}, {3.9504746084400253`*^9, 
   3.95047476056739*^9}, {3.9504747947219276`*^9, 3.950474795176146*^9}, {
   3.950474878722206*^9, 3.9504749107928467`*^9}, {3.950475177906867*^9, 
   3.950475222022634*^9}, {3.950475253535948*^9, 3.950475294822747*^9}, {
   3.9504756679840107`*^9, 3.9504756762977343`*^9}, {3.9504757084804163`*^9, 
   3.950475756179323*^9}, {3.950475798112627*^9, 3.9504759246307583`*^9}, {
   3.950476111721266*^9, 3.950476179871418*^9}, {3.950476318381928*^9, 
   3.950476394718747*^9}, {3.950476692808716*^9, 3.950476717355835*^9}, {
   3.95047690811827*^9, 3.9504769184163094`*^9}, {3.9504788325280933`*^9, 
   3.950478919015243*^9}, {3.950479054568446*^9, 3.950479116066639*^9}, {
   3.9504791662526417`*^9, 3.950479280267717*^9}, {3.9504793146482964`*^9, 
   3.950479359442795*^9}, {3.950479619403633*^9, 3.950479641720788*^9}, {
   3.9504797660261097`*^9, 3.950479778638805*^9}, {3.950480183672502*^9, 
   3.950480327081911*^9}, {3.9504804910169992`*^9, 3.9504804949762697`*^9}, {
   3.950480595094911*^9, 3.950480622043873*^9}, {3.950480677136619*^9, 
   3.9504806794877863`*^9}, {3.950481551579452*^9, 3.950481591816942*^9}, {
   3.950481658105294*^9, 3.950481690970549*^9}, {3.950481838057075*^9, 
   3.95048197568497*^9}, {3.950549069966489*^9, 3.950549121120802*^9}, {
   3.953064419660632*^9, 3.9530645018556213`*^9}, {3.953064632955308*^9, 
   3.953064786722176*^9}, {3.953065391372377*^9, 3.953065398396068*^9}, {
   3.9531268269863577`*^9, 3.95312683578163*^9}, {3.953126909752865*^9, 
   3.9531269479360857`*^9}, {3.953127079349113*^9, 3.9531271025492477`*^9}, {
   3.953127163350771*^9, 3.953127178721713*^9}, {3.953127234306534*^9, 
   3.9531272693078833`*^9}, {3.953127389520378*^9, 3.9531273964216833`*^9}, {
   3.953127503317102*^9, 3.953127508418927*^9}, {3.953127546225281*^9, 
   3.953127560776716*^9}, {3.9531275953158607`*^9, 3.953127609076494*^9}, 
   3.953127640989373*^9, {3.953136780941668*^9, 3.953136797903908*^9}, {
   3.953136929781802*^9, 3.953136956410593*^9}, {3.953137092438534*^9, 
   3.953137139962092*^9}, {3.9531373473048058`*^9, 3.953137349655712*^9}, {
   3.9531373960108213`*^9, 3.9531374023607264`*^9}, {3.953137515984995*^9, 
   3.95313754357957*^9}, {3.953285276139423*^9, 3.953285281739294*^9}, {
   3.9532853420773153`*^9, 3.953285351365178*^9}, {3.9554843906883707`*^9, 
   3.9554844202100267`*^9}, 3.9554844683149023`*^9, {3.955484509072035*^9, 
   3.955484573338862*^9}, 3.955484816424817*^9, 3.955484990240109*^9, {
   3.955485048330737*^9, 3.9554850666151657`*^9}, {3.955485212388727*^9, 
   3.955485238935068*^9}},
 CellLabel->
  "In[397]:=",ExpressionUUID->"b56523c0-f5af-4d51-b376-8ed10c008b3c"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`interval$$ = "Day", $CellContext`since$$ = 
    4931, Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`interval$$], "Day"}, {
      "Day" -> Style["Day", 16], "Week" -> Style["Week", 16], "Month" -> 
       Style["Month", 16]}, ControlType -> SetterBar}, {{
       Hold[$CellContext`since$$], 4931}, {
      4931 -> Style["14 yr", 16], 4745 -> Style["13 yr", 16], 4380 -> 
       Style["12 yr", 16], 4015 -> Style["11 yr", 16], 3650 -> 
       Style["10 yr", 16], 3285 -> Style["9 yr", 16], 2920 -> 
       Style["8 yr", 16], 2555 -> Style["7 yr", 16], 2190 -> 
       Style["6 yr", 16], 1825 -> Style["5 yr", 16], 1460 -> 
       Style["4 yr", 16], 1095 -> Style["3 yr", 16], 730 -> Style["2 yr", 16],
        365 -> Style["1 yr", 16]}, ControlType -> PopupMenu}}, 
    Typeset`size$$ = {1289.1, {2803.5584039726446`, 2809.2903375663946`}}, 
    Typeset`update$$ = 0, Typeset`initDone$$, Typeset`skipInitDone$$ = True, 
    Typeset`keyframeActionsQ$$ = False, Typeset`keyframeList$$ = {}}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`interval$$ = "Day", $CellContext`since$$ = 
        4931}, "ControllerVariables" :> {}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$, Typeset`keyframeActionsQ$$, 
        Typeset`keyframeList$$}, "Body" :> 
      Module[{$CellContext`filename$}, $CellContext`insetscale = {0.07, 
          0.875}; $CellContext`intervally = \
$CellContext`ly[$CellContext`interval$$]; $CellContext`btcData = 
         TimeSeriesAggregate[
           
           Take[$CellContext`btcDataFull, -$CellContext`since$$], \
$CellContext`interval$$, Last]; $CellContext`labelstyle = {
          18}; $CellContext`updatedstr = Style[
           StringForm["(updated: ``)", 
            DateString[]], 15]; $CellContext`absolutechanges = Table[Last[
             Part[$CellContext`btcData, $CellContext`n]] - Last[
            Part[$CellContext`btcData, $CellContext`n - 1]], {$CellContext`n, 
            2, 
            Length[$CellContext`btcData]}]; $CellContext`tsabsolutechanges = 
         TimeSeries[
           Table[{
             First[
              Part[$CellContext`btcData, $CellContext`n]], Last[
               Part[$CellContext`btcData, $CellContext`n]] - Last[
              
              Part[$CellContext`btcData, $CellContext`n - 
               1]]}, {$CellContext`n, 2, 
             Length[$CellContext`btcData]}]]; $CellContext`dlpabsolute = 
         DateListPlot[$CellContext`tsabsolutechanges, PlotLabel -> Column[{
              Style[
               StringForm[
               "Absolute `` Price Changes (USD)", $CellContext`intervally], 
               $CellContext`settings[$CellContext`titlestyle]], 
              StringForm["`` ``s", 
               Length[
                $CellContext`tsabsolutechanges[
                "Values"]], $CellContext`interval$$], \
$CellContext`updatedstr}, Center], 
           ImageSize -> $CellContext`settings[$CellContext`imagesize], 
           ImageMargins -> $CellContext`settings[$CellContext`imagemargins], 
           PlotRange -> Full, FrameTicks -> All, 
           TicksStyle -> $CellContext`settings[$CellContext`ticksstyle], 
           GridLines -> {
             Join[
              If[$CellContext`interval$$ == "Day", 
               DateRange[{2010}, {2030}, 
                Quantity[1, "Months"]], 
               DateRange[{2010}, {2030}, 
                Quantity[1, "Quarters"]]], 
              Map[{#, Thick}& , 
               DateRange[{2010}, {2030}, 
                Quantity[1, "Years"]]]], 
             Join[
              Range[-50000, 50000, 1000], 
              Map[{#, Thick}& , 
               Range[-50000, 50000, 5000]]]}, Joined -> False, FrameLabel -> {{
              HoldForm[$CellContext`US $CellContext`Dollars], None}, {
             None, None}}, 
           LabelStyle -> $CellContext`settings[$CellContext`labelstyle], 
           Background -> $CellContext`settings[$CellContext`plotbackground], 
           Epilog -> Inset[
             Framed[
              $CellContext`bstats[$CellContext`absolutechanges]], 
             Scaled[$CellContext`insetscale], Background -> 
             White]]; $CellContext`filename$ = ToString[
           StringForm[
           "BTC-USD-Movements-Absolute-``.jpg", $CellContext`intervally]]; 
        Export[$CellContext`filename$, $CellContext`dlpabsolute]; \
$CellContext`rankabs = SortBy[
           Normal[$CellContext`tsabsolutechanges], 
           Last]; $CellContext`worstabs = Dataset[
           Take[$CellContext`rankabs, 
            Min[100, 
             Length[$CellContext`rankabs]]]]; $CellContext`bestabs = Dataset[
           ReverseSortBy[
            Take[$CellContext`rankabs, 
             Max[-100, -Length[$CellContext`rankabs]]], 
            Part[#, 2]& ]]; $CellContext`worstandbestabs = Column[{
            Style[
             StringForm[
             "Worst and Best ``s (Absolute Dollars)", \
$CellContext`interval$$], 
             $CellContext`settings[$CellContext`titlestyle]], \
$CellContext`updatedstr, 
            
            Row[{$CellContext`worstabs, $CellContext`bestabs}, ImageSize -> 
             600, Alignment -> Center]}, Alignment -> Center, Frame -> 
           True]; $CellContext`filename$ = ToString[
           StringForm[
           "BTC-USD-Movements-Best-Worst-Absolute-``.jpg", \
$CellContext`intervally]]; 
        Export[$CellContext`filename$, $CellContext`worstandbestabs]; \
$CellContext`relativechanges = Table[{
            First[
             Part[$CellContext`btcData, $CellContext`n]], (Last[
               Part[$CellContext`btcData, $CellContext`n]] - Last[
              Part[$CellContext`btcData, $CellContext`n - 1]])/Mean[{
              Last[
               Part[$CellContext`btcData, $CellContext`n]], 
              Last[
               
               Part[$CellContext`btcData, $CellContext`n - 
                1]]}]}, {$CellContext`n, 2, 
            Length[$CellContext`btcData]}]; $CellContext`tsrelativechanges = 
         TimeSeries[$CellContext`relativechanges]; $CellContext`dlprelative = 
         DateListPlot[$CellContext`tsrelativechanges, PlotLabel -> Column[{
              Style[
               StringForm["Relative `` Changes", $CellContext`intervally], 
               $CellContext`settings[$CellContext`titlestyle]], 
              StringForm["`` ``s", 
               Length[
                $CellContext`tsrelativechanges[
                "Values"]], $CellContext`interval$$], \
$CellContext`updatedstr}, Center], PlotRange -> All, GridLines -> {
             Join[
              If[$CellContext`interval$$ == "Day", 
               DateRange[{2010}, {2030}, 
                Quantity[1, "Months"]], 
               DateRange[{2010}, {2030}, 
                Quantity[1, "Quarters"]]], 
              Map[{#, Thick}& , 
               DateRange[{2010}, {2030}, 
                Quantity[1, "Years"]]]], 
             Range[-1, 1, 1/10]}, FrameTicks -> {All, 
             Map[{#, 
               PercentForm[#]}& , 
              Join[
               Range[-1, -0.1, 0.1], {0}, 
               Range[0.1, 1, 0.1]]]}, 
           TicksStyle -> $CellContext`settings[$CellContext`ticksstyle], 
           Joined -> False, PlotMarkers -> {Automatic, 
             If[$CellContext`interval$$ == "Day", 
              Scaled[0.005], 
              Scaled[0.01]]}, Filling -> Axis, FillingStyle -> {Red, Green}, 
           Background -> $CellContext`settings[$CellContext`plotbackground], 
           ImageSize -> $CellContext`settings[$CellContext`imagesize], 
           LabelStyle -> $CellContext`settings[$CellContext`labelstyle], 
           ImageMargins -> $CellContext`settings[$CellContext`imagemargins], 
           Epilog -> Inset[
             Framed[
              $CellContext`bstats[
               $CellContext`tsrelativechanges["Values"]]], 
             Scaled[$CellContext`insetscale], Background -> 
             White]]; $CellContext`filename$ = ToString[
           StringForm[
           "BTC-USD-Movements-Relative-``.jpg", $CellContext`intervally]]; 
        Export[$CellContext`filename$, $CellContext`dlprelative]; \
$CellContext`rankrel = SortBy[
           Normal[$CellContext`tsrelativechanges], 
           Last]; $CellContext`worstrel = Dataset[
           Map[{
             Part[#, 1], 
             PercentForm[
              Part[#, 2]]}& , 
            Take[$CellContext`rankrel, 
             Min[100, 
              Length[$CellContext`rankrel]]]]]; $CellContext`bestrel = Dataset[
           Map[{
             Part[#, 1], 
             PercentForm[
              Part[#, 2]]}& , 
            ReverseSortBy[
             Take[$CellContext`rankrel, 
              Max[-100, -Length[$CellContext`rankrel]]], 
             Part[#, 2]& ]]]; $CellContext`worstandbestrel = Column[{
            Style[
             StringForm[
             "Worst and Best ``s (Relative)", $CellContext`interval$$], 
             $CellContext`settings[$CellContext`titlestyle]], \
$CellContext`updatedstr, 
            
            Row[{$CellContext`worstrel, $CellContext`bestrel}, ImageSize -> 
             600, Alignment -> Center]}, Alignment -> Center, Frame -> 
           True]; $CellContext`filename$ = ToString[
           StringForm[
           "BTC-USD-Movements-Best-Worst-Relative-``.jpg", \
$CellContext`intervally]]; 
        Export[$CellContext`filename$, $CellContext`worstandbestrel]; \
$CellContext`positives = Select[
           $CellContext`tsrelativechanges["Values"], # > 
           0& ]; $CellContext`negatives = Select[
           $CellContext`tsrelativechanges["Values"], # < 
           0& ]; $CellContext`mhistpositive = 
         Histogram[$CellContext`positives, 25, PlotLabel -> Column[{
              Style[
               StringForm[
               "Relative `` Positive Price Movements", \
$CellContext`intervally], 
               $CellContext`settings[$CellContext`titlestyle]], 
              StringForm["`` of `` ``s", 
               Length[$CellContext`positives], Length[$CellContext`positives] + 
               Length[$CellContext`negatives], $CellContext`interval$$], \
$CellContext`updatedstr}, Center], 
           LabelStyle -> $CellContext`settings[$CellContext`labelstyle], 
           PlotRange -> Full, 
           ImageSize -> $CellContext`settings[$CellContext`imagesize], 
           ImageMargins -> $CellContext`settings[$CellContext`imagemargins], 
           GridLines -> Automatic, Ticks -> {$CellContext`ticks2, Automatic}, 
           FrameTicks -> All, ChartStyle -> Green, LabelingFunction -> Above, 
           Background -> $CellContext`settings[$CellContext`plotbackground], 
           Epilog -> Inset[
             Framed[
              $CellContext`bstats[$CellContext`positives]], 
             Scaled[{0.5, 0.85}], Background -> 
             White]]; $CellContext`mhistnegative = 
         Histogram[{$CellContext`negatives}, 50, PlotLabel -> Column[{
              Style[
               StringForm[
               "Relative `` Negative Price Movements", \
$CellContext`intervally], 
               $CellContext`settings[$CellContext`titlestyle]], 
              StringForm["`` of `` ``s", 
               Length[$CellContext`negatives], Length[$CellContext`positives] + 
               Length[$CellContext`negatives], $CellContext`interval$$], \
$CellContext`updatedstr}, Center], 
           LabelStyle -> $CellContext`settings[$CellContext`labelstyle], 
           PlotRange -> Full, 
           ImageSize -> $CellContext`settings[$CellContext`imagesize], 
           ImageMargins -> $CellContext`settings[$CellContext`imagemargins], 
           GridLines -> Automatic, Ticks -> {$CellContext`ticks2, Automatic}, 
           FrameTicks -> All, ChartStyle -> Red, LabelingFunction -> Above, 
           LabelingFunction -> Above, 
           Background -> $CellContext`settings[$CellContext`plotbackground], 
           Epilog -> Inset[
             Framed[
              $CellContext`bstats[$CellContext`negatives]], 
             Scaled[{0.5, 0.85}], Background -> 
             White]]; $CellContext`mhistcombined = Manipulate[
           
           Histogram[{$CellContext`positives, $CellContext`negatives}, \
$CellContext`x, PlotLabel -> Column[{
               Style[
                StringForm[
                "Relative `` Movements", $CellContext`intervally], 
                $CellContext`settings[$CellContext`titlestyle]], 
               StringForm[
               "`` ``s", Length[$CellContext`positives] + 
                Length[$CellContext`negatives], $CellContext`interval$$], \
$CellContext`updatedstr}, Center], 
            LabelStyle -> $CellContext`settings[$CellContext`labelstyle], 
            PlotRange -> Full, 
            ImageSize -> $CellContext`settings[$CellContext`imagesize], 
            ImageMargins -> $CellContext`settings[$CellContext`imagemargins], 
            GridLines -> {
              Range[-1, 1, 1/10], Automatic}, FrameTicks -> All, 
            ChartStyle -> {Green, Red}, LabelStyle -> 
            If[$CellContext`x > 
              75, $CellContext`labelstyle, {$CellContext`labelstyle, 
               Directive[
                If[$CellContext`x < 50, 12, 8]]}], LabelingFunction -> 
            If[$CellContext`x > 75, None, Above], 
            Background -> $CellContext`settings[$CellContext`plotbackground], 
            Epilog -> {
              Inset[
               Framed[
                $CellContext`bstats[
                 Join[$CellContext`positives, $CellContext`negatives]]], 
               Scaled[{0.3, 0.9}], Background -> White], 
              Inset[
               Framed[
                $CellContext`bstats[$CellContext`negatives]], 
               Scaled[{0.1, 0.4}], Background -> White], 
              Inset[
               Framed[
                $CellContext`bstats[$CellContext`positives]], 
               Scaled[{0.9, 0.4}], Background -> White]}], {{$CellContext`x, 
             50, 
             Style["Bins: ", {15}]}, 
            Range[10, 200, 10]}]; $CellContext`filename$ = ToString[
           StringForm[
           "BTC-USD-Movements-Histogram-Relative-``.jpg", \
$CellContext`intervally]]; 
        Export[$CellContext`filename$, $CellContext`mhistcombined]; Column[{
           Style[
            StringForm["Absolute `` Movements", $CellContext`intervally], 
            "Section"], $CellContext`dlpabsolute, \
$CellContext`worstandbestabs, 
           Spacer[10], 
           Style[
            StringForm["Relative `` Movements", $CellContext`intervally], 
            "Section"], $CellContext`dlprelative, \
$CellContext`worstandbestrel, $CellContext`mhistpositive, \
$CellContext`mhistnegative, $CellContext`mhistcombined}]], 
      "Specifications" :> {{{$CellContext`interval$$, "Day"}, {
         "Day" -> Style["Day", 16], "Week" -> Style["Week", 16], "Month" -> 
          Style["Month", 16]}}, {{$CellContext`since$$, 4931}, {
         4931 -> Style["14 yr", 16], 4745 -> Style["13 yr", 16], 4380 -> 
          Style["12 yr", 16], 4015 -> Style["11 yr", 16], 3650 -> 
          Style["10 yr", 16], 3285 -> Style["9 yr", 16], 2920 -> 
          Style["8 yr", 16], 2555 -> Style["7 yr", 16], 2190 -> 
          Style["6 yr", 16], 1825 -> Style["5 yr", 16], 1460 -> 
          Style["4 yr", 16], 1095 -> Style["3 yr", 16], 730 -> 
          Style["2 yr", 16], 365 -> Style["1 yr", 16]}}}, "Options" :> {}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{
      1338.1999999999998`, {2871.372579387684, 2877.104512981434}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.958902508481619*^9, 3.9593733771302643`*^9},
 CellLabel->
  "Out[397]=",ExpressionUUID->"b80e0d6e-97f9-4cd5-95ce-8e459f776a6e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`interval$$ = "Month", $CellContext`since$$ =
     4931, Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`interval$$], "Day"}, {
      "Day" -> Style["Day", 16], "Week" -> Style["Week", 16], "Month" -> 
       Style["Month", 16]}, ControlType -> SetterBar}, {{
       Hold[$CellContext`since$$], 4931}, {
      4931 -> Style["14 yr", 16], 4745 -> Style["13 yr", 16], 4380 -> 
       Style["12 yr", 16], 4015 -> Style["11 yr", 16], 3650 -> 
       Style["10 yr", 16], 3285 -> Style["9 yr", 16], 2920 -> 
       Style["8 yr", 16], 2555 -> Style["7 yr", 16], 2190 -> 
       Style["6 yr", 16], 1825 -> Style["5 yr", 16], 1460 -> 
       Style["4 yr", 16], 1095 -> Style["3 yr", 16], 730 -> Style["2 yr", 16],
        365 -> Style["1 yr", 16]}, ControlType -> PopupMenu}}, 
    Typeset`size$$ = {1289.1, {2813.552396963263, 2819.284330557013}}, 
    Typeset`update$$ = 0, Typeset`initDone$$, Typeset`skipInitDone$$ = True, 
    Typeset`keyframeActionsQ$$ = False, Typeset`keyframeList$$ = {}}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`interval$$ = "Day", $CellContext`since$$ = 
        4931}, "ControllerVariables" :> {}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$, Typeset`keyframeActionsQ$$, 
        Typeset`keyframeList$$}, "Body" :> 
      Module[{$CellContext`filename$}, $CellContext`insetscale = {0.07, 
          0.875}; $CellContext`intervally = \
$CellContext`ly[$CellContext`interval$$]; $CellContext`btcData = 
         TimeSeriesAggregate[
           
           Take[$CellContext`btcDataFull, -$CellContext`since$$], \
$CellContext`interval$$, Last]; $CellContext`labelstyle = {
          18}; $CellContext`updatedstr = Style[
           StringForm["(updated: ``)", 
            DateString[]], 15]; $CellContext`absolutechanges = Table[Last[
             Part[$CellContext`btcData, $CellContext`n]] - Last[
            Part[$CellContext`btcData, $CellContext`n - 1]], {$CellContext`n, 
            2, 
            Length[$CellContext`btcData]}]; $CellContext`tsabsolutechanges = 
         TimeSeries[
           Table[{
             First[
              Part[$CellContext`btcData, $CellContext`n]], Last[
               Part[$CellContext`btcData, $CellContext`n]] - Last[
              
              Part[$CellContext`btcData, $CellContext`n - 
               1]]}, {$CellContext`n, 2, 
             Length[$CellContext`btcData]}]]; $CellContext`dlpabsolute = 
         DateListPlot[$CellContext`tsabsolutechanges, PlotLabel -> Column[{
              Style[
               StringForm[
               "Absolute `` Price Changes (USD)", $CellContext`intervally], 
               $CellContext`settings[$CellContext`titlestyle]], 
              StringForm["`` ``s", 
               Length[
                $CellContext`tsabsolutechanges[
                "Values"]], $CellContext`interval$$], \
$CellContext`updatedstr}, Center], 
           ImageSize -> $CellContext`settings[$CellContext`imagesize], 
           ImageMargins -> $CellContext`settings[$CellContext`imagemargins], 
           PlotRange -> Full, FrameTicks -> All, 
           TicksStyle -> $CellContext`settings[$CellContext`ticksstyle], 
           GridLines -> {
             Join[
              If[$CellContext`interval$$ == "Day", 
               DateRange[{2010}, {2030}, 
                Quantity[1, "Months"]], 
               DateRange[{2010}, {2030}, 
                Quantity[1, "Quarters"]]], 
              Map[{#, Thick}& , 
               DateRange[{2010}, {2030}, 
                Quantity[1, "Years"]]]], 
             Join[
              Range[-50000, 50000, 1000], 
              Map[{#, Thick}& , 
               Range[-50000, 50000, 5000]]]}, Joined -> False, FrameLabel -> {{
              HoldForm[$CellContext`US $CellContext`Dollars], None}, {
             None, None}}, 
           LabelStyle -> $CellContext`settings[$CellContext`labelstyle], 
           Background -> $CellContext`settings[$CellContext`plotbackground], 
           Epilog -> Inset[
             Framed[
              $CellContext`bstats[$CellContext`absolutechanges]], 
             Scaled[$CellContext`insetscale], Background -> 
             White]]; $CellContext`filename$ = ToString[
           StringForm[
           "BTC-USD-Movements-Absolute-``.jpg", $CellContext`intervally]]; 
        Export[$CellContext`filename$, $CellContext`dlpabsolute]; \
$CellContext`rankabs = SortBy[
           Normal[$CellContext`tsabsolutechanges], 
           Last]; $CellContext`worstabs = Dataset[
           Take[$CellContext`rankabs, 
            Min[100, 
             Length[$CellContext`rankabs]]]]; $CellContext`bestabs = Dataset[
           ReverseSortBy[
            Take[$CellContext`rankabs, 
             Max[-100, -Length[$CellContext`rankabs]]], 
            Part[#, 2]& ]]; $CellContext`worstandbestabs = Column[{
            Style[
             StringForm[
             "Worst and Best ``s (Absolute Dollars)", \
$CellContext`interval$$], 
             $CellContext`settings[$CellContext`titlestyle]], \
$CellContext`updatedstr, 
            
            Row[{$CellContext`worstabs, $CellContext`bestabs}, ImageSize -> 
             600, Alignment -> Center]}, Alignment -> Center, Frame -> 
           True]; $CellContext`filename$ = ToString[
           StringForm[
           "BTC-USD-Movements-Best-Worst-Absolute-``.jpg", \
$CellContext`intervally]]; 
        Export[$CellContext`filename$, $CellContext`worstandbestabs]; \
$CellContext`relativechanges = Table[{
            First[
             Part[$CellContext`btcData, $CellContext`n]], (Last[
               Part[$CellContext`btcData, $CellContext`n]] - Last[
              Part[$CellContext`btcData, $CellContext`n - 1]])/Mean[{
              Last[
               Part[$CellContext`btcData, $CellContext`n]], 
              Last[
               
               Part[$CellContext`btcData, $CellContext`n - 
                1]]}]}, {$CellContext`n, 2, 
            Length[$CellContext`btcData]}]; $CellContext`tsrelativechanges = 
         TimeSeries[$CellContext`relativechanges]; $CellContext`dlprelative = 
         DateListPlot[$CellContext`tsrelativechanges, PlotLabel -> Column[{
              Style[
               StringForm["Relative `` Changes", $CellContext`intervally], 
               $CellContext`settings[$CellContext`titlestyle]], 
              StringForm["`` ``s", 
               Length[
                $CellContext`tsrelativechanges[
                "Values"]], $CellContext`interval$$], \
$CellContext`updatedstr}, Center], PlotRange -> All, GridLines -> {
             Join[
              If[$CellContext`interval$$ == "Day", 
               DateRange[{2010}, {2030}, 
                Quantity[1, "Months"]], 
               DateRange[{2010}, {2030}, 
                Quantity[1, "Quarters"]]], 
              Map[{#, Thick}& , 
               DateRange[{2010}, {2030}, 
                Quantity[1, "Years"]]]], 
             Range[-1, 1, 1/10]}, FrameTicks -> {All, 
             Map[{#, 
               PercentForm[#]}& , 
              Join[
               Range[-1, -0.1, 0.1], {0}, 
               Range[0.1, 1, 0.1]]]}, 
           TicksStyle -> $CellContext`settings[$CellContext`ticksstyle], 
           Joined -> False, PlotMarkers -> {Automatic, 
             If[$CellContext`interval$$ == "Day", 
              Scaled[0.005], 
              Scaled[0.01]]}, Filling -> Axis, FillingStyle -> {Red, Green}, 
           Background -> $CellContext`settings[$CellContext`plotbackground], 
           ImageSize -> $CellContext`settings[$CellContext`imagesize], 
           LabelStyle -> $CellContext`settings[$CellContext`labelstyle], 
           ImageMargins -> $CellContext`settings[$CellContext`imagemargins], 
           Epilog -> Inset[
             Framed[
              $CellContext`bstats[
               $CellContext`tsrelativechanges["Values"]]], 
             Scaled[$CellContext`insetscale], Background -> 
             White]]; $CellContext`filename$ = ToString[
           StringForm[
           "BTC-USD-Movements-Relative-``.jpg", $CellContext`intervally]]; 
        Export[$CellContext`filename$, $CellContext`dlprelative]; \
$CellContext`rankrel = SortBy[
           Normal[$CellContext`tsrelativechanges], 
           Last]; $CellContext`worstrel = Dataset[
           Map[{
             Part[#, 1], 
             PercentForm[
              Part[#, 2]]}& , 
            Take[$CellContext`rankrel, 
             Min[100, 
              Length[$CellContext`rankrel]]]]]; $CellContext`bestrel = Dataset[
           Map[{
             Part[#, 1], 
             PercentForm[
              Part[#, 2]]}& , 
            ReverseSortBy[
             Take[$CellContext`rankrel, 
              Max[-100, -Length[$CellContext`rankrel]]], 
             Part[#, 2]& ]]]; $CellContext`worstandbestrel = Column[{
            Style[
             StringForm[
             "Worst and Best ``s (Relative)", $CellContext`interval$$], 
             $CellContext`settings[$CellContext`titlestyle]], \
$CellContext`updatedstr, 
            
            Row[{$CellContext`worstrel, $CellContext`bestrel}, ImageSize -> 
             600, Alignment -> Center]}, Alignment -> Center, Frame -> 
           True]; $CellContext`filename$ = ToString[
           StringForm[
           "BTC-USD-Movements-Best-Worst-Relative-``.jpg", \
$CellContext`intervally]]; 
        Export[$CellContext`filename$, $CellContext`worstandbestrel]; \
$CellContext`positives = Select[
           $CellContext`tsrelativechanges["Values"], # > 
           0& ]; $CellContext`negatives = Select[
           $CellContext`tsrelativechanges["Values"], # < 
           0& ]; $CellContext`mhistpositive = 
         Histogram[$CellContext`positives, 25, PlotLabel -> Column[{
              Style[
               StringForm[
               "Relative `` Positive Price Movements", \
$CellContext`intervally], 
               $CellContext`settings[$CellContext`titlestyle]], 
              StringForm["`` of `` ``s", 
               Length[$CellContext`positives], Length[$CellContext`positives] + 
               Length[$CellContext`negatives], $CellContext`interval$$], \
$CellContext`updatedstr}, Center], 
           LabelStyle -> $CellContext`settings[$CellContext`labelstyle], 
           PlotRange -> Full, 
           ImageSize -> $CellContext`settings[$CellContext`imagesize], 
           ImageMargins -> $CellContext`settings[$CellContext`imagemargins], 
           GridLines -> Automatic, Ticks -> {$CellContext`ticks2, Automatic}, 
           FrameTicks -> All, ChartStyle -> Green, LabelingFunction -> Above, 
           Background -> $CellContext`settings[$CellContext`plotbackground], 
           Epilog -> Inset[
             Framed[
              $CellContext`bstats[$CellContext`positives]], 
             Scaled[{0.5, 0.85}], Background -> 
             White]]; $CellContext`mhistnegative = 
         Histogram[{$CellContext`negatives}, 50, PlotLabel -> Column[{
              Style[
               StringForm[
               "Relative `` Negative Price Movements", \
$CellContext`intervally], 
               $CellContext`settings[$CellContext`titlestyle]], 
              StringForm["`` of `` ``s", 
               Length[$CellContext`negatives], Length[$CellContext`positives] + 
               Length[$CellContext`negatives], $CellContext`interval$$], \
$CellContext`updatedstr}, Center], 
           LabelStyle -> $CellContext`settings[$CellContext`labelstyle], 
           PlotRange -> Full, 
           ImageSize -> $CellContext`settings[$CellContext`imagesize], 
           ImageMargins -> $CellContext`settings[$CellContext`imagemargins], 
           GridLines -> Automatic, Ticks -> {$CellContext`ticks2, Automatic}, 
           FrameTicks -> All, ChartStyle -> Red, LabelingFunction -> Above, 
           LabelingFunction -> Above, 
           Background -> $CellContext`settings[$CellContext`plotbackground], 
           Epilog -> Inset[
             Framed[
              $CellContext`bstats[$CellContext`negatives]], 
             Scaled[{0.5, 0.85}], Background -> 
             White]]; $CellContext`mhistcombined = Manipulate[
           
           Histogram[{$CellContext`positives, $CellContext`negatives}, \
$CellContext`x, PlotLabel -> Column[{
               Style[
                StringForm[
                "Relative `` Movements", $CellContext`intervally], 
                $CellContext`settings[$CellContext`titlestyle]], 
               StringForm[
               "`` ``s", Length[$CellContext`positives] + 
                Length[$CellContext`negatives], $CellContext`interval$$], \
$CellContext`updatedstr}, Center], 
            LabelStyle -> $CellContext`settings[$CellContext`labelstyle], 
            PlotRange -> Full, 
            ImageSize -> $CellContext`settings[$CellContext`imagesize], 
            ImageMargins -> $CellContext`settings[$CellContext`imagemargins], 
            GridLines -> {
              Range[-1, 1, 1/10], Automatic}, FrameTicks -> All, 
            ChartStyle -> {Green, Red}, LabelStyle -> 
            If[$CellContext`x > 
              75, $CellContext`labelstyle, {$CellContext`labelstyle, 
               Directive[
                If[$CellContext`x < 50, 12, 8]]}], LabelingFunction -> 
            If[$CellContext`x > 75, None, Above], 
            Background -> $CellContext`settings[$CellContext`plotbackground], 
            Epilog -> {
              Inset[
               Framed[
                $CellContext`bstats[
                 Join[$CellContext`positives, $CellContext`negatives]]], 
               Scaled[{0.3, 0.9}], Background -> White], 
              Inset[
               Framed[
                $CellContext`bstats[$CellContext`negatives]], 
               Scaled[{0.1, 0.4}], Background -> White], 
              Inset[
               Framed[
                $CellContext`bstats[$CellContext`positives]], 
               Scaled[{0.9, 0.4}], Background -> White]}], {{$CellContext`x, 
             50, 
             Style["Bins: ", {15}]}, 
            Range[10, 200, 10]}]; $CellContext`filename$ = ToString[
           StringForm[
           "BTC-USD-Movements-Histogram-Relative-``.jpg", \
$CellContext`intervally]]; 
        Export[$CellContext`filename$, $CellContext`mhistcombined]; Column[{
           Style[
            StringForm["Absolute `` Movements", $CellContext`intervally], 
            "Section"], $CellContext`dlpabsolute, \
$CellContext`worstandbestabs, 
           Spacer[10], 
           Style[
            StringForm["Relative `` Movements", $CellContext`intervally], 
            "Section"], $CellContext`dlprelative, \
$CellContext`worstandbestrel, $CellContext`mhistpositive, \
$CellContext`mhistnegative, $CellContext`mhistcombined}]], 
      "Specifications" :> {{{$CellContext`interval$$, "Day"}, {
         "Day" -> Style["Day", 16], "Week" -> Style["Week", 16], "Month" -> 
          Style["Month", 16]}}, {{$CellContext`since$$, 4931}, {
         4931 -> Style["14 yr", 16], 4745 -> Style["13 yr", 16], 4380 -> 
          Style["12 yr", 16], 4015 -> Style["11 yr", 16], 3650 -> 
          Style["10 yr", 16], 3285 -> Style["9 yr", 16], 2920 -> 
          Style["8 yr", 16], 2555 -> Style["7 yr", 16], 2190 -> 
          Style["6 yr", 16], 1825 -> Style["5 yr", 16], 1460 -> 
          Style["4 yr", 16], 1095 -> Style["3 yr", 16], 730 -> 
          Style["2 yr", 16], 365 -> Style["1 yr", 16]}}}, "Options" :> {}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{
      1338.1999999999998`, {2881.3665723783024`, 2887.0985059720524`}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Input",
 CellChangeTimes->{{3.9587697352554283`*^9, 3.9587697353930683`*^9}},
 CellLabel->
  "In[398]:=",ExpressionUUID->"eb3b9e1f-c8fe-4fa1-9732-289ee8e574ed"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`interval$$ = "Month", $CellContext`since$$ =
     4931, Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`interval$$], "Month"}, {
      "Day" -> Style["Day", 16], "Week" -> Style["Week", 16], "Month" -> 
       Style["Month", 16]}, ControlType -> SetterBar}, {{
       Hold[$CellContext`since$$], 4931}, {
      4931 -> Style["14 yr", 16], 4745 -> Style["13 yr", 16], 4380 -> 
       Style["12 yr", 16], 4015 -> Style["11 yr", 16], 3650 -> 
       Style["10 yr", 16], 3285 -> Style["9 yr", 16], 2920 -> 
       Style["8 yr", 16], 2555 -> Style["7 yr", 16], 2190 -> 
       Style["6 yr", 16], 1825 -> Style["5 yr", 16], 1460 -> 
       Style["4 yr", 16], 1095 -> Style["3 yr", 16], 730 -> Style["2 yr", 16],
        365 -> Style["1 yr", 16]}, ControlType -> PopupMenu}}, 
    Typeset`size$$ = {1289.1, {2813.552396963263, 2819.284330557013}}, 
    Typeset`update$$ = 0, Typeset`initDone$$, Typeset`skipInitDone$$ = True, 
    Typeset`keyframeActionsQ$$ = False, Typeset`keyframeList$$ = {}}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`interval$$ = "Month", $CellContext`since$$ = 
        4931}, "ControllerVariables" :> {}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$, Typeset`keyframeActionsQ$$, 
        Typeset`keyframeList$$}, "Body" :> 
      Module[{$CellContext`filename$}, $CellContext`insetscale = {0.07, 
          0.875}; $CellContext`intervally = \
$CellContext`ly[$CellContext`interval$$]; $CellContext`btcData = 
         TimeSeriesAggregate[
           
           Take[$CellContext`btcDataFull, -$CellContext`since$$], \
$CellContext`interval$$, Last]; $CellContext`labelstyle = {
          18}; $CellContext`updatedstr = Style[
           StringForm["(updated: ``)", 
            DateString[]], 15]; $CellContext`absolutechanges = Table[Last[
             Part[$CellContext`btcData, $CellContext`n]] - Last[
            Part[$CellContext`btcData, $CellContext`n - 1]], {$CellContext`n, 
            2, 
            Length[$CellContext`btcData]}]; $CellContext`tsabsolutechanges = 
         TimeSeries[
           Table[{
             First[
              Part[$CellContext`btcData, $CellContext`n]], Last[
               Part[$CellContext`btcData, $CellContext`n]] - Last[
              
              Part[$CellContext`btcData, $CellContext`n - 
               1]]}, {$CellContext`n, 2, 
             Length[$CellContext`btcData]}]]; $CellContext`dlpabsolute = 
         DateListPlot[$CellContext`tsabsolutechanges, PlotLabel -> Column[{
              Style[
               StringForm[
               "Absolute `` Price Changes (USD)", $CellContext`intervally], 
               $CellContext`settings[$CellContext`titlestyle]], 
              StringForm["`` ``s", 
               Length[
                $CellContext`tsabsolutechanges[
                "Values"]], $CellContext`interval$$], \
$CellContext`updatedstr}, Center], 
           ImageSize -> $CellContext`settings[$CellContext`imagesize], 
           ImageMargins -> $CellContext`settings[$CellContext`imagemargins], 
           PlotRange -> Full, FrameTicks -> All, 
           TicksStyle -> $CellContext`settings[$CellContext`ticksstyle], 
           GridLines -> {
             Join[
              If[$CellContext`interval$$ == "Day", 
               DateRange[{2010}, {2030}, 
                Quantity[1, "Months"]], 
               DateRange[{2010}, {2030}, 
                Quantity[1, "Quarters"]]], 
              Map[{#, Thick}& , 
               DateRange[{2010}, {2030}, 
                Quantity[1, "Years"]]]], 
             Join[
              Range[-50000, 50000, 1000], 
              Map[{#, Thick}& , 
               Range[-50000, 50000, 5000]]]}, Joined -> False, FrameLabel -> {{
              HoldForm[$CellContext`US $CellContext`Dollars], None}, {
             None, None}}, 
           LabelStyle -> $CellContext`settings[$CellContext`labelstyle], 
           Background -> $CellContext`settings[$CellContext`plotbackground], 
           Epilog -> Inset[
             Framed[
              $CellContext`bstats[$CellContext`absolutechanges]], 
             Scaled[$CellContext`insetscale], Background -> 
             White]]; $CellContext`filename$ = ToString[
           StringForm[
           "BTC-USD-Movements-Absolute-``.jpg", $CellContext`intervally]]; 
        Export[$CellContext`filename$, $CellContext`dlpabsolute]; \
$CellContext`rankabs = SortBy[
           Normal[$CellContext`tsabsolutechanges], 
           Last]; $CellContext`worstabs = Dataset[
           Take[$CellContext`rankabs, 
            Min[100, 
             Length[$CellContext`rankabs]]]]; $CellContext`bestabs = Dataset[
           ReverseSortBy[
            Take[$CellContext`rankabs, 
             Max[-100, -Length[$CellContext`rankabs]]], 
            Part[#, 2]& ]]; $CellContext`worstandbestabs = Column[{
            Style[
             StringForm[
             "Worst and Best ``s (Absolute Dollars)", \
$CellContext`interval$$], 
             $CellContext`settings[$CellContext`titlestyle]], \
$CellContext`updatedstr, 
            
            Row[{$CellContext`worstabs, $CellContext`bestabs}, ImageSize -> 
             600, Alignment -> Center]}, Alignment -> Center, Frame -> 
           True]; $CellContext`filename$ = ToString[
           StringForm[
           "BTC-USD-Movements-Best-Worst-Absolute-``.jpg", \
$CellContext`intervally]]; 
        Export[$CellContext`filename$, $CellContext`worstandbestabs]; \
$CellContext`relativechanges = Table[{
            First[
             Part[$CellContext`btcData, $CellContext`n]], (Last[
               Part[$CellContext`btcData, $CellContext`n]] - Last[
              Part[$CellContext`btcData, $CellContext`n - 1]])/Mean[{
              Last[
               Part[$CellContext`btcData, $CellContext`n]], 
              Last[
               
               Part[$CellContext`btcData, $CellContext`n - 
                1]]}]}, {$CellContext`n, 2, 
            Length[$CellContext`btcData]}]; $CellContext`tsrelativechanges = 
         TimeSeries[$CellContext`relativechanges]; $CellContext`dlprelative = 
         DateListPlot[$CellContext`tsrelativechanges, PlotLabel -> Column[{
              Style[
               StringForm["Relative `` Changes", $CellContext`intervally], 
               $CellContext`settings[$CellContext`titlestyle]], 
              StringForm["`` ``s", 
               Length[
                $CellContext`tsrelativechanges[
                "Values"]], $CellContext`interval$$], \
$CellContext`updatedstr}, Center], PlotRange -> All, GridLines -> {
             Join[
              If[$CellContext`interval$$ == "Day", 
               DateRange[{2010}, {2030}, 
                Quantity[1, "Months"]], 
               DateRange[{2010}, {2030}, 
                Quantity[1, "Quarters"]]], 
              Map[{#, Thick}& , 
               DateRange[{2010}, {2030}, 
                Quantity[1, "Years"]]]], 
             Range[-1, 1, 1/10]}, FrameTicks -> {All, 
             Map[{#, 
               PercentForm[#]}& , 
              Join[
               Range[-1, -0.1, 0.1], {0}, 
               Range[0.1, 1, 0.1]]]}, 
           TicksStyle -> $CellContext`settings[$CellContext`ticksstyle], 
           Joined -> False, PlotMarkers -> {Automatic, 
             If[$CellContext`interval$$ == "Day", 
              Scaled[0.005], 
              Scaled[0.01]]}, Filling -> Axis, FillingStyle -> {Red, Green}, 
           Background -> $CellContext`settings[$CellContext`plotbackground], 
           ImageSize -> $CellContext`settings[$CellContext`imagesize], 
           LabelStyle -> $CellContext`settings[$CellContext`labelstyle], 
           ImageMargins -> $CellContext`settings[$CellContext`imagemargins], 
           Epilog -> Inset[
             Framed[
              $CellContext`bstats[
               $CellContext`tsrelativechanges["Values"]]], 
             Scaled[$CellContext`insetscale], Background -> 
             White]]; $CellContext`filename$ = ToString[
           StringForm[
           "BTC-USD-Movements-Relative-``.jpg", $CellContext`intervally]]; 
        Export[$CellContext`filename$, $CellContext`dlprelative]; \
$CellContext`rankrel = SortBy[
           Normal[$CellContext`tsrelativechanges], 
           Last]; $CellContext`worstrel = Dataset[
           Map[{
             Part[#, 1], 
             PercentForm[
              Part[#, 2]]}& , 
            Take[$CellContext`rankrel, 
             Min[100, 
              Length[$CellContext`rankrel]]]]]; $CellContext`bestrel = Dataset[
           Map[{
             Part[#, 1], 
             PercentForm[
              Part[#, 2]]}& , 
            ReverseSortBy[
             Take[$CellContext`rankrel, 
              Max[-100, -Length[$CellContext`rankrel]]], 
             Part[#, 2]& ]]]; $CellContext`worstandbestrel = Column[{
            Style[
             StringForm[
             "Worst and Best ``s (Relative)", $CellContext`interval$$], 
             $CellContext`settings[$CellContext`titlestyle]], \
$CellContext`updatedstr, 
            
            Row[{$CellContext`worstrel, $CellContext`bestrel}, ImageSize -> 
             600, Alignment -> Center]}, Alignment -> Center, Frame -> 
           True]; $CellContext`filename$ = ToString[
           StringForm[
           "BTC-USD-Movements-Best-Worst-Relative-``.jpg", \
$CellContext`intervally]]; 
        Export[$CellContext`filename$, $CellContext`worstandbestrel]; \
$CellContext`positives = Select[
           $CellContext`tsrelativechanges["Values"], # > 
           0& ]; $CellContext`negatives = Select[
           $CellContext`tsrelativechanges["Values"], # < 
           0& ]; $CellContext`mhistpositive = 
         Histogram[$CellContext`positives, 25, PlotLabel -> Column[{
              Style[
               StringForm[
               "Relative `` Positive Price Movements", \
$CellContext`intervally], 
               $CellContext`settings[$CellContext`titlestyle]], 
              StringForm["`` of `` ``s", 
               Length[$CellContext`positives], Length[$CellContext`positives] + 
               Length[$CellContext`negatives], $CellContext`interval$$], \
$CellContext`updatedstr}, Center], 
           LabelStyle -> $CellContext`settings[$CellContext`labelstyle], 
           PlotRange -> Full, 
           ImageSize -> $CellContext`settings[$CellContext`imagesize], 
           ImageMargins -> $CellContext`settings[$CellContext`imagemargins], 
           GridLines -> Automatic, Ticks -> {$CellContext`ticks2, Automatic}, 
           FrameTicks -> All, ChartStyle -> Green, LabelingFunction -> Above, 
           Background -> $CellContext`settings[$CellContext`plotbackground], 
           Epilog -> Inset[
             Framed[
              $CellContext`bstats[$CellContext`positives]], 
             Scaled[{0.5, 0.85}], Background -> 
             White]]; $CellContext`mhistnegative = 
         Histogram[{$CellContext`negatives}, 50, PlotLabel -> Column[{
              Style[
               StringForm[
               "Relative `` Negative Price Movements", \
$CellContext`intervally], 
               $CellContext`settings[$CellContext`titlestyle]], 
              StringForm["`` of `` ``s", 
               Length[$CellContext`negatives], Length[$CellContext`positives] + 
               Length[$CellContext`negatives], $CellContext`interval$$], \
$CellContext`updatedstr}, Center], 
           LabelStyle -> $CellContext`settings[$CellContext`labelstyle], 
           PlotRange -> Full, 
           ImageSize -> $CellContext`settings[$CellContext`imagesize], 
           ImageMargins -> $CellContext`settings[$CellContext`imagemargins], 
           GridLines -> Automatic, Ticks -> {$CellContext`ticks2, Automatic}, 
           FrameTicks -> All, ChartStyle -> Red, LabelingFunction -> Above, 
           LabelingFunction -> Above, 
           Background -> $CellContext`settings[$CellContext`plotbackground], 
           Epilog -> Inset[
             Framed[
              $CellContext`bstats[$CellContext`negatives]], 
             Scaled[{0.5, 0.85}], Background -> 
             White]]; $CellContext`mhistcombined = Manipulate[
           
           Histogram[{$CellContext`positives, $CellContext`negatives}, \
$CellContext`x, PlotLabel -> Column[{
               Style[
                StringForm[
                "Relative `` Movements", $CellContext`intervally], 
                $CellContext`settings[$CellContext`titlestyle]], 
               StringForm[
               "`` ``s", Length[$CellContext`positives] + 
                Length[$CellContext`negatives], $CellContext`interval$$], \
$CellContext`updatedstr}, Center], 
            LabelStyle -> $CellContext`settings[$CellContext`labelstyle], 
            PlotRange -> Full, 
            ImageSize -> $CellContext`settings[$CellContext`imagesize], 
            ImageMargins -> $CellContext`settings[$CellContext`imagemargins], 
            GridLines -> {
              Range[-1, 1, 1/10], Automatic}, FrameTicks -> All, 
            ChartStyle -> {Green, Red}, LabelStyle -> 
            If[$CellContext`x > 
              75, $CellContext`labelstyle, {$CellContext`labelstyle, 
               Directive[
                If[$CellContext`x < 50, 12, 8]]}], LabelingFunction -> 
            If[$CellContext`x > 75, None, Above], 
            Background -> $CellContext`settings[$CellContext`plotbackground], 
            Epilog -> {
              Inset[
               Framed[
                $CellContext`bstats[
                 Join[$CellContext`positives, $CellContext`negatives]]], 
               Scaled[{0.3, 0.9}], Background -> White], 
              Inset[
               Framed[
                $CellContext`bstats[$CellContext`negatives]], 
               Scaled[{0.1, 0.4}], Background -> White], 
              Inset[
               Framed[
                $CellContext`bstats[$CellContext`positives]], 
               Scaled[{0.9, 0.4}], Background -> White]}], {{$CellContext`x, 
             50, 
             Style["Bins: ", {15}]}, 
            Range[10, 200, 10]}]; $CellContext`filename$ = ToString[
           StringForm[
           "BTC-USD-Movements-Histogram-Relative-``.jpg", \
$CellContext`intervally]]; 
        Export[$CellContext`filename$, $CellContext`mhistcombined]; Column[{
           Style[
            StringForm["Absolute `` Movements", $CellContext`intervally], 
            "Section"], $CellContext`dlpabsolute, \
$CellContext`worstandbestabs, 
           Spacer[10], 
           Style[
            StringForm["Relative `` Movements", $CellContext`intervally], 
            "Section"], $CellContext`dlprelative, \
$CellContext`worstandbestrel, $CellContext`mhistpositive, \
$CellContext`mhistnegative, $CellContext`mhistcombined}]], 
      "Specifications" :> {{{$CellContext`interval$$, "Month"}, {
         "Day" -> Style["Day", 16], "Week" -> Style["Week", 16], "Month" -> 
          Style["Month", 16]}}, {{$CellContext`since$$, 4931}, {
         4931 -> Style["14 yr", 16], 4745 -> Style["13 yr", 16], 4380 -> 
          Style["12 yr", 16], 4015 -> Style["11 yr", 16], 3650 -> 
          Style["10 yr", 16], 3285 -> Style["9 yr", 16], 2920 -> 
          Style["8 yr", 16], 2555 -> Style["7 yr", 16], 2190 -> 
          Style["6 yr", 16], 1825 -> Style["5 yr", 16], 1460 -> 
          Style["4 yr", 16], 1095 -> Style["3 yr", 16], 730 -> 
          Style["2 yr", 16], 365 -> Style["1 yr", 16]}}}, "Options" :> {}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{
      1338.1999999999998`, {2881.3665723783024`, 2887.0985059720524`}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.958902511129973*^9, 3.959373383780568*^9},
 CellLabel->
  "Out[398]=",ExpressionUUID->"dc327173-a89a-4f50-94da-52fd70e9d149"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Starting here to quantify price volatility (not ready for prime time yet)\
\>", "Section",
 CellChangeTimes->{{3.931557801516337*^9, 3.931557818741585*^9}, {
  3.949947065951025*^9, 3.949947082680051*^9}, {3.949947681642511*^9, 
  3.949947690861421*^9}},ExpressionUUID->"673cb76b-bd4d-4e8e-b2fc-\
2e286e53115f"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"relativechangesall", " ", "=", " ", 
   RowBox[{"Table", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"First", "[", 
        RowBox[{"btcDataFull", "[", 
         RowBox[{"[", "n", "]"}], "]"}], "]"}], "\[IndentingNewLine]", ",", 
       FractionBox[
        RowBox[{
         RowBox[{"Last", "[", 
          RowBox[{"btcDataFull", "[", 
           RowBox[{"[", "n", "]"}], "]"}], "]"}], "-", 
         RowBox[{"Last", "[", 
          RowBox[{"btcDataFull", "[", 
           RowBox[{"[", 
            RowBox[{"n", "-", "1"}], "]"}], "]"}], "]"}]}], 
        RowBox[{"Mean", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Last", "[", 
            RowBox[{"btcDataFull", "[", 
             RowBox[{"[", "n", "]"}], "]"}], "]"}], ",", 
           RowBox[{"Last", "[", 
            RowBox[{"btcDataFull", "[", 
             RowBox[{"[", 
              RowBox[{"n", "-", "1"}], "]"}], "]"}], "]"}]}], "}"}], "]"}]]}],
       "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", ",", 
     RowBox[{"{", 
      RowBox[{"n", ",", "2", ",", " ", 
       RowBox[{"Length", "@", "btcDataFull"}]}], "}"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"tsrelativechangesall", " ", "=", " ", 
   RowBox[{"TimeSeries", "[", "relativechangesall", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"annualvolatility", "=", 
   RowBox[{"MovingMap", "[", 
    RowBox[{"StandardDeviation", ",", "tsrelativechangesall", ",", 
     RowBox[{"Quantity", "[", 
      RowBox[{"12", ",", "\"\<Months\>\""}], "]"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"DateListPlot", "[", "\[IndentingNewLine]", 
  RowBox[{"annualvolatility", "\[IndentingNewLine]", ",", 
   RowBox[{"PlotLabel", "->", "\"\<Volatility\>\""}], "\[IndentingNewLine]", ",", 
   RowBox[{"ImageSize", "->", 
    RowBox[{"settings", "[", "imagesize", "]"}]}], "\[IndentingNewLine]", ",", 
   RowBox[{"ImageMargins", "->", 
    RowBox[{"settings", "[", "imagemargins", "]"}]}], "\[IndentingNewLine]", ",", 
   RowBox[{"Background", "->", 
    RowBox[{"settings", "[", "plotbackground", "]"}]}], "\[IndentingNewLine]",
    ",", 
   RowBox[{"PlotRange", "->", "Full"}], "\[IndentingNewLine]", ",", 
   RowBox[{"FrameTicks", "->", "All"}], "\[IndentingNewLine]", ",", 
   RowBox[{"GridLines", "->", 
    RowBox[{"{", 
     RowBox[{"Automatic", ",", 
      RowBox[{"Range", "[", 
       RowBox[{"0", ",", "0.2", ",", "0.01"}], "]"}]}], "}"}]}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"FrameLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"HoldForm", "[", 
         RowBox[{"Standard", " ", "deviation"}], "]"}], ",", "None"}], "}"}], 
      ",", 
      RowBox[{"{", 
       RowBox[{"None", ",", "None"}], "}"}]}], "}"}]}], "\[IndentingNewLine]",
    ",", 
   RowBox[{"LabelStyle", "->", 
    RowBox[{"settings", "[", "labelstyle", "]"}]}]}], "\[IndentingNewLine]", 
  "]"}]}], "Input",
 CellOpen->False,
 CellChangeTimes->{{3.946475927717128*^9, 3.946475929139757*^9}, {
  3.946475960252776*^9, 3.9464759954479837`*^9}, {3.946476060647202*^9, 
  3.9464760957059393`*^9}, {3.946476219176024*^9, 3.946476305890623*^9}, {
  3.946476342537307*^9, 3.9464763661379967`*^9}, {3.946476403758297*^9, 
  3.946476411275354*^9}, {3.946476452799178*^9, 3.94647648862654*^9}, {
  3.946476806371994*^9, 3.946476895049273*^9}, {3.946476990424893*^9, 
  3.9464769999229717`*^9}, {3.946477031333768*^9, 3.9464770825599546`*^9}, {
  3.946477221775094*^9, 3.94647722238356*^9}, {3.946589551401029*^9, 
  3.946589570655095*^9}, {3.94994801401167*^9, 3.949948131950904*^9}, {
  3.949948197131667*^9, 3.9499482024140368`*^9}, {3.9530651728696136`*^9, 
  3.953065199618423*^9}},
 CellLabel->
  "In[399]:=",ExpressionUUID->"5df44138-e30e-41bd-843f-d9b16e477c68"],

Cell[BoxData[
 GraphicsBox[{{}, 
   InterpretationBox[{
     TagBox[{{}, {}, 
       TagBox[
        {RGBColor[0.24, 0.6, 0.8], PointSize[0.003666666666666667], 
         AbsoluteThickness[2], LineBox[CompressedData["
1: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
VdaTUD71f4bVmyq3WT2h+7+NNFR8m9Hej87w6P5vJ7i9fvTHQ/0Y8zbASyef
GnQ9g+7/PgxfuVikdzOSsbQcftjBdmDEDsaKj/CbC+O7lWxnzDLspOIv9Dcf
ExzKmDsT/hL6ZQtLwFgYBKeNP7G4rwNjSSqcsL7/m6RpjOU3YfO8ib69ezFW
f4AzD3JHf2cz5uhpqviBL9x3vLnE3B8usIOXbJRe909lLF4LPxicmjfgEGNZ
MmyxPExr7F7G9SWwjVPf4BZ/xuz3sLn+q4Hhp+n+7wGdVfxLesHDn7jS/d98
2GCr7arIgXT/92rY4gJ7Z0wV3f+cCB801CxzO0f3P8vhpC2yqB7RdP+zEo59
Yjfiy166/7lvFxW/OD/qqBlNl0yDr/1e5+MTSfc/r4Cd4rZlJP9H9z/vh789
b7tm/oi5/4xzBW4o9dawespY8Br+b6B/UMh9uv+3V1f0+Wqt/byHuX9NNgUO
dtnoe86d7v/1hU0vsNgDljBmS+DOWxM6T1pA9/9eggXXtt4Ld6T7317B/VvL
0g46MZbqaKn4q1KH6pXRdMUk2ODnuG+1QxmzvGHdxU8SVIMYc/fB95Mj3wQb
MRYWwtp89rMkQ8aSBnjFsyvrjnEYy7t3U/G3mlZvdB/MWD0eDnrWNnCBAWOO
EF4wtCL05UTGgr3wpiU/810FjMUF8MUo3Z8G1Ct7Dne9k/ur1IL6u3ZX8Q8k
nQ7xpMezx8HyLT6Lr1fQ/X+ecENj8LbWUsaiSHjNBcPc8sd0/3MevDlrx4Cz
VXT/cw0s2H9pSdpNuv+5cw8V/9itHF1jHernwu6/d1UcP073fy+C3z3lr7QV
MstPsgveIWi+mr+Ysfw0vCxKUPJgKWN1NRzK1zk2bjUtfw1t9Ozx7CxZS8t/
DBwma9JbtpKxeD6csDBC++oOxrIdcPmKUHHsTrr//SS8WHYs9jeZ/RjuXPi9
JCmR7n9n6aj4Q/57qXUnju5/HwlXzY2pHpRN9z/OhWss+VdHnKH730Ph1UYR
cew3dP/7cbhAubhTymu6//0BfPR2YoiDkrHwF6xasPhlFFli0hP7w8x33cUq
6neFLe6NS9d5T/0hcNWA5bOGkznH4Pfje5yPb6F+BSy+rbuj70fq/w4HBQRf
LifLhrFV/LGtR5Mnf6b+OfBe26aEfv/u/98CPz5xNt28hvoz4Tkthj93PaP+
Cvbf7efG6xCytB1OKrNf6ElWDO6l4p87OGdd33/9znAeZ/3s/W3UvwmeUGby
OpBer1AKb26oKBVSj+Q2vKbhsXXFW+r/BI/dcWKtD70f6kG9Vfwt4oc2fDLH
EU5uFSUFt1L/etjc5c6+a2XUnwb/2vJkpVE59ZfB33lOea3F1N8Ku9nvmvrP
bIM+2F8Kq97s2Ub99nB7C2/NIbJIBA91W/np/RrqPwhP3Ry8RSeA+m/A84Lb
zNXLqf8DbHWv788QWj+5A/vi+Yq7nfyyjvptYY5O3aSAD/T9hwB4guMev6Vk
eRL82DymcTtZfQ1uK4rwClPT9x/ewVkTu12f9Iq+/9C/n4rfbdnpZ9ZK2v/x
4OG285amvqbvP6yCl30Qf79Frk+At3uWzp3/hr7/cBUOvzf5Yio9nvcWrne6
M6f4LWNRn/54v38Pm+tKllrD0c6tCRPICn94X/rAM170eNZ+WLl36gBBL+ov
gkVG/Usvsam/GS5+OXTq9960/NkDVPxmhWSxpTYtfys4teux7rt0aPn7wI5x
8rgAMicW3rI7xnndEFr+F+GmXb4tgoG0/F/CO5477/xClmnrqvhjZqXVfCPX
T4TTvzW6aAdT/3I4+ZtbyIUg6o+BG1aXVF1YR/3n4VElL8JNhdRfD98Z7n5/
B1nRbaCKP8y0zX/OQuofD6ccqwpssmLM9YLPu3WIbp9I+789MOc/rYumk2j5
58PqCtGAxZa0/Ovg/XfTZs0iq7voqfgyD6P2Jvo+C8cCVm7O/WNJFiyBHd2G
KLPo+cURsFT2wmHYAdr/y+AnLMuGkH/7/2fwGGv279c82v9r6qv4sy7sZo2w
o+OfGezk+lHjly4d/xbCT2/0HhVdSfv/nfCZqyab5j2g/f8p+AN/0s19N2j/
Xw3Lq5d8MZHT9186GuB4vGJNpm0hff9lNDzbuJtxBk2XzIP/FBuHnybLxfDd
jjlDdpPVJ2Crx3fVO67R918ewUkPM8+0XaX73//8ffyurI4v8+j+9xGGGI9N
DrGfX0T3v7vDhdpDo3xy6P737bA4s3PM2KN0/3sOPMWz8b7nKTr+VcERjrLH
j87Q8e8nbFs3NklJ06XGg3D8qZjuuZGmKwSwz7gH011OUn8IvGnsoOEJZO5R
2Fe47vgusvA+fNSw/39DT1P/N7i2vs+YM/T88qFGKn6fbXo1x8nq2fDNs4E+
Q05QfzD8IHfx1v3HqT8Dvvf6S5enGdR/F/544pLV+Uzq/wJvuRV6Modcz+Fg
PDVhfnkCzc+eBceeuzVuL5m3EV6qcWZMPFl0BL4miXtnTI+X3oIjmz7+6kZW
tMF7z8kW7SCzBg3G653e8WufMOp3gL9b+bRnkIXr4HmeKSZX/aj/ENx86HnM
dbK8FO5p/u3xKn/qV8OGa9ZmmNtTv/4QHG/f3BTOsKP+GfCAC6/KLtpSfyDs
9eB5+dHp1J8CW6knDz5Err8OHz9TciiGQ/0t8Jtl5+9JB1O/7lBsH38e57kM
pf7pMCcp3HJif+pfA09Zmz12Zj/qPwBnBXSLX6VN/dfgkVH+yRZdqV8Fv5Hw
vnl0of5+w7D//TXAJ1OL+m1g5VrfcebdqH8lPFHP2j2Vpqvj4Y1BVV+fkznF
8K1xz9y6alD/G3jE2s4F5xrp+1+9h+P1dIl/bFlL3/+aClvOcPJpeULf//KD
ozzPSxa9oO+/xMEBwRPvfSfzLsNai2WjutfQ91+aYIvzT543kqU9jTGe8rLM
SXxK33+ZDEfECI9EkVk+8NzH4xYJaX7uf3DGBysHu2f0/ZcLMOvcPa9dNL+k
EVYkruFE0+uT9zBR8Xf6HxeufkTff5kAR9Rad04hc5bBi77mjyi8T9//ioZb
Jcpjryqp/xz857hlt5+Pqf8FrKO19r5OCfVrmar4k/zPr9pPZlvC0d8L3l+V
U/9SuAPHeMBimi6KglsWqF4vL6P+s3DDiQslGeXUXwuzbLQyO1ZQf5cRKv62
5oyGWWSuOdzttUGwEVm4GE46eWXX+Drq3w1ffuilrKyn/jPwjcqKwLNvqf8p
fPJa/i7/L9TfaSSOD3MDv9Z9pf6xsCqvefLsb9S/APa/Fhz35Q/1h8MKVsXa
7Sxa/3Phy8k1+pdoOvsJLFnimN2RzOswCtO9J/jGk0Wj4Isnw//bR5Z6wGuK
pmcHkhVh8KA1SV1FZNYJ+E7A8oontL5yH8Jj92V2T+5M6/9vuKlo4ubjtD1I
TEer+AP/C3V/R5a7wfo9m1w/kdXb4AerGmru0/bEyYY1Dry2f0oWVMLya9/W
vutI2/8PuJPPO+3cn9Q/fAy237uCUcH0/tS7wIceTZhQRe8feyt880JJoT1N
52XBGv0+26SRRffgU4o34zp8p/6vcI1/dLA7WTFkLPa/zgXVfen1smbDfVd0
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
i2j5D4lQ8SvFWTvN9tLynw2zZ7XpjI2l5b8ZDvTzWekYScs/HV7bsHp4QwQt
/zuwrPr624Pk+s+wYoFXxVEymxOJ87ObAek5dL7Hc4KlbBPu9I20/DdE/v2+
S1W7E/196WH4Wqfg8lh6vKIcPjv35sBXtDxZbXCPtjWBLJqfaxiF80vPQt07
4bT8Z8KhvyM+X6P1VRIER5fvXXODLE+FjViPHI4HUP/Nv9Pf17UsInPUsIae
Sy+7POrX26Pid1Za8kryqd8Ofmm10nThOepfC4/PGT2/9Tz1J8ORp3YbbCCz
r8OfT9WPOVBI/e9hgf7tcx+PUf+Avdj/Vo4U/syifj7cN/PwIItM6l8NDwlP
Gj8hlfoPwG9SpjRfJnPl8GZRh+uWh6hfCSt8XPJun6b+vtHYfrZFbCgny6fB
keaLH3e+Qf0r4KN+vvPW0vVnTjwsL3pyIL6A+q/AJyxTzzleov7X8JdX9+om
U4+sV4yKP+rh6pOnrlP/FHj9Vrb7zVvU7wdbZl91E9L+kCeBi5XpPovvU/8l
uHX6HQ/3B9T/Cl7kP23S0FLq19mn4vfRnpSaUUz9k+Go0oLGNxXU7w2nSvQP
G9P1A+E+ePzyiuHVfWn9L4Q1XZ+HTXWg7b8B/t1q8WjECtr+u/+n4l+W9xh3
YAtt/xPg0lstbMMNtP0L4aWnD1kMIov3wu+/hGWXkmUF8LT6lwvXnKLj33O4
hcWePpGuF7C1YjEezw3OvpNG2/84WK+vreeMEtr+PeEpDXfnCcnSSLjLRo3D
bp/o/DcPXvZ7U/pSfRr/1MKnv2TYbCNzO0tU/IqO346VudL4hwsfCn+4o89c
Gv8sgtvtLoZHkeW7YKfNKWPyQ2j8cxoeu6tVR3srjX+ewjHd1neJIws04lR8
/h2XmIhgGv+Mgbu/tHn8OZTGP/PhUs5Rs05hNP7ZAZ9bEa6jT2bnwlmzN32V
0HiN9xju8ngI55WExn+s/Tj+vm94NY6mS0fC+snFtmU0/lTMhX8Fl45rI7PC
9v/9/Lxk7w8y9zgsHXJfN4ssfAD/jng5LY0s+QVvCS6IyaLxqtwkHsfPbcHv
y8hqV3hvnX25ayb1b4v/e/3CdMtssuAYPGCj3Mgsi/oV8PIZBrOVNF32Hb5t
+LbvUppePywB52v+G/WPp1O/C6zRuc+m3mTeFljw7aGfMoP6M2GVsXXIv/ml
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
XQrHaIEP7JTb1uDrZ+aPgocb7lm5mt/XvRBe10/pzhh+n+AWWHjUKuy1lOs/
DixD+XR815ndTcw/C85r06FTPusTwu3wqAWNIeG0Yzj86PPnva4/mD8PTp9+
8/5wft+03/C3utmGV/j5sv7lNWKFCw/sflYzvwTuFxRpZFfJ/FtgFdVxyya+
Zf5QeOT9aQkXeXzjnsM35ft5P6QrfsDfGn73bfOe+fVeo36sFdT9E39P0YzX
/+ZD5shvK2b+jfC2qEzDaP7+wZfg3eH9PobRuVnw8Bu77tqmM38jPH2dXvKM
q8yv+6ZGPK3Tq789U5nfEv7TFPJc0lr/Ww+fWCTcfNaX+S/CIx00A3/Rssfw
bd8R+teGMX89PCznyvgEWtKrokYslX7NrR/F/FNgnxM1qZOsmH8dvGJ6jKuP
NfOfhx227E34ytcFmXDSdKsYkxnML4N9VzycOduc+Xu8Rf1+x/y0ZK7PGWwO
K1//7W5izPyucEGbiEGDpzD/2bf/+nOH9zooZv50OLJ+XSfFMcxfC1fmpu3/
RPtrvkN9f3H3wZb8+zQxPH9h4YUfk5h/DZz4bfDiGkXmPwX7lri4HFNh/jT4
ZudFc2dpMP9nOPaPvse8HsyvUYny8FHs9CX6zG8Cj9lWdaANLVgFL9zxrcm2
O/Mfh62evxq6qRPzp8DqKT0bLiozfzW866gw9+UP1v87v0d5dqDjq/b1/1vO
GD6RcTxymoztn+Xwu73zDOO/sv3jD7+9Z7d6Qg3bP0mwq3vg2ZgvbP+8hzeX
By+s59/LOn2oEacUJ80I/8b2zzg4U7/9XEt+nsQJnlLtfnxUA9s/h+FUk2KV
g3Vs/9yGA1/vqxLRFW9hi4GD5urw/QWqVajvLK8fX8z3FxnBDYf3hbZ+nrsj
nFf0blqUlO2fA3C7Ktet0XTuLfhBvHim92fmfwP7lS4u061ifpXqGvHDELdL
K14w/yj4l13kiw+0/yI42Sr8put75t8HV8UfP2z0gfmv//v/sdtm55Yzfxk8
WuRRZP6O+ZU+1oi/ynX3rc9nfiE8R1o127yA+efDMm+f7855zL/n47/6sVK8
Ky2IhbPPWqkr8O9FJfDdtplhr5OZv+0n1DfqlXd9ZXsyeChcbDzoVmxH5p8D
W31pKG2rzvy7YLNZ+5Rn0sIY+NCwUWYXq9j+L4KDy142+L9h+1/uc43YekL9
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
4n467sXw0fo+L4v5PCm4zSi0T4fl/PlM5w6Bi4P+Pr87k+XZbNgn1vRD1DSW
Zz7w6XFfpUHcb8cxCh7yonFrD+6v418IjxrSNawjndYCb2gTk6owmvkHjsbv
f8g0cDXXm9adBe9cG/nq1UTm3z763/13uVx7E+YPh4/HppRu5nwwkcRQKs53
GdSy7gvrp1vg4Q9DP63k+uDBoXDT3wyBB537HJ5YMmHiCCnrpz/hzWFntmtw
fWihnhG+XwebyTV8fuU4A56xqc+GlVwP3X8jHCtYmx8WxfbJJVh6yLF+NdeH
l2XBnTa/MVHievK6jfD5aIOw73xeJdEdg/t/u3j9n2Fsn1jCk889+1UayvbJ
enhX/5EZ2iGsn1+E/+hdOylHC57ATdusE85cZf28HnbbsWheM9/fvddYHP/Y
8bva8P2Dp8BvbdPTf3D+VO46OPRth/nnud+C3AX45k9n5YeezJ8JRx9tu+op
7SiDX+QUPT1wjPl7jEP5MMvZRYXzR9PM4bbvpmh15HwumSussPNYeDP3X9A9
C8/xUBv2jJakw6eXR5V25f4NPrWwp/7hK8f2M7/meNx//mhqfuD7VYjh4xeX
POrYOj/NBc46UVnfja+LTsGrpM3DEmj3NLjQIvzWSL5f8Gf4wPIe4y8fYn6N
CWhvLT1ntJ7fX24SrNC13yVxAPOvgpU3ZeXk8fmh43H4U+yHPzl83T8FfrOr
4GCv1v0pquGr4SckVfx9ZJ2NpWKrqLm5HrSuMby9zWJlixPMvxxu67Tv/A3a
xx+Ouaxgk9u6P0ESrHlr5KY/dMV7WCX9p+ZvWqA2USp2FOqdOMf9DkTj4JBe
Ixw9+Lq7E2y+PWea2x7mPwz/GbeizTr+Hrm3YcHY3Q9baLl3sHLg7SJLWqhq
gvJSUUHLmnY0gruYlZRuaD3+jnDG9emCMjrtANw3Y97wSuaR3YIviOYG/jnD
/G/ggq7TJUu5H4NEZRLqx5szSrvwfPUZBfd41TzVjddL3CK4aNVGd9/W/Rn2
wT3HJ9bODGb+G7BOw24nc57PojL4XJ1h23N83V1JhPLwofvPTF/mF8KGSZMy
29O58+EuH8y8rvB5r9xeeNESn0Yznj/CWNi1z9W5q1vzl8DTeva0XunP/G3F
UvHG42d+x/N8kM2BazcNeeTEz9fdBe/pmR/Vs/V6j4EXm03Ke8Tfw6cI/rg+
NOIIn5/HyZni/Jv75uGOLOYdDHu0WzZdh8/bBfZw+jjT5xG0yBvu75k2sk8W
y+9I2Njfc/Dm6bx/FcB5Y5Vt19jw/tUM64tHVmfRcgPNpOIxX7rNG7aU9y9b
+MmbT8NdV/J+vA3OmeQ1SX4F6yNXYO2EOJ+5ubz/9jfH9ePW0e/9a95/Z8K2
+s8Vd1bz/rsZbogpe7buG++/l2HtPBfFTXTFM/h4m9OjV9OCH3CqXMzbwa3z
zfpaoL6RvNXlV3v2N02HY8cqb7zfjv1LwfDfyqYtJ3qyP6kBXi9bdOyLBfuT
dCZLxfYLnWK1JOxPmgbfefer7eo81i884cFfb/a50JrnMVwU/u3nEn6+5Bvc
ZukA3020j/YUqbiD+ciqX63z5ybDxhueHtn4h3ncYce6G9GWv5nnPGw20XTo
N86PEz2Eq8IrRvf/y/rGF9gtQlFeRZ79Z92non42KH6XtjLzmcHfTxi2q2qd
P+cKz3ezUHnP30N4Bp6g6LfiBP/e8QF8Qa1fWCrtL4V1mg5nflBl/1m3aWhP
1VyYHcr3k4mm/auf2bTsVWf/2Ro45W6mwg3+npKT8Pa64ke6tE8qLFmqtchC
i/PHPsFyltNlCprsP1S3RP3IST2zmZ8vMIFnXE56ZsrjJVpp+a8/YKn8XmMe
z2Nwrf3iZz4TmT8Znpud7BlI51bBX9Te3dSh5TpboXxd1u79GVo4AVas6riw
N+24DI4+1UFn+CjmPwoPsLzqEMn9NNMS4btOUt0j/HtZJVw3fF7kLFPm7zQd
5/vAF2W+5sw/Fh7Rv+GsyxHmXwq7nZyS83A/8x+CG/RaRn0/yPwJ8NeCdm3G
mzH/W9jO+XXGPWvm7zBDKp5+3cznHH8vd0N48dXMxn7dmN8BVt3u/Xpad+bf
Dzd2Uc3V68L8t+De8UaxO3m+CV/DKx/cMzDn/EfHdtY43k63rL6zPuw/Eh7b
x+7GyPs83xfCnb7NualOy3zh7IlP96Uk8fy/Dq9ZsGzzLNa/Ja/gIUkPVCxv
8/xXnInr169j1133eP4PhweWbqnefYXn/zy4KO9Pii0t2AMv8V6uP58WXYP7
u33eZki7v4RnhUSsEF9geSUvQflWd2hq7GmWVwbw5q8+1f3PsLyaA7tWNj/W
ooU74TFf67Nn72D+aPjt6wJFI3fmfwHLa28aaUGn/f33fpYvfwawvSUbZCMV
OywQbM1xY347eMDCGAVfWrIDDtja9PvROuaPgFfeMV10hOVhXD48dpjXxlz2
B1f8gSd+3ljqxPJUoG+L+n7Kx+etFtnAB+S33n1oz/xb4bg/+y6fYfsjOAyO
+eotn8b9uXNz4MqLfWb4WTP/L1gsnDx7Dst3Yb9ZKG894m0TOH/b0Rp+UZI9
RZX7j/tvglWLa+6d4/6uaSFwenPCweThzJ8NHxLOyV4/jPmbYIVMZ8H+oczf
x04qvuh17O4Ctpd9rGDDIb8ejeLzojgveG9vjb35fB5aEQSvKvr2xdKe7Y2n
cO/dn/b2t2b9/Dt8Jbnr+x2t++f0tpeK3TvMth7A+nvwVPj1lhWj8nuxveEB
52t1KN/M/ZHkAmFd55bgZu7XInwE6/QwW+tIO36F585WGdiP+7/495yN9nTs
8OC23M8lzQIOOdriufEO79dusPl8uYSX8bxfn4M9Op5rW8z+ZUkGPP9xxx9X
WvePqoO91sRNi2F9J05rDo7XdWv9Iq5XUGEKawYNVt1izfv1WlgU86iD+Tje
r0/D0qjUtW3ZH+t+HxYavdO/zv7I4Bo4ONHw4PKL7D/oOhfH51Xc4M/sD5IT
wXOdS964BbL/YDXcIbkkuY6vO56A7dqbGadcYP/BPbidw4LxysfZf/ARXq2f
tijjFPuPusyTil8urhJrs79WdyLsNEOzoJH9uZIV8PcRB8r7JrD/IAAOUSjs
JLnD/qIPsLy/5rFB7O8UCOaj/J92Y+Ev9ieLxsPmvnduy7H/1N0ZPv0lJEPI
/uXgI7C9i1mVEvPn3oFXW4+YsySLeSvhrUPcHRJvMm/HBVKxs7LI9Bz7kx3H
wEsSepsVs//Mfwk8x/OqzuhI5j0IT5sb0LKP/c2yeHhChcrzksvMWwH7mFw0
lAUzb/uFuD4HzHVYH8K8o+FtwzyHePP3ilsMe6iqhM3yZH4/+OFHy3OLNzH/
TfjvvB5Gy7cyfzmsVZ+RqrWd+ZUXoX56f71S9jbmXQCfHBR9143vJ+cLK25x
GLZ5MfPG/fP0uVE1tGMpXBWvotvgyLwKi3F/KAvR1OPracPgd9VfriXxddlc
2D/R7P3a1v7h3bDOINW26lbMexW+GHRET0j7FMMztrtsmkvHtXGQijWiO/S/
zv7giiFwVmF+3Xb2Hwtmw7ffTYoNsmdeH/j4s87ivPnMGwWf1o9Kjl7E410I
9/pxvimar+e2wOlLF1YJ5jH/IEepeJCT1dHPXP9KOAt2rRk85SvtuB3u+Xvk
xoQ5zB8ObzeyCPlCp+XBafrJlw+xv1b2G55o8LDckN9Pd8ASqbjPi02/jjkw
vwQO73b//CPaZwucV/BlxXX2n1c8h1e2S1p9k+MPBD/h78ozPmty/S2R3lJc
f/dDNxbw93WfAfeOkb/0eC3zboTLP+T+9KBzL8HbF1uoybkwbzasVtNuujlf
FzbCD13HC2fx/R11naRilxjj1Fdcr9zfEj5TcOP4FPa/p62HPda83XKzE/Ne
hDsWRkgCBcz7BC4zrvhh1Jl56+FBUV8OTenCvL2ccT/eWLI8UY3Hewo8zKgk
dhldsQ7eeLivwWJacAEuz/7czYCfJ8qEJe81G9RodxnsN3FM1Ao6uMcyqXjt
o8zqFDrXHJ7+ZsQglXbM7wbPvlD/cloH5j8LFx0xyv3Rlnlr4WPHl4YUc/+s
NM3luL+ouLp70TIxXDVg8PNLSszrAjvmdi9xVmTeU3CvB4cnT2rDvGn//n9M
m5Y6Oeb9DO+La9j1g69XaKyQitv7TbxlyM8XTIL1D56f2aM3866Cw3YaWB+j
3Y/D882trC/0Yd4UWCFBNUrUxPXvqmGl3TsG7qLluqzE7+1U1Nuf628LjeHF
RiO63j7N8Q/LYVe/T8OeHuP4B384WznLYArXj05LgtcWJc8aQMvew1Xv7h0P
Oc7xD2qrcP8fvGaMB/9fMg4O6hPhf5XrUfs4wa8eJgmf0XGH4YpGyXxXuuI2
7F/erv8Lrq8teAfrpv16Gsf1uEWqq1FejKy0G8bv724EX/ujqH39Ftf/c4TT
j4h6y7heX+4BeEh+ZodCWi4eVs148MOb7yd8A9s7/fVW4+c5qqxB+z+9tEKD
6xP6j4JNhE92FIYx/yJ434qMn0da1//bB18Yv/W+mO+newN+2278hoNcP19S
BjttLD9kxPXmfZRcpGJTp4UvAlOYXwhnWuqOuXmX+efDc76cL+vO9dkFe+E3
8bIZ3bmepCgWNjrSO1pjOfOXwCU+8Y3j3Ji/7Vocj1hh4+a1zD8ULrq/NOf9
M+afCx+Ykdd4mhbugu/IzEUxWcwfA09wqpbT5uv+RfCo1VZxQRXML+eK8v2i
y5CsV8w/GD6hcaXP2iLmt4ebI/sqnSpmfm94b2hpycYS5o+Eo4Y5jLSj4wrg
wTc3Cb7z7yua4YjR91N304KBblJx4AY9A5WXzG8L597NHiv/hvm3war3J+kN
LWf+K7BUw/mKUynz58I5hYvL8vn3cr/h7rLdVm8qmb+/u1Q82eVP2HXacSZc
4lzf5Tvz+m+Gx9YtNz/K8Tppl+GHmSdWJgzg9f8M/rBlev1xTV7/P+B1e+eI
D3F9Rknfdbh/zf+RPawbr//p8MPiF4o+LD/jNsAdnvQeGqbB6z8Y3vOmS/o1
lleCLHj3wwcqe1ieiBpg2+KbXmNY3rjreOD61ZpzxaM7r/9psI+Gu/VVfn6u
J7ywySLjGy13EQ4/3XPI5L4s7x7DG2IOlQdwvUjHb/CX9VbjlnK/Cn9tT6l4
Uc/YlXl02mR4htmi0HccDyZzh7O8M2vkW+/v5+Ffae1j2y1j/ofwsYabT/d7
Mf8XWEnd4K2JL/N3X4/7iexdxACOF6wwg8t7qPvPYP1U4ApHLcpw2cv6negM
bJ31yH5eCfM/gGsWPY3tyPXKgqVw16zUmtrtfL7WzQu/79SBZ3K8WX8Xw/vO
/xi4m+NBhGvgxB8Bb+y4fpbjSXjq0a02/StZf0+FI8vzZhvXsP7+Cb51+mTg
sNb9z9U3oLwr7XL6Vuv+nybwwiDTuv7cb1qyEu5R61ibwfEePsfgq+ox0wq5
32ZcMuyWv+VTAfsfKqrg3hd/dRzC/S0FnTdKxf3mCzuHjGf7ZQL8c81tpylT
2X5ZBq/ulDLu1ly2X47COQuDVOtXsv2SCPutk+4t3c/+kvf/3u/GuvBRB9hf
0mmTVHxvwn7R+bPsLxkLP8rbrvI2kP0lS2FP9/VqNpfYX3IIzrk9qPj8NfaX
JMCrpzkcPh/D/pK3sNaorCXXaEmHzWjP7/uaVsnxDT6GsL6ng2hVBvM7wJL8
837L2R9fsR8+PmrbiZ592X69BWf6+oXqDWT79TWc4lFqaChk+7XdFqm4MLB/
YTP7w4JHwi9Gm6X8ZvsxdyGcv9z2yq0RbL/ug1euzjF+RwuvwwVly00DBrH9
+goOE4lrNCey/aq4VSrufMN2yLvxbL8Ohxe0dz2sLWb7dR68W+/941uT2X7d
A9cEPXDI5PeTXIOdA+fsc3Bk+/UlfDBpZMRkPm+Ik9+G+tjPs57rW8d/G8Aq
vWJWDmZ/qmAOvLZFbsr1KObfCftK1C16nmT+aFhH2M3X/ybzv4BXR/XvEcXx
5bl/4fQzgqTLlcw/eDvuVxFnNUP5vFNoB1crK71MUeTzqx3w7E9yeUZ8nuMf
Aff70T1c1sT8+XCBQ9GAgXxeKPsDS8bfM37I54m6+juk4i4L2iamtT6/tIFT
XIeVXuTn+2yFfQ28e82j48LgAx7lX8e/Zf4cuMl/dVTFZ57/v2Crp+4XTRby
/O/njfbn9o0CK0+e/9ZwF6nz5YsePP83wX3SU1ZeWczz/Rl8YuXu90tdeb43
wT+O+k2dwf3SHfv4SMVtbyj/mNq637sVHNor/MFmrp+X5gUvV77t68v97WVB
sMqOSXIa3P9V9ynczaPT3Hp1nu/fYf+xb9cJW/e77b0T7dPE5WmLuB9u3FT4
Zk9D4Ri6wgPuO/mvsQ7fXxAI3xGafR7F8fGiR3DM7gnWK/l57l/h8fvW+tqy
fzG45y7c/xLbvgpo3e/eApZ0WXnqYCbLO3f4lo2zw81ElnfnYGfvRQp2SSzv
MuBui0rGilJY3tXBFUVjVV7SaVq7pWLDrHMpluzvk5nCjvEj4qvYv6i7Fp54
96T+TvYXSk7Dlys0u4Sxf8LnPpxTu837zFE+r6iBF6mN3jOb/TMVXfegPOhm
YazC/jiBCF5ZfKpnZ1q0Gr45fdc4bZbf7ifg7n9zGiq53mjwPdjv74zEkNb9
3j/CnebscY9mf6Sc+l6p+PN99aWNHD8onAjbfny7fgj7Ix1XwJMKzyXIcTyh
fwC8LtAuNIP3h7S7sM+JHmczHzD/B9hb/1TkQVpX4Ivvm9L7QQrnJ0jGw2WH
F8+6x+c/Ps7w8/6fz6TQcUfgLvVGXkNfMv8deMw93cizN5i34z4cv7fvh0/h
8yH3MfAu079PSpOZdwnceVhIl1u8P+UehGs7l80+xPkTcgmw7yr1qpMNzFsB
9xsn2eciY972flJxdPMDw1u8n/mPhjsGutqmtN7fFsO/n7UzH8bzSeYHpw9L
c/7O/indm3Bgdlx7Gz5/kpTDY+YF1s7k/to+yvul4soXuuM8+f3iRsDdEz0S
e39m3gWwjrHqN1veLwW+8Lc6l6lveP2I4mDJq22Lj3N/aPdSeGj7RwVdDXl9
KxzA+Vy1bFv9WN7fhsHayw20+tvwep8HH+7by2i8Ja/33fC8gOaFCnG83q/C
XS/UGwRzvE1am4M4X3J/3VjD8TmyIXCXeTZX7tO6s+FIeXfH/nx+KfGBL0i3
vxbz/uATBf8ZsPLwsNb1LAthM7uhqxWnsDxrgf2ak33DprI8H3QI9UXr+ufJ
Epbns2CFqIkBY2xZnm+Hh4dHlo3m+pfB4fDrN8v77uT9Izfvn71WbjKg5f7A
c0y+hG+khQMO4/i6eX8IP8v7mQSe3DSzrpzrF/pvgRfcGTxXwP6jtFB4Q6+P
Raq07Dnsu7vDhGk1zP8TXhjytGIN7xcSvSP4vbv+HXu/A/sjZsCav69v3UTH
bYTlDSeUfWR/TsUleEt2F5tl7F8QZMMmk+Zul/Rif0QjfH5vyPX1OuyP0D0q
FT9bcPbbDs6vCraEhZpmC63Gsz9iPWywa8+847RcEPxiaHTYFRH7Y57Aswoe
57dr7X+rh9ff2pdg5cT+mF7+UrGaoUJ84nL2x0yBZRuKvfU9eT9bB3tqWF7f
vJn9MRfg6/e8zTT2sj8mEx5xausn89PML4P90uuOd7/A/D0C4KhrjbLW+Wzm
cPjFmL2H+LrADU7WH2lry/lrorOw1vILn+ZEM386POi6nXJDFPPXwiVPXi+2
i2R+zWO4XurV/Qrjmd8UvuD15sCqBOZ3gUvGvw2s4fqLjqdg0UChkw7/3j8N
ftPeS7z7DvN/ht0SfJ1cEplf4ziu35p+PVbQupPgWQsTljpmMP8q+PTT9Hqv
TOY/Do9Z2M7T6RHzp8AX7lu9DKYrqmF1t5pa36fM3+UEfs+QFQvf5TK/MXxF
/fPONp+Zfzm8S0fZs/0n5veHh41XPRFC5ybBby8d2qPyi/k/wPcjNl5+/JP5
1U6ivListf+YMeczjoMnzHFdaybifEYneOaxK3cncL5j2mG484CCWp3RnM94
G146q7JTI6377t/73Uu8PcWE8xlVT6E9eyO/s68R5zMawUHT32RdFnI+oyPc
OS12uz5dcQBu65nvUTGC8znj4a0bf53Qp0Vv4Pqxs+eWjuV8TpXTaF+7uulY
j+N8zlHwvT+y+VPGcD7nIvhim3LBLn4fOT/4eVif8ieTOJ/zBjzTvM/wnczr
WAZnbjpxpKM58yudwfUzLr/McgbzC+EQ82btYbRsPtzvQ/d6J2vm3wvHmygZ
PaMlsfDu3peHiiXMXwJ/3XS6ZBPnk1YMPYvv17J31sf5zDsXDj5m6XR+AfPu
Ovvv+UXi8zzOL3WPgW1fn2qbN4t5i+Dvh8/tNprLvHLnUL8JSTbQo+WGwJei
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
19OuwC2LYqXanF8hy4UX1bxZ5sP5MLq/4SMaAZKy1vkm/R/jfudb/20G5zv5
zIST926obt1fKm4zfHHZ+4DBrfNNLsOlgR83pPH/Bc/hgF/emdGc7yH6AZ/e
cV768zT7C/o+QXkpa8jXYn9N8HRY9rTDmK507ga4duzClSe5f5vcJXjv4bVp
AcrMnwX3Moo/EKrC/A1w7IBKpRftmV/nKdp7R/3rvPn5adPgDvkm1z62zjfy
hCdMi3Cq5+u6F+E5vnX7BK3zjR7D1q/t/RLZH+TzDTY7F/Aq8jrza2dJxQO9
ij6/oCsmw+3zYkdNY3+IYB28b96i2OnpzH8eTn4T7Xn1LvM/hF/JHtgfpIO/
wJOi9m+tZf9XbvdsnL/VA4Jl7G+RM4cVXQ18K9m/IXSF012DX3/ifCz/B/Be
kfu2JM73SpPCvs1Cm1TuVybr9gztQZHI1XI584phlS29LfotZd41cPWpPjGl
S5j35LN/4+tz3u2n41Lhe/I1JrZcv6niE5x/48WiLfOYV+M5vLedpNiBeU2e
/7v/ZkfaOTHvSjhketeAqNnMewx+t3DrBa/5zJsMS6LmunXlfpJy1XDDXueI
Kn6esHMO7qdTAyNHcn9HxwlwWucDPRT5uv8yONC1KLCA3zftKLzV7+RhK/69
LBGeMTnr0gh+X933sNGVLubDeH5JOuWifhB1sTiE+1X6jIVDT29RS6XjlsKp
445bHFnD/Ifgmct/pMRPY/7b8DIXj9UONsz/9r+W7j2eqT+O47h7yK3IJRIS
pYulEFGb5JZKQkSZkC7KKkI3U1IqWiqVS033dJN01WVKFyoWKaRIpLDoxk+6
/N6dT38+H9vsvPY9+55ztm8LvvWiqUmBft+K1/8Z5pMzTQtrp1BvMOyduMFc
TL8nIrUdnhp7Y90n+n0SViEsmee4fRD9f4vcN7CCcnNZEVmgWInjm5mx6rvv
tN7FCp6a8nRqEv2+VVcQ/LglXG0Y/Z6N0VZ4qOe905n0/zN6XYT9TQ5lXyHz
X8HXUk6sMH9D613kq7D/Hxo979YrWu9iCVtbKLXa/fu9q3mwyrI5jtNpPTI7
CXZZ2Zv849967fOwgqnV2jz6vShhDax9ff1r23Ja7yPzHPPPglHNnbT+mTUX
jhv56WQMrZ/mJsKnJz46N5UsOAM3LP9zT0T/f6qoGhb96rcvi9z1By5t26h2
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
19H487vhzEPlYv/n1G80RcKR7x0yK72F+j1g55P/uWt+oP4YuDcsKvbCE+o/
DMfmpeuGPaX+Uvi4X36w+WPq/wrvvj2fJVVO/UPYmF9al2rGlFG/G5xqomst
JLNWsf++v6onTab9j5sNmy6J0Ku4Sf0PYBnHRPVIGk9RF6zgZR9bcYX6B3Mw
nlP7ZynT62c0De7J3vJYhuwVBU84YMdOSKb+g7BarCF72g7qvwdfnXpWeRJZ
Q9dJwjHSTnOP3UO9TvCFyb8WzN9FvZGwe5XSEB5ZmAFLgpPn5tL+Ixb9vf/o
3W2iXOpthwX5D17GH6HeQVPx+t12GF6+jXqnwLZKnqw/NJ8IlsD92rImVNP7
X7QH3nTd0/APuesWPMc5YE8Q2egDnKP4WG3BOuod6Izx5qgFlND8y3eAa+8o
pS58R/P5Irife8YMaU0abwGc1DzORHow9RfBNhvcMlYMpf4WWNG6b/dYup2n
Pg3Hl9b30wMMqN8OHnIp90WkLvWHwgbybu4p+tSfBk9sy/zPx4T6r8FZJa4j
lEZRfxOs8NtrVRGb+lVccH220+tnHR0fRDbwCRcDzuJA6ufCd/c7ck7Op/4d
8IjaliETQ6j/MuzwuTZOI5zGuwGub+9N+bacxlvJFdv/IZe3cwX1j4dXqe5w
TyOzt8GTQzQvvqD5R1gPB3jXr6p/S30Kbjie7/u1MKCG+sbBejf0hveQWYHw
CWfVMTteU98W2HJ5YqeAricFF2BDv80VrmRRLbz9icEkFl2fdsm64/pYJvhW
BtloLDx7U9ctV006X/GHO735h6eT+Ztgx9X773oq0fnKWVjtjOBe4TA6X3kB
aw4w8JlrSucr0h54fSXSgQVk9ihYz+WY9h1zOl/xhYvOBDk+HEfnKwmww6si
L9V/16OnYddmy8dv3Ol85Tns1LpA2YDM+u3x9/uVWcvMl1Cv93S8/uXWhvXO
dH2yHuboVY01i6brkxPwn8W2w/W30PVIH6ypWeS3jD4/5g/3lHCmTrDJ6+5P
ny/PgvOG2S4u06LPl+Ph2C0W/mba9Pn6MTh/V6l3G30ezS6Hr8wrn/vQgj5f
/w+2Npiulz2FPl81mYHrg305YR1B9PmqJxwwb+zeYWSpWHjDBN89/afR56u5
8M+JijLabXQ99hhOdXYoP0iflwq+w3dFL4pVPlPv0Jm4vv71+2LmN+p1h1N9
Xl36qk+fr0fDHJ2C5wMH0+frh+Cfm9eEGtLn7/xH8Mq+xwW7dan/CywdPv9E
tzH1G8zC8WNX9k8+fZ6t4Qp/1pPWEJLZK+F3LwzGj1Ci/iz4/PGJ47N66Hr0
Plye0hixmXrEnbDfxpzry5roenSwl4QTpGDj+Zs+72Y5w6kNVqv7yNwV8NGp
i7pDv1D/AVjmsml1Jb3+XR3wS+Wu28Hm1KszW8LZWshWz59KvRy4fv0ym4f0
+vKXwRx1hbmh5Px98NqNSyeOcaDeO3+dWmwtGk99Wt4Szqe4zaf0JtF4Lobr
LnGXuNLn/eJ0eMVkm2c2ZKlbsLWYf/PGXBrPVvjN4NERiv70efmAOTgfKmWf
lScLJsEfnptt6/Ci7wvC4U7zU9t/k7t2wT+EUV84s6nvBnypR3fsA2/qa4ar
31xrUpxH27/QR8J5PufUlVNhNF6p8Iz5Z2Jfx1HPVfj+GLnvUxNpvN7CbJ58
35hd1GPtK+E0bRi7+G4G9XBh9dllpboHqGc7XFI/VLvzIPUUwkdGmTQc2089
b+AzqrYGMdnUo+iH3uGvxocfpR4r2Of1fhffE9QzH7afHiMf8+/7r61wcsG5
n44iGq+L8PvxehMqyPmvYP6QupPvmqhXfi7OB6+zIxLeUS9r7t/rZ5Hc9vfU
Ow8+u3XisCox9SbBwugSwfiXNJ7n4RHjspvPk8U1cN8wmz1yZClZfwknZJO6
zwv6vo41Bh4rzpA/QX+POxdW1ijlL6P7CxLhsw2z9P88pP4zsK78f7nLl1F/
NTwm5ub+usXULxWA+e+eZlDqQuq3gE1HD9yXs5T6feAPp/reKPKpfyPMcyrg
5W6i/lNwe3Tarmk7qL8KtrHjzDARUP8vOGjyyTMcMs98Hq7P5HaPHJZO/bPh
xeublxyi8RWvg13jud0ex6j/xF/7GBj1ydL3n2J498LqmZ/l6PvPH/C3lPym
WrLANBDnfy9XF2jL0/efM2GFfR+1bdXp+984eMuob/q6MfT971F4r+D7CqUE
+v73Kax2onZwaiJ9/9sDr5+1/K6Qvm/ONw7C+O/t08zMoO9/p8Ohzel73uyl
73/XwLytxeLw/fT9rxCuT7ZczjlE3/+Wwbn7Xc4uOEzf/36Dzz/pf6RKSN//
Gs6XcIyfV9pY59P3v+7wo8NxMil51L8alj+Xs/rHeerPgSfffldRTt+vCx7C
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
          "]]},
        Annotation[#, "Charting`Private`Tag#1"]& ]},
      {"WolframDynamicHighlight", <|
       "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>}], 
     StyleBox[
      DynamicBox[(Charting`HighlightActionBox["DynamicHighlight", {}, 
        Slot["HighlightElements"], 
        Slot["LayoutOptions"], 
        Slot["Meta"], 
        Charting`HighlightActionFunction["DynamicHighlight", {{{}, {}, 
           Annotation[{
             Hue[0.67, 0.6, 0.6], 
             Directive[
              PointSize[0.003666666666666667], 
              RGBColor[0.24, 0.6, 0.8], 
              AbsoluteThickness[2]], 
             Line[CompressedData["
1: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
VdaTUD71f4bVmyq3WT2h+7+NNFR8m9Hej87w6P5vJ7i9fvTHQ/0Y8zbASyef
GnQ9g+7/PgxfuVikdzOSsbQcftjBdmDEDsaKj/CbC+O7lWxnzDLspOIv9Dcf
ExzKmDsT/hL6ZQtLwFgYBKeNP7G4rwNjSSqcsL7/m6RpjOU3YfO8ib69ezFW
f4AzD3JHf2cz5uhpqviBL9x3vLnE3B8usIOXbJRe909lLF4LPxicmjfgEGNZ
MmyxPExr7F7G9SWwjVPf4BZ/xuz3sLn+q4Hhp+n+7wGdVfxLesHDn7jS/d98
2GCr7arIgXT/92rY4gJ7Z0wV3f+cCB801CxzO0f3P8vhpC2yqB7RdP+zEo59
Yjfiy166/7lvFxW/OD/qqBlNl0yDr/1e5+MTSfc/r4Cd4rZlJP9H9z/vh789
b7tm/oi5/4xzBW4o9dawespY8Br+b6B/UMh9uv+3V1f0+Wqt/byHuX9NNgUO
dtnoe86d7v/1hU0vsNgDljBmS+DOWxM6T1pA9/9eggXXtt4Ld6T7317B/VvL
0g46MZbqaKn4q1KH6pXRdMUk2ODnuG+1QxmzvGHdxU8SVIMYc/fB95Mj3wQb
MRYWwtp89rMkQ8aSBnjFsyvrjnEYy7t3U/G3mlZvdB/MWD0eDnrWNnCBAWOO
EF4wtCL05UTGgr3wpiU/810FjMUF8MUo3Z8G1Ct7Dne9k/ur1IL6u3ZX8Q8k
nQ7xpMezx8HyLT6Lr1fQ/X+ecENj8LbWUsaiSHjNBcPc8sd0/3MevDlrx4Cz
VXT/cw0s2H9pSdpNuv+5cw8V/9itHF1jHernwu6/d1UcP073fy+C3z3lr7QV
MstPsgveIWi+mr+Ysfw0vCxKUPJgKWN1NRzK1zk2bjUtfw1t9Ozx7CxZS8t/
DBwma9JbtpKxeD6csDBC++oOxrIdcPmKUHHsTrr//SS8WHYs9jeZ/RjuXPi9
JCmR7n9n6aj4Q/57qXUnju5/HwlXzY2pHpRN9z/OhWss+VdHnKH730Ph1UYR
cew3dP/7cbhAubhTymu6//0BfPR2YoiDkrHwF6xasPhlFFli0hP7w8x33cUq
6neFLe6NS9d5T/0hcNWA5bOGkznH4Pfje5yPb6F+BSy+rbuj70fq/w4HBQRf
LifLhrFV/LGtR5Mnf6b+OfBe26aEfv/u/98CPz5xNt28hvoz4Tkthj93PaP+
Cvbf7efG6xCytB1OKrNf6ElWDO6l4p87OGdd33/9znAeZ/3s/W3UvwmeUGby
OpBer1AKb26oKBVSj+Q2vKbhsXXFW+r/BI/dcWKtD70f6kG9Vfwt4oc2fDLH
EU5uFSUFt1L/etjc5c6+a2XUnwb/2vJkpVE59ZfB33lOea3F1N8Ku9nvmvrP
bIM+2F8Kq97s2Ub99nB7C2/NIbJIBA91W/np/RrqPwhP3Ry8RSeA+m/A84Lb
zNXLqf8DbHWv788QWj+5A/vi+Yq7nfyyjvptYY5O3aSAD/T9hwB4guMev6Vk
eRL82DymcTtZfQ1uK4rwClPT9x/ewVkTu12f9Iq+/9C/n4rfbdnpZ9ZK2v/x
4OG285amvqbvP6yCl30Qf79Frk+At3uWzp3/hr7/cBUOvzf5Yio9nvcWrne6
M6f4LWNRn/54v38Pm+tKllrD0c6tCRPICn94X/rAM170eNZ+WLl36gBBL+ov
gkVG/Usvsam/GS5+OXTq9960/NkDVPxmhWSxpTYtfys4teux7rt0aPn7wI5x
8rgAMicW3rI7xnndEFr+F+GmXb4tgoG0/F/CO5477/xClmnrqvhjZqXVfCPX
T4TTvzW6aAdT/3I4+ZtbyIUg6o+BG1aXVF1YR/3n4VElL8JNhdRfD98Z7n5/
B1nRbaCKP8y0zX/OQuofD6ccqwpssmLM9YLPu3WIbp9I+789MOc/rYumk2j5
58PqCtGAxZa0/Ovg/XfTZs0iq7voqfgyD6P2Jvo+C8cCVm7O/WNJFiyBHd2G
KLPo+cURsFT2wmHYAdr/y+AnLMuGkH/7/2fwGGv279c82v9r6qv4sy7sZo2w
o+OfGezk+lHjly4d/xbCT2/0HhVdSfv/nfCZqyab5j2g/f8p+AN/0s19N2j/
Xw3Lq5d8MZHT9186GuB4vGJNpm0hff9lNDzbuJtxBk2XzIP/FBuHnybLxfDd
jjlDdpPVJ2Crx3fVO67R918ewUkPM8+0XaX73//8ffyurI4v8+j+9xGGGI9N
DrGfX0T3v7vDhdpDo3xy6P737bA4s3PM2KN0/3sOPMWz8b7nKTr+VcERjrLH
j87Q8e8nbFs3NklJ06XGg3D8qZjuuZGmKwSwz7gH011OUn8IvGnsoOEJZO5R
2Fe47vgusvA+fNSw/39DT1P/N7i2vs+YM/T88qFGKn6fbXo1x8nq2fDNs4E+
Q05QfzD8IHfx1v3HqT8Dvvf6S5enGdR/F/544pLV+Uzq/wJvuRV6Modcz+Fg
PDVhfnkCzc+eBceeuzVuL5m3EV6qcWZMPFl0BL4miXtnTI+X3oIjmz7+6kZW
tMF7z8kW7SCzBg3G653e8WufMOp3gL9b+bRnkIXr4HmeKSZX/aj/ENx86HnM
dbK8FO5p/u3xKn/qV8OGa9ZmmNtTv/4QHG/f3BTOsKP+GfCAC6/KLtpSfyDs
9eB5+dHp1J8CW6knDz5Err8OHz9TciiGQ/0t8Jtl5+9JB1O/7lBsH38e57kM
pf7pMCcp3HJif+pfA09Zmz12Zj/qPwBnBXSLX6VN/dfgkVH+yRZdqV8Fv5Hw
vnl0of5+w7D//TXAJ1OL+m1g5VrfcebdqH8lPFHP2j2Vpqvj4Y1BVV+fkznF
8K1xz9y6alD/G3jE2s4F5xrp+1+9h+P1dIl/bFlL3/+aClvOcPJpeULf//KD
ozzPSxa9oO+/xMEBwRPvfSfzLsNai2WjutfQ91+aYIvzT543kqU9jTGe8rLM
SXxK33+ZDEfECI9EkVk+8NzH4xYJaX7uf3DGBysHu2f0/ZcLMOvcPa9dNL+k
EVYkruFE0+uT9zBR8Xf6HxeufkTff5kAR9Rad04hc5bBi77mjyi8T9//ioZb
Jcpjryqp/xz857hlt5+Pqf8FrKO19r5OCfVrmar4k/zPr9pPZlvC0d8L3l+V
U/9SuAPHeMBimi6KglsWqF4vL6P+s3DDiQslGeXUXwuzbLQyO1ZQf5cRKv62
5oyGWWSuOdzttUGwEVm4GE46eWXX+Drq3w1ffuilrKyn/jPwjcqKwLNvqf8p
fPJa/i7/L9TfaSSOD3MDv9Z9pf6xsCqvefLsb9S/APa/Fhz35Q/1h8MKVsXa
7Sxa/3Phy8k1+pdoOvsJLFnimN2RzOswCtO9J/jGk0Wj4Isnw//bR5Z6wGuK
pmcHkhVh8KA1SV1FZNYJ+E7A8oontL5yH8Jj92V2T+5M6/9vuKlo4ubjtD1I
TEer+AP/C3V/R5a7wfo9m1w/kdXb4AerGmru0/bEyYY1Dry2f0oWVMLya9/W
vutI2/8PuJPPO+3cn9Q/fAy237uCUcH0/tS7wIceTZhQRe8feyt880JJoT1N
52XBGv0+26SRRffgU4o34zp8p/6vcI1/dLA7WTFkLPa/zgXVfen1smbDfVd0
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
i2j5D4lQ8SvFWTvN9tLynw2zZ7XpjI2l5b8ZDvTzWekYScs/HV7bsHp4QwQt
/zuwrPr624Pk+s+wYoFXxVEymxOJ87ObAek5dL7Hc4KlbBPu9I20/DdE/v2+
S1W7E/196WH4Wqfg8lh6vKIcPjv35sBXtDxZbXCPtjWBLJqfaxiF80vPQt07
4bT8Z8KhvyM+X6P1VRIER5fvXXODLE+FjViPHI4HUP/Nv9Pf17UsInPUsIae
Sy+7POrX26Pid1Za8kryqd8Ofmm10nThOepfC4/PGT2/9Tz1J8ORp3YbbCCz
r8OfT9WPOVBI/e9hgf7tcx+PUf+Avdj/Vo4U/syifj7cN/PwIItM6l8NDwlP
Gj8hlfoPwG9SpjRfJnPl8GZRh+uWh6hfCSt8XPJun6b+vtHYfrZFbCgny6fB
keaLH3e+Qf0r4KN+vvPW0vVnTjwsL3pyIL6A+q/AJyxTzzleov7X8JdX9+om
U4+sV4yKP+rh6pOnrlP/FHj9Vrb7zVvU7wdbZl91E9L+kCeBi5XpPovvU/8l
uHX6HQ/3B9T/Cl7kP23S0FLq19mn4vfRnpSaUUz9k+Go0oLGNxXU7w2nSvQP
G9P1A+E+ePzyiuHVfWn9L4Q1XZ+HTXWg7b8B/t1q8WjECtr+u/+n4l+W9xh3
YAtt/xPg0lstbMMNtP0L4aWnD1kMIov3wu+/hGWXkmUF8LT6lwvXnKLj33O4
hcWePpGuF7C1YjEezw3OvpNG2/84WK+vreeMEtr+PeEpDXfnCcnSSLjLRo3D
bp/o/DcPXvZ7U/pSfRr/1MKnv2TYbCNzO0tU/IqO346VudL4hwsfCn+4o89c
Gv8sgtvtLoZHkeW7YKfNKWPyQ2j8cxoeu6tVR3srjX+ewjHd1neJIws04lR8
/h2XmIhgGv+Mgbu/tHn8OZTGP/PhUs5Rs05hNP7ZAZ9bEa6jT2bnwlmzN32V
0HiN9xju8ngI55WExn+s/Tj+vm94NY6mS0fC+snFtmU0/lTMhX8Fl45rI7PC
9v/9/Lxk7w8y9zgsHXJfN4ssfAD/jng5LY0s+QVvCS6IyaLxqtwkHsfPbcHv
y8hqV3hvnX25ayb1b4v/e/3CdMtssuAYPGCj3Mgsi/oV8PIZBrOVNF32Hb5t
+LbvUppePywB52v+G/WPp1O/C6zRuc+m3mTeFljw7aGfMoP6M2GVsXXIv/ml
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
XQrHaIEP7JTb1uDrZ+aPgocb7lm5mt/XvRBe10/pzhh+n+AWWHjUKuy1lOs/
DixD+XR815ndTcw/C85r06FTPusTwu3wqAWNIeG0Yzj86PPnva4/mD8PTp9+
8/5wft+03/C3utmGV/j5sv7lNWKFCw/sflYzvwTuFxRpZFfJ/FtgFdVxyya+
Zf5QeOT9aQkXeXzjnsM35ft5P6QrfsDfGn73bfOe+fVeo36sFdT9E39P0YzX
/+ZD5shvK2b+jfC2qEzDaP7+wZfg3eH9PobRuVnw8Bu77tqmM38jPH2dXvKM
q8yv+6ZGPK3Tq789U5nfEv7TFPJc0lr/Ww+fWCTcfNaX+S/CIx00A3/Rssfw
bd8R+teGMX89PCznyvgEWtKrokYslX7NrR/F/FNgnxM1qZOsmH8dvGJ6jKuP
NfOfhx227E34ytcFmXDSdKsYkxnML4N9VzycOduc+Xu8Rf1+x/y0ZK7PGWwO
K1//7W5izPyucEGbiEGDpzD/2bf/+nOH9zooZv50OLJ+XSfFMcxfC1fmpu3/
RPtrvkN9f3H3wZb8+zQxPH9h4YUfk5h/DZz4bfDiGkXmPwX7lri4HFNh/jT4
ZudFc2dpMP9nOPaPvse8HsyvUYny8FHs9CX6zG8Cj9lWdaANLVgFL9zxrcm2
O/Mfh62evxq6qRPzp8DqKT0bLiozfzW866gw9+UP1v87v0d5dqDjq/b1/1vO
GD6RcTxymoztn+Xwu73zDOO/sv3jD7+9Z7d6Qg3bP0mwq3vg2ZgvbP+8hzeX
By+s59/LOn2oEacUJ80I/8b2zzg4U7/9XEt+nsQJnlLtfnxUA9s/h+FUk2KV
g3Vs/9yGA1/vqxLRFW9hi4GD5urw/QWqVajvLK8fX8z3FxnBDYf3hbZ+nrsj
nFf0blqUlO2fA3C7Ktet0XTuLfhBvHim92fmfwP7lS4u061ifpXqGvHDELdL
K14w/yj4l13kiw+0/yI42Sr8put75t8HV8UfP2z0gfmv//v/sdtm55Yzfxk8
WuRRZP6O+ZU+1oi/ynX3rc9nfiE8R1o127yA+efDMm+f7855zL/n47/6sVK8
Ky2IhbPPWqkr8O9FJfDdtplhr5OZv+0n1DfqlXd9ZXsyeChcbDzoVmxH5p8D
W31pKG2rzvy7YLNZ+5Rn0sIY+NCwUWYXq9j+L4KDy142+L9h+1/uc43YekL9
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
4n467sXw0fo+L4v5PCm4zSi0T4fl/PlM5w6Bi4P+Pr87k+XZbNgn1vRD1DSW
Zz7w6XFfpUHcb8cxCh7yonFrD+6v418IjxrSNawjndYCb2gTk6owmvkHjsbv
f8g0cDXXm9adBe9cG/nq1UTm3z763/13uVx7E+YPh4/HppRu5nwwkcRQKs53
GdSy7gvrp1vg4Q9DP63k+uDBoXDT3wyBB537HJ5YMmHiCCnrpz/hzWFntmtw
fWihnhG+XwebyTV8fuU4A56xqc+GlVwP3X8jHCtYmx8WxfbJJVh6yLF+NdeH
l2XBnTa/MVHievK6jfD5aIOw73xeJdEdg/t/u3j9n2Fsn1jCk889+1UayvbJ
enhX/5EZ2iGsn1+E/+hdOylHC57ATdusE85cZf28HnbbsWheM9/fvddYHP/Y
8bva8P2Dp8BvbdPTf3D+VO46OPRth/nnud+C3AX45k9n5YeezJ8JRx9tu+op
7SiDX+QUPT1wjPl7jEP5MMvZRYXzR9PM4bbvpmh15HwumSussPNYeDP3X9A9
C8/xUBv2jJakw6eXR5V25f4NPrWwp/7hK8f2M7/meNx//mhqfuD7VYjh4xeX
POrYOj/NBc46UVnfja+LTsGrpM3DEmj3NLjQIvzWSL5f8Gf4wPIe4y8fYn6N
CWhvLT1ntJ7fX24SrNC13yVxAPOvgpU3ZeXk8fmh43H4U+yHPzl83T8FfrOr
4GCv1v0pquGr4SckVfx9ZJ2NpWKrqLm5HrSuMby9zWJlixPMvxxu67Tv/A3a
xx+Ouaxgk9u6P0ESrHlr5KY/dMV7WCX9p+ZvWqA2USp2FOqdOMf9DkTj4JBe
Ixw9+Lq7E2y+PWea2x7mPwz/GbeizTr+Hrm3YcHY3Q9baLl3sHLg7SJLWqhq
gvJSUUHLmnY0gruYlZRuaD3+jnDG9emCMjrtANw3Y97wSuaR3YIviOYG/jnD
/G/ggq7TJUu5H4NEZRLqx5szSrvwfPUZBfd41TzVjddL3CK4aNVGd9/W/Rn2
wT3HJ9bODGb+G7BOw24nc57PojL4XJ1h23N83V1JhPLwofvPTF/mF8KGSZMy
29O58+EuH8y8rvB5r9xeeNESn0Yznj/CWNi1z9W5q1vzl8DTeva0XunP/G3F
UvHG42d+x/N8kM2BazcNeeTEz9fdBe/pmR/Vs/V6j4EXm03Ke8Tfw6cI/rg+
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
wTc3Cb7z7yua4YjR91N304KBblJx4AY9A5WXzG8L597NHiv/hvm3war3J+kN
LWf+K7BUw/mKUynz58I5hYvL8vn3cr/h7rLdVm8qmb+/u1Q82eVP2HXacSZc
4lzf5Tvz+m+Gx9YtNz/K8Tppl+GHmSdWJgzg9f8M/rBlev1xTV7/P+B1e+eI
D3F9Rknfdbh/zf+RPawbr//p8MPiF4o+LD/jNsAdnvQeGqbB6z8Y3vOmS/o1
lleCLHj3wwcqe1ieiBpg2+KbXmNY3rjreOD61ZpzxaM7r/9psI+Gu/VVfn6u
J7ywySLjGy13EQ4/3XPI5L4s7x7DG2IOlQdwvUjHb/CX9VbjlnK/Cn9tT6l4
Uc/YlXl02mR4htmi0HccDyZzh7O8M2vkW+/v5+Ffae1j2y1j/ofwsYabT/d7
Mf8XWEnd4K2JL/N3X4/7iexdxACOF6wwg8t7qPvPYP1U4ApHLcpw2cv6negM
bJ31yH5eCfM/gGsWPY3tyPXKgqVw16zUmtrtfL7WzQu/79SBZ3K8WX8Xw/vO
/xi4m+NBhGvgxB8Bb+y4fpbjSXjq0a02/StZf0+FI8vzZhvXsP7+Cb51+mTg
sNb9z9U3oLwr7XL6Vuv+nybwwiDTuv7cb1qyEu5R61ibwfEePsfgq+ox0wq5
32ZcMuyWv+VTAfsfKqrg3hd/dRzC/S0FnTdKxf3mCzuHjGf7ZQL8c81tpylT
2X5ZBq/ulDLu1ly2X47COQuDVOtXsv2SCPutk+4t3c/+kvf/3u/GuvBRB9hf
0mmTVHxvwn7R+bPsLxkLP8rbrvI2kP0lS2FP9/VqNpfYX3IIzrk9qPj8NfaX
JMCrpzkcPh/D/pK3sNaorCXXaEmHzWjP7/uaVsnxDT6GsL6ng2hVBvM7wJL8
837L2R9fsR8+PmrbiZ592X69BWf6+oXqDWT79TWc4lFqaChk+7XdFqm4MLB/
YTP7w4JHwi9Gm6X8ZvsxdyGcv9z2yq0RbL/ug1euzjF+RwuvwwVly00DBrH9
+goOE4lrNCey/aq4VSrufMN2yLvxbL8Ohxe0dz2sLWb7dR68W+/941uT2X7d
A9cEPXDI5PeTXIOdA+fsc3Bk+/UlfDBpZMRkPm+Ik9+G+tjPs57rW8d/G8Aq
vWJWDmZ/qmAOvLZFbsr1KObfCftK1C16nmT+aFhH2M3X/ybzv4BXR/XvEcXx
5bl/4fQzgqTLlcw/eDvuVxFnNUP5vFNoB1crK71MUeTzqx3w7E9yeUZ8nuMf
Aff70T1c1sT8+XCBQ9GAgXxeKPsDS8bfM37I54m6+juk4i4L2iamtT6/tIFT
XIeVXuTn+2yFfQ28e82j48LgAx7lX8e/Zf4cuMl/dVTFZ57/v2Crp+4XTRby
/O/njfbn9o0CK0+e/9ZwF6nz5YsePP83wX3SU1ZeWczz/Rl8YuXu90tdeb43
wT+O+k2dwf3SHfv4SMVtbyj/mNq637sVHNor/MFmrp+X5gUvV77t68v97WVB
sMqOSXIa3P9V9ynczaPT3Hp1nu/fYf+xb9cJW/e77b0T7dPE5WmLuB9u3FT4
Zk9D4Ri6wgPuO/mvsQ7fXxAI3xGafR7F8fGiR3DM7gnWK/l57l/h8fvW+tqy
fzG45y7c/xLbvgpo3e/eApZ0WXnqYCbLO3f4lo2zw81ElnfnYGfvRQp2SSzv
MuBui0rGilJY3tXBFUVjVV7SaVq7pWLDrHMpluzvk5nCjvEj4qvYv6i7Fp54
96T+TvYXSk7Dlys0u4Sxf8LnPpxTu837zFE+r6iBF6mN3jOb/TMVXfegPOhm
YazC/jiBCF5ZfKpnZ1q0Gr45fdc4bZbf7ifg7n9zGiq53mjwPdjv74zEkNb9
3j/CnebscY9mf6Sc+l6p+PN99aWNHD8onAjbfny7fgj7Ix1XwJMKzyXIcTyh
fwC8LtAuNIP3h7S7sM+JHmczHzD/B9hb/1TkQVpX4Ivvm9L7QQrnJ0jGw2WH
F8+6x+c/Ps7w8/6fz6TQcUfgLvVGXkNfMv8deMw93cizN5i34z4cv7fvh0/h
8yH3MfAu079PSpOZdwnceVhIl1u8P+UehGs7l80+xPkTcgmw7yr1qpMNzFsB
9xsn2eciY972flJxdPMDw1u8n/mPhjsGutqmtN7fFsO/n7UzH8bzSeYHpw9L
c/7O/indm3Bgdlx7Gz5/kpTDY+YF1s7k/to+yvul4soXuuM8+f3iRsDdEz0S
e39m3gWwjrHqN1veLwW+8Lc6l6lveP2I4mDJq22Lj3N/aPdSeGj7RwVdDXl9
KxzA+Vy1bFv9WN7fhsHayw20+tvwep8HH+7by2i8Ja/33fC8gOaFCnG83q/C
XS/UGwRzvE1am4M4X3J/3VjD8TmyIXCXeTZX7tO6s+FIeXfH/nx+KfGBL0i3
vxbz/uATBf8ZsPLwsNb1LAthM7uhqxWnsDxrgf2ak33DprI8H3QI9UXr+ufJ
Epbns2CFqIkBY2xZnm+Hh4dHlo3m+pfB4fDrN8v77uT9Izfvn71WbjKg5f7A
c0y+hG+khQMO4/i6eX8IP8v7mQSe3DSzrpzrF/pvgRfcGTxXwP6jtFB4Q6+P
Raq07Dnsu7vDhGk1zP8TXhjytGIN7xcSvSP4vbv+HXu/A/sjZsCav69v3UTH
bYTlDSeUfWR/TsUleEt2F5tl7F8QZMMmk+Zul/Rif0QjfH5vyPX1OuyP0D0q
FT9bcPbbDs6vCraEhZpmC63Gsz9iPWywa8+847RcEPxiaHTYFRH7Y57Aswoe
57dr7X+rh9ff2pdg5cT+mF7+UrGaoUJ84nL2x0yBZRuKvfU9eT9bB3tqWF7f
vJn9MRfg6/e8zTT2sj8mEx5xausn89PML4P90uuOd7/A/D0C4KhrjbLW+Wzm
cPjFmL2H+LrADU7WH2lry/lrorOw1vILn+ZEM386POi6nXJDFPPXwiVPXi+2
i2R+zWO4XurV/Qrjmd8UvuD15sCqBOZ3gUvGvw2s4fqLjqdg0UChkw7/3j8N
ftPeS7z7DvN/ht0SfJ1cEplf4ziu35p+PVbQupPgWQsTljpmMP8q+PTT9Hqv
TOY/Do9Z2M7T6RHzp8AX7lu9DKYrqmF1t5pa36fM3+UEfs+QFQvf5TK/MXxF
/fPONp+Zfzm8S0fZs/0n5veHh41XPRFC5ybBby8d2qPyi/k/wPcjNl5+/JP5
1U6ivListf+YMeczjoMnzHFdaybifEYneOaxK3cncL5j2mG484CCWp3RnM94
G146q7JTI6377t/73Uu8PcWE8xlVT6E9eyO/s68R5zMawUHT32RdFnI+oyPc
OS12uz5dcQBu65nvUTGC8znj4a0bf53Qp0Vv4Pqxs+eWjuV8TpXTaF+7uulY
j+N8zlHwvT+y+VPGcD7nIvhim3LBLn4fOT/4eVif8ieTOJ/zBjzTvM/wnczr
WAZnbjpxpKM58yudwfUzLr/McgbzC+EQ82btYbRsPtzvQ/d6J2vm3wvHmygZ
PaMlsfDu3peHiiXMXwJ/3XS6ZBPnk1YMPYvv17J31sf5zDsXDj5m6XR+AfPu
Ovvv+UXi8zzOL3WPgW1fn2qbN4t5i+Dvh8/tNprLvHLnUL8JSTbQo+WGwJei
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
19OuwC2LYqXanF8hy4UX1bxZ5sP5MLq/4SMaAZKy1vkm/R/jfudb/20G5zv5
zIST926obt1fKm4zfHHZ+4DBrfNNLsOlgR83pPH/Bc/hgF/emdGc7yH6AZ/e
cV768zT7C/o+QXkpa8jXYn9N8HRY9rTDmK507ga4duzClSe5f5vcJXjv4bVp
AcrMnwX3Moo/EKrC/A1w7IBKpRftmV/nKdp7R/3rvPn5adPgDvkm1z62zjfy
hCdMi3Cq5+u6F+E5vnX7BK3zjR7D1q/t/RLZH+TzDTY7F/Aq8jrza2dJxQO9
ij6/oCsmw+3zYkdNY3+IYB28b96i2OnpzH8eTn4T7Xn1LvM/hF/JHtgfpIO/
wJOi9m+tZf9XbvdsnL/VA4Jl7G+RM4cVXQ18K9m/IXSF012DX3/ifCz/B/Be
kfu2JM73SpPCvs1Cm1TuVybr9gztQZHI1XI584phlS29LfotZd41cPWpPjGl
S5j35LN/4+tz3u2n41Lhe/I1JrZcv6niE5x/48WiLfOYV+M5vLedpNiBeU2e
/7v/ZkfaOTHvSjhketeAqNnMewx+t3DrBa/5zJsMS6LmunXlfpJy1XDDXueI
Kn6esHMO7qdTAyNHcn9HxwlwWucDPRT5uv8yONC1KLCA3zftKLzV7+RhK/69
LBGeMTnr0gh+X933sNGVLubDeH5JOuWifhB1sTiE+1X6jIVDT29RS6XjlsKp
445bHFnD/Ifgmct/pMRPY/7b8DIXj9UONsz/9r+W7j2eqT+O47h7yK3IJRIS
pYulEFGb5JZKQkSZkC7KKkI3U1IqWiqVS033dJN01WVKFyoWKaRIpLDoxk+6
/N6dT38+H9vsvPY9+55ztm8LvvWiqUmBft+K1/8Z5pMzTQtrp1BvMOyduMFc
TL8nIrUdnhp7Y90n+n0SViEsmee4fRD9f4vcN7CCcnNZEVmgWInjm5mx6rvv
tN7FCp6a8nRqEv2+VVcQ/LglXG0Y/Z6N0VZ4qOe905n0/zN6XYT9TQ5lXyHz
X8HXUk6sMH9D613kq7D/Hxo979YrWu9iCVtbKLXa/fu9q3mwyrI5jtNpPTI7
CXZZ2Zv849967fOwgqnV2jz6vShhDax9ff1r23Ja7yPzHPPPglHNnbT+mTUX
jhv56WQMrZ/mJsKnJz46N5UsOAM3LP9zT0T/f6qoGhb96rcvi9z1By5t26h2
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
19H487vhzEPlYv/n1G80RcKR7x0yK72F+j1g55P/uWt+oP4YuDcsKvbCE+o/
DMfmpeuGPaX+Uvi4X36w+WPq/wrvvj2fJVVO/UPYmF9al2rGlFG/G5xqomst
JLNWsf++v6onTab9j5sNmy6J0Ku4Sf0PYBnHRPVIGk9RF6zgZR9bcYX6B3Mw
nlP7ZynT62c0De7J3vJYhuwVBU84YMdOSKb+g7BarCF72g7qvwdfnXpWeRJZ
Q9dJwjHSTnOP3UO9TvCFyb8WzN9FvZGwe5XSEB5ZmAFLgpPn5tL+Ixb9vf/o
3W2iXOpthwX5D17GH6HeQVPx+t12GF6+jXqnwLZKnqw/NJ8IlsD92rImVNP7
X7QH3nTd0/APuesWPMc5YE8Q2egDnKP4WG3BOuod6Izx5qgFlND8y3eAa+8o
pS58R/P5Irife8YMaU0abwGc1DzORHow9RfBNhvcMlYMpf4WWNG6b/dYup2n
Pg3Hl9b30wMMqN8OHnIp90WkLvWHwgbybu4p+tSfBk9sy/zPx4T6r8FZJa4j
lEZRfxOs8NtrVRGb+lVccH220+tnHR0fRDbwCRcDzuJA6ufCd/c7ck7Op/4d
8IjaliETQ6j/MuzwuTZOI5zGuwGub+9N+bacxlvJFdv/IZe3cwX1j4dXqe5w
TyOzt8GTQzQvvqD5R1gPB3jXr6p/S30Kbjie7/u1MKCG+sbBejf0hveQWYHw
CWfVMTteU98W2HJ5YqeAricFF2BDv80VrmRRLbz9icEkFl2fdsm64/pYJvhW
BtloLDx7U9ctV006X/GHO735h6eT+Ztgx9X773oq0fnKWVjtjOBe4TA6X3kB
aw4w8JlrSucr0h54fSXSgQVk9ihYz+WY9h1zOl/xhYvOBDk+HEfnKwmww6si
L9V/16OnYddmy8dv3Ol85Tns1LpA2YDM+u3x9/uVWcvMl1Cv93S8/uXWhvXO
dH2yHuboVY01i6brkxPwn8W2w/W30PVIH6ypWeS3jD4/5g/3lHCmTrDJ6+5P
ny/PgvOG2S4u06LPl+Ph2C0W/mba9Pn6MTh/V6l3G30ezS6Hr8wrn/vQgj5f
/w+2Npiulz2FPl81mYHrg305YR1B9PmqJxwwb+zeYWSpWHjDBN89/afR56u5
8M+JijLabXQ99hhOdXYoP0iflwq+w3dFL4pVPlPv0Jm4vv71+2LmN+p1h1N9
Xl36qk+fr0fDHJ2C5wMH0+frh+Cfm9eEGtLn7/xH8Mq+xwW7dan/CywdPv9E
tzH1G8zC8WNX9k8+fZ6t4Qp/1pPWEJLZK+F3LwzGj1Ci/iz4/PGJ47N66Hr0
Plye0hixmXrEnbDfxpzry5roenSwl4QTpGDj+Zs+72Y5w6kNVqv7yNwV8NGp
i7pDv1D/AVjmsml1Jb3+XR3wS+Wu28Hm1KszW8LZWshWz59KvRy4fv0ym4f0
+vKXwRx1hbmh5Px98NqNSyeOcaDeO3+dWmwtGk99Wt4Szqe4zaf0JtF4Lobr
LnGXuNLn/eJ0eMVkm2c2ZKlbsLWYf/PGXBrPVvjN4NERiv70efmAOTgfKmWf
lScLJsEfnptt6/Ci7wvC4U7zU9t/k7t2wT+EUV84s6nvBnypR3fsA2/qa4ar
31xrUpxH27/QR8J5PufUlVNhNF6p8Iz5Z2Jfx1HPVfj+GLnvUxNpvN7CbJ58
35hd1GPtK+E0bRi7+G4G9XBh9dllpboHqGc7XFI/VLvzIPUUwkdGmTQc2089
b+AzqrYGMdnUo+iH3uGvxocfpR4r2Of1fhffE9QzH7afHiMf8+/7r61wcsG5
n44iGq+L8PvxehMqyPmvYP6QupPvmqhXfi7OB6+zIxLeUS9r7t/rZ5Hc9vfU
Ow8+u3XisCox9SbBwugSwfiXNJ7n4RHjspvPk8U1cN8wmz1yZClZfwknZJO6
zwv6vo41Bh4rzpA/QX+POxdW1ijlL6P7CxLhsw2z9P88pP4zsK78f7nLl1F/
NTwm5ub+usXULxWA+e+eZlDqQuq3gE1HD9yXs5T6feAPp/reKPKpfyPMcyrg
5W6i/lNwe3Tarmk7qL8KtrHjzDARUP8vOGjyyTMcMs98Hq7P5HaPHJZO/bPh
xeublxyi8RWvg13jud0ex6j/xF/7GBj1ydL3n2J498LqmZ/l6PvPH/C3lPym
WrLANBDnfy9XF2jL0/efM2GFfR+1bdXp+984eMuob/q6MfT971F4r+D7CqUE
+v73Kax2onZwaiJ9/9sDr5+1/K6Qvm/ONw7C+O/t08zMoO9/p8Ohzel73uyl
73/XwLytxeLw/fT9rxCuT7ZczjlE3/+Wwbn7Xc4uOEzf/36Dzz/pf6RKSN//
Gs6XcIyfV9pY59P3v+7wo8NxMil51L8alj+Xs/rHeerPgSfffldRTt+vCx7C
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
              "]]}, "Charting`Private`Tag#1"]}}, <|
         "HighlightElements" -> <|
           "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
          "LayoutOptions" -> <|
           "PanelPlotLayout" -> <||>, 
            "PlotRange" -> {{3.556656*^9, 3.95928*^9}, {
              0, 0.0798545257471515}}, 
            "Frame" -> {{True, True}, {True, True}}, 
            "AxesOrigin" -> {3.556656*^9, 0}, 
            "ImageSize" -> {1200, 1200/GoldenRatio}, "Axes" -> {False, False},
             "LabelStyle" -> {FontSize -> 18}, "AspectRatio" -> 
            GoldenRatio^(-1), "DefaultStyle" -> {
              Directive[
               PointSize[0.003666666666666667], 
               RGBColor[0.24, 0.6, 0.8], 
               AbsoluteThickness[2]]}, 
            "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
                (DateString[
                 Identity[#], "DateShort"]& )[
                 Part[#, 1]], 
                (Identity[#]& )[
                 Part[#, 2]]}& ), 
              "ScalingFunctions" -> {{Identity, Identity}, {
                Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
            False|>, 
          "Meta" -> <|
           "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
            DateListPlot, "GroupHighlight" -> False|>|>]]& )[<|
        "HighlightElements" -> <|
          "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
         "LayoutOptions" -> <|
          "PanelPlotLayout" -> <||>, 
           "PlotRange" -> {{3.556656*^9, 3.95928*^9}, {
             0, 0.0798545257471515}}, "Frame" -> {{True, True}, {True, True}},
            "AxesOrigin" -> {3.556656*^9, 0}, 
           "ImageSize" -> {1200, 1200/GoldenRatio}, "Axes" -> {False, False}, 
           "LabelStyle" -> {FontSize -> 18}, "AspectRatio" -> 
           GoldenRatio^(-1), "DefaultStyle" -> {
             Directive[
              PointSize[0.003666666666666667], 
              RGBColor[0.24, 0.6, 0.8], 
              AbsoluteThickness[2]]}, 
           "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
               (DateString[
                Identity[#], "DateShort"]& )[
                Part[#, 1]], 
               (Identity[#]& )[
                Part[#, 2]]}& ), 
             "ScalingFunctions" -> {{Identity, Identity}, {
               Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
           False|>, 
         "Meta" -> <|
          "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
           DateListPlot, "GroupHighlight" -> False|>|>],
       ImageSizeCache->{{4.503599627370496*^15, -4.503599627370496*^15}, {
        4.503599627370496*^15, -4.503599627370496*^15}}],
      Selectable->False]},
    Annotation[{{{}, {}, 
       Annotation[{
         Hue[0.67, 0.6, 0.6], 
         Directive[
          PointSize[0.003666666666666667], 
          RGBColor[0.24, 0.6, 0.8], 
          AbsoluteThickness[2]], 
         Line[CompressedData["
1:eJws3XtcS38cx/GREMrc00Vzq1xbyS3SpqQSrZJ7Gt3c0nKNqAkV5ddSqSTW
hUJYilySCZVLrNyioqKwkSXk7vd2Pn7//B7Pxzlbe+3cvufsbAYvD3Tz7chi
sZp7sVh//4//ROVhSn4Mq9+iQavO2sDSj3CkXdHXYcsZKwzESj6fd2/xskWM
WTPhef37333rwZgbBHcqUPZQkYWp8FOn7Dij+YwlN+HZ00t7G5DlH+A73L2i
p1MZqwfuwPTnkyt9rBlz7GCH4KRhs8mCtfDXWyK71WRxMqwQ6JilkGUlsPBH
eu8FVozr38G/kuIWG33M+2v2gHAl32Cu84qtrYx5fPhH9ZKY62rGotXwUYu3
zQ/J0kR4y4jolCVKxoqrcC/Xgiv5TYxZSviz6pJD4gvG3L47lXwvnY0bUusZ
C6fBRt4tx8eSJSvgAFnTyF5k+X5YsrDkyqWXjNVFcJhPzUe/Bsac13D7ZfXd
rTcZC3rtUvLlpueO3LrBWDwF3uDo8d/bHMYyXzhzttdF90OM62Ph0Ig965JT
qP8SXG1o/PUwmfcKnmlQd3kHWaSzW8lf7jZwTVI89U+CL04q056xj/qXwxFv
M+1zo6l/H3xr6K+q5N3UXwiP1+7C8g6j/gZ4acKXunXHzzD93SOU/AFLsxz2
kuXjYdsD9V/GHGas9oIHGbeu65HAmLMXfmy+qsG/9TTTXwDnThnstk7JWPwc
3qeX9np6C2NZ10glf+HagMtzXzKut4CPBH/cXhmby/R7wjvuLbRYHM6YFwln
XD9eHStgLMqD94zQ6npjBmNpDTzIUXBhrD1jhWaUkn89V9zVZCpjFheuOuPh
ZW7BmLsIHl48craTMWPhLti2tduP0zdOMv2nYb39G9fOvs5YXg3v8rK7veUi
Y3XHPUo+Z03OI8cCxpwx8IzsLz3rjjIWzIebNXpIqsniHbB32BaZgiw7CQc0
xXX3Jtc/gl8knUrZTGaz9ir5L7sLFxt4n2D6R8KuifZN+/wYi+bCS42SnIVf
jjP9ofCVIKPEELIiBz41rMXJN5Qx6wG80zDwmGQrY+4vWJT4wzdoM2OhSbSS
n7p+mff6NYwlrnDm43E6l0cwlofAfxwsSms5jNVH4RdB++NWPsph+hVwl0Dn
bf0LGQu+wxuj2YYvyOJhMUr++/yZX/3PMJbNgd3MzTuPzmFcHwwXnlzW0nqM
MTsTnuTFmxjnzJhXAdcFt/7uPJWxqB3+cbcxRqMTY+ngfUr+rB/ZxWd+ZTP9
s+DGHTXH1/5kzNoEB5099Z8ZTedKYUnKwvI2mi68DS/f5zaldzVjySc4fNvl
pR5k+aD/sP8c6BvGUjBWO8Cli/rdWnqHMWf9X29LS3O9zViQBldOFCUYXWEs
LoNDq9Xz71xmLGuFY/Velo64yLheP1bJN5+3Z9FSMtseTl9sZ7aTzBPBKyZ8
yNidx1h0EA5duOBYA1l6A/ZteW++MY76W+BAi1UtniOof6BEyc/envDf5SHU
bwtfsrvsYapL/QFwmaFP3usB1J8EV/V7r/GqH/Vfg6/v6ub5tS/1q2Cb7F+m
4WRO/zgl3+T5sOM/+1A/D/7TsEf/n8Wr4I8HzY1e96D+BNhj5THrpG/HmP5i
ONCnUNPtBWP2W7jPy2OPfpYw5vXZj+NDwxDDntcZi6zhzh/HbV1dyFjqDx+o
PmB66xRjRRycuXePg6k5Y1YR/MGlj02GBmNuMxwV47dSu/Qo08+OV/L1L7r2
1bzOWGIFLwkw71uWyFjuA5996nJ2tAdj9X+w85Xd7yTujDkXYbPWQN4Ka8aC
lzDH61vrbx5jsXaCku8Suta9fgJj2UT4v/xjaw98zmL6l8F6/POSKx2Y6ewY
+MTelmHjw5npvPNwlyWrP47swlhUD0/JX2LSlJ/J9HdLxP5fvu5pxH+MFZaw
/9uaL/cTGLO84An+IfN+kLl74EcarSN4+xgL8+Flv/dap5AldfDO20neehGM
5V0OKPkW5wZY9xjBWG0Of2lqHpAyjDFnCZxyxjN4ckQG0x8Bd2Yb6Fo7MRbL
YL0vIz7I5zKWPYPNNB7yvsxgXN8pScnPa+9vUT6AMdsMXvlu/8U/mox5C+GF
V/LttDozFu2EYxYcG3PgYzrTfwq2STXr07GeseIJLN3zuPpBE2NWx2Qlf27l
mDWpbxlzR8O/QkPve5KF82DP9XfqRSrGEjGseUzuso0sPwF/NyqJYb1krH4I
Z76XDtJrZMz5A5tmGzqf70L9I1Kw/DstCGpYy0wXu8PPLy++F+zDWLYdfrI6
YaGTJ+P6bLhoUYHH7QWM2VWw8vQar0pbxryfsH7/IyYreYxFxgeV/O5aAz6N
JUsFMJ9VE/NtKvVvhY9mzNtZSdNZR+GDU2ZYf3gkZfrvwzF7ncuG3mQs/AYv
13vYsreUsWRoKta3+N9RhmT5bFi+U1Le8Rlj9WY4cbxz1LUaxpwMOND52UbL
OsaCu/DktEXJ4QrG4i9wqrWeUy+aX8Y5pORvuvz0NKcX9TvBv8b3+17Rnfo3
wr3G/7qYReYdgasrft4a0pf6b8EPeZNufTSk/jY4pGXYqCqywjBNya9ITH9j
ZUb9DvADs92GRwS0/NfBD78KY/ovpOV/CB42zvpesSMt/1I44EYfsSNZroZ7
lD1uc3Kg5a93GNvvgLt8MS0fzgz4HL9DjbEbY0EgPDn193jPe7T8U+DLd3OG
GxTT8r8O+200sDr5g/rfw+pYU18NFq3/ukeUfA1WtzLOWFr/p8M7XIK3hs6h
9X8N/Ob6TLdVQsbSA3CbmVOszTzGCjlsd/NBtXYkY5YK7pe7sHkumdtPiuWX
4zzclCy0gU+v6tD0aBdjyUp4gMaeyKd7Gcvj4YdeB3t/z2asvgJf7HcwM7eK
MecNnFfQeK7SmNkfCHqnY3z2YH4H3eGMxVPha9n9PE6OZizzS/+7vzsgNxrD
uF4CZ8uHzAyPZ8y+DJ9qTuziSPs3XhMsDxvXULeC9n89M7D+RMpOFG+n/f9k
uMelVf2/BdL4zxuedmXVJjfBKab/P9jJJK3zn6uMuRdg17MHt3rLGQsbYftm
31PNs5nxqKRHJs4/zvmnnPdjLJ8A/3z6pv+zaTT+FcJ/TsZaBGbS+Dca9nZr
tr17irHgHFz9MtFWfYGx+AVc2+awOvg6Y5lWFtYXlyvbmksY14+DH4yZ9XVX
DWP2Urjwe6xhaBNjXhTsqVHQ0ucDY9FZuHWDXc7wT4yltXCZ0VydU78ZKzof
/bs96J9P7yBj+s3hyvHCiIkajLmLYenVgML8ToyFu+GFzZF20omMJWf+Pt7u
wKGbdozlT+EesU2bO7gyVmscw/E2fJzW8RWMOWPhq1/iZ8xZyViwAN5nHf84
fDVjcTg8sfSzrWYAY1ku/NK2r8FMcv1j2HOqnyqMzO6QjeNregf3X4GMeaPg
oOSTlf5kkQcsC3EzjSdLw+A+Cz4XWJIVx+FILwNvwVbqfwifn7cl3JHM/Q27
BWUmp4RQv2kO9l91deV9tlG/GyyL2Ff8hqbLt8E+Op/cm2i6+hh8oVPs0kdk
TiU8enic0Uay4Ae8vOi93XayePhxJZ911tnXfjv1u8CWBw6rN4VS/xZ4wcWz
klAyO+vvdG5AxRAy7x5skL564aEw6v8Kd/HWm3OGLB1y4u/6MnZuqJj6nWHT
wQtuzAun/s1wXO7CZHcyNx32XqX11ZUsvAPHX7zbMTiC+j/DFT0Lm6aR5UYn
cf6lsHu9OpL6HeF2W1/jADJnAzzPOUjVNYr6D8OrdiTZXoyj/nK4qWCujpIs
+wh7R5cf/ZpG/Qa5f8/HauJ+kNkzYWNtPQvDw9QfBL8um2y1myxKhe2r+xy7
KKX+m/D+5A0VVhnU/wH+af9hrA2ZpXcK4+Olq7zMD1K/HayxRiLqSxauhQPs
J7B8U6g/GU51PdXZKpn6S+AeFmW9vRKp/x38NEtXZkLmDDiN/X3wi8h2soAP
v3Lean+SLF4ND2vzzW5OoP5E2FXBTZXQ9PqrsGFBW7wXTWcr4Yc+mRu203Re
3zNKvtB3W/Aaen9E0+BHgun8B2TpCviq/srYCrJiP/zpc1a//ZnUfwV+X77a
bHcW9b+G+9XEeTQWU38vGcZjhlfFLVeofwos2TFu26U31O8LR97P8Ukhq2Ph
DUHZ3jlfqP8S3FpZ8+fdZ+p/BY/J3ul9kCzWycPfPzzi7oIedP1jEpw/TVgy
lFy/HB79drl0iDZd/9gHD+38VDRbi65/FMK9+txd0qcbXf9ogO/Z2LgFdKfr
H93P4vha6WV7lp5PMR426vYqfZAGXf8QwmNlq6eMp+fj7oU77xuzRdKZrn8U
wH9+1h1RaNL1n+dwdz+LQ7b0eHnXfJxv93boZdeRrv9YwBXaJTq3/lC/Jxwt
4PoXkAWRsHn6M14zWZwHa51tXfSDLKuBWye+DHzJon7NAmwfPQe1bKW/x+bC
egPN3/4zbxHsfSA4aB9ZtAueO6M26za9HulpePmEhLprZEU1/EP/8+pnZJbG
OSX/iqFXjUU7Lf8x8JHETcusaPkJ58P1ElW3N59o+e+A80bdkJeQ5SfhDVlG
C5Vk9SPY3i6LteDf8medx/Fkqu6qM2TBSDiqU2+742TxXLjD9Ujjz7Q+yELh
VSlxk7vS9PoceOeTsXsuk9kP4IVy5e1cmp/3C/4zfpTNTLLIpBDHu0W8wfat
tP67wlmjuy4OV9P6HwKbrnlpd4LWV9YxODHELanqBfUr4FWXEkP7jaT+73Dw
uI6jNavp+tewCzgeXwgf20SWz4HX7UldefEJHf+D4ZS6o2NekDmZcKvpm8Z+
NL+gAh7XfjojlCxuh8vU7k6z6fguG3xRyd+lFZ8/hR5fPwtuGNeoV/CYjv+b
YPXuaP3UZ3T8l8Kf5udvDSeLbsP9BJ2M06ro+P8JVqQfDuuloOP/oEsY30cL
tmy+z5jlCKcIR3i50uvhroeHDbz5Zz/9PWEazDvDbh5Er0dSBs/3Kkoc96+/
FZ5SxH7Ke0r9+pexP8xaYTCUXg/HHubNW53WhywQwck/B49V1FH/QTj38LtL
e59T/w14trTJMo5c3wKrPXoF+DRQ/8AinG9vW2LUg8yzhXfyFP4/66k/AJ7T
JetRG1maBDcKM793o/kV12CXtfquG15S/zvY8oSlUf9G6u9/RckXv1uy6THN
L+TByR8vS4PJklVwfGvS5b70/PIEOE578FxtsroYHt3l4tnaF9T/Fo4e3VVP
RT2CPsVK/uOyNOPAWuq3hidrGy3MJMv8Ybd+IsNscn0cHFX98cZ3MrsIHtCn
SXmYzGuGTez0RtwfTes/+6qS/3XP7dufptH6bwUHD3rn2GpD678PvHm/0Yiz
NJ0VC5f+afi8m8y9CKcLbvEsycKXcPaIO1sOTaLtX1uu5FdpGR3xJcsnwrXc
hzERND5UL4MnVp6daEPmxMA+XtrD5BNo+z8PD/s1Z64bTRfXwxuDB2z3J8u6
XVPyu+kM0hhnRdu/JbzeZfWCrVNp+/eCFaU77Gzo9fH2wBktZWZG06k/Hz5V
NK/XPUfqr4NXvro5cCFZ0aVEyWc3dTIdIqB+C3jw+UD3DTR+5S6BZa3BWhPm
U38EXK45kt91CfXL4KT2OpHVUup/BusnJHzpTPOrO13H+HfUpQGbF1C/GbxI
K/h0wzzqXwgrR9mGutF08U740xN577RF1H8Krkl7uZy7mPqfwF/zXXQXkdkd
byj5EcYOIeY0P280vLvzgVZjsmgefEf9w/OkkPrFN/7uHyZ47POl/hNw1aaE
6RfWUP8j+OB/k3oMDqb+P3DFElZb11jqH3ET77durvYQssQdvjn9Y8VFGo/I
t8Npumnt/9F4SJ198+/4uv06h8ZLnCo4zlouMTpK/T9h1zOXzExzqN+4FOdf
4tdvKskyASxyulUec5L6t5b+Hb/O3fg5n/qPwvrmLuGFfDr+3YeXG86qmhpF
x79vcHH3O+5PEun4N7QMx8MX9d/TL9Pxbzb8dmru+kD6PIYVDAct2DwrsZSO
/xmwe1KX+lm36Ph/F/6U3eHNKrLkCxx80WNP0WM6/nPKlfyt3I9ehtV0/HeC
c4Zvfch/Sp//bITXn5wxrow+bxIcgW+KU6y2NdPnP7fg33sGSc52p8+/2uBv
Y2JGmfehz78Mb2G8YX7WfRSZ7QCHnXqwftMAxrx1cOgticscE8aiQ/DQm4LQ
4AD6/K8U7hySOGPWfvr8Tw3fXqJzMSiDPv/Tv63kD+pg8eNSAX3+NwNOY/VI
r79En/8FwoXL9j6beJc+/0uBhw57czKbLL8OjxkcwpWR1e/h3MavGxvv0+d/
unew/YQv8zxHFkyHP96rXDKEnc/0r4HjEy4GOPRiLDsA35kys+M5P8b1cvjE
F94nVSFjtuqvdY2d195mzOt3F++P/erGrDuMRTbwfY8vDWFk6Uo4P06668c9
xop4uHr/bLmKzCqGh2/ya3t4nzH3DWx5Jnrb1yeMhb0rMN4fqjVlzDPGkqmw
4bJ7V8PJcj94auiK7t5ktQSeltpoLiBzLsPt852/BJMFTbDL22L+U7K45z0l
v+tpD664hvonw8terzi8iVzvDfdSdhMfIbP/g0s/5l2e3Ej9F+DNozpc+t1A
/Y3wSS0NH92OBUx/j/vY34yds22NBmPFBPi1cdt1bzJrGXzx99wHr8ncaLhX
1K0rFpqMhefgx/9pSJq7MZa8gPc09ezQsQdjuZYC80dnCDd3Z6weB2//NDrM
g8xZCkc/72QXos1YEAVLkppzd+swFp+F18YE7ppBzyerhb9O+FRrQvPXd65U
8jcVu3ZPJLPN4c+FBtuKybzFcPNkvZomen2i3XBY15qvWVrUfwYeurd25QF6
fsVT+Lhmsa6UzOpUhePNTL8/R8jcsbAirOPI1/2ofwEcETD9g98A6g+Hze46
DC7oS/25cKxgzMivfaj/MWxxvG/TTzKnwwMlf6ar5hyj3tQ/Cp7bXDtH1Yv6
PeArg6c53mBTfxhct+Hawtfk+uPw16rnYfb0ePZDOMXObnc8PT/vNzzS6cKK
qwbUb/oQ6/vRkqYRg6jfDV7/outGsSH1b4PVTn9e9iezsuGlBz4YFpG5lfD0
mINurUbU/wO+U1zgzxpO/cMfKfnn08Yu6ziW+l3g3d3nx5qYUP8W2ORx93f9
R1F/FuzT1WbWELLgHvxn3eG16SOp/yt85FblxGtk2ZDHGP8Mlp/oZkH9znDq
9I8mGWT2Zjh/eEBcmCX1p8PRuWc6xJNFd2BJ9mDDGw7U/xk+Uj6x/RlZYfQE
xw+rPHMLAfU7wU8Di+yGk7kb4PScldUH51L/4b/Tew5d30zTJeVw03e9n+vJ
8o/wf1KNQwODqN+gWslvi9wtXUDmzIQfHO5jNXMt9QfB3B1Vky8tp/5UmGdq
+J+bH/XfhDMHp+kcJtd/gOMTz7nO9qV+vadK/nOtuIon3tRvB9vrcjbZkUVr
4ZSAlrNFXtSfDH/70G3vhgXUXwIPqNmUFDWf+t/DjeXXh4aQuQOe/X1/a6+H
koV8eMSZBnMuPV6yGv6zp9MoGVmeCH8377Byggf1X4XZmxe4mE2hfiWcMmvU
8m8TqL9vDY5HK2rz20ypfxrs0WPP+hBaf2Qr4BlHZv+4Tutv/f6av/ur3tEf
aHtkX4Gf5CfHltL2w3sNsw3SOK3W1N+rVsm/HnSLc2Qc9U+BFwU9WWBI64fC
Fx6po5nf04r6JbV/j09d7UomU/8leN4Im4L+NF34CnY5lj1KTT0SnTqMl+Y0
TvM2p/5J8Mtf3j9W6VP/ctj2wWVnQ9oeOfvgrbEu5S8GUn8hLNDi3fygR/0N
fz1spOnnP7T/7/5cye/9cceJPa20/x8P93qSFF+lov2/EHaMO93ecyvt//fC
7nPMdl/aSOOfAnjC95fhwn40/nkOR79M3LeqjcZ/XV9gvFyuvhfdhcY/4+Cv
6gvvfG/T+M/z73TTHAPXmzT+i4QXnwyWPaHxpCQPNlPl5flzafxXA3+qeynO
HkHjP816Jd9ocWKR7lAa/3HhnR2er5lmSOO/RfD9Y23vXfVp/LcL3t8p8f0+
bRr/nYa79Niw6kAPGv9Vwz/nlHZ00KLxn0YD/n7XafsO69D4dwz8Rh5W+Lkr
jX/nw+X6Z0/odqbx7w54Qpb3oWd0vVtxEvZ5te2Yy7/r34/h1+Pzrthm0Pkf
qxHjHWcPr68xdP43Eu65Wq9T40Y6/5sL/+eZMec0n87/QmEPH2dtCxs6/8uB
H/q93xM3lc7/HsAXiw8uC7Ci879f8O788vP+ZLHJSyU/r9vem58m0/mfK7x4
TJte8SQ6/wuBR6y5n7tqAp3/HYPfBw64GkTmKf5Ofzt+zxay6Du8Lja5feNg
Ov8d9grHp/iIzc85dP47B179XHvNAEM6/90CT145s+smferPhPdrGef1Iwsr
4HvJK63qxlB/Ozyn0tWNNZb6BzdhefF/CjtNof5Z8HW1/Hg2mbMJrnnktcSU
egRSmGP/+Oo0e+q/Dc9xTUm4SZZ9gj39Lhz8OZP6BzUr+QUFltEZM6jfEXba
w+r9hObnrYdtE594jJtH/WnNf6+nPg4TulN/GYyxfQ93sqIVbhh7ZK7tQuo3
eI39ia/llG+u1G8Pv5lRN61mAfWL4J4HlzoUkyUH4Q52DZc5i6j/Buyh/3Oo
iKarW+Bpd6u6X6DXyxn4BuN9aWGdB71egS0ctSXXxIXeP3EAvDlwQ2YTl/qT
YN+MU3pKmr/+Gmzxo0fJSQfqfwcfKl63Pp/M6/8Wx4P7nvO3k0U8uICzSn2f
LF0Fry98GH3LifoT4C0mWrW3yayr8KwPv4KqaX7uW/jqJwf5aEfq76PE+VLN
294Sej0Sa1gw6Y5uMFnuD7f7niwsJ6vj4I3P4uzH0+M5RfAbTc8I/VnU3wwX
7plVaeVM/WyVkv/q6KSBO+dQvxWcdah/itFs6veBKzZs/RJkTf2x8N7Pj1+u
ovWDdxHeNHS+NIEsegln991p40jbn1T7HY4n6qlSA9q+FBNhq/cd5Hc7Uf9y
WH9D8kVzDeqPgSs6rh+04xjz+Z7wPNxTsaxwWTZ9/lcPt7b+5l6MpM//ur3H
eCnT6uiwKMZqS3i85HvDUTLHC/bdcHZQ9Fy6/20PvGhaUdh6sjgfDv9+8sRN
N7r/rQ4Ou1ssq3Cn+9+6tGB5mcs5I2g62wLOtvbMaZzDmLcEDk1w6hXozFgU
Ad/v4jNBjyyVwTsDj00LtmaseAYnLd8liSezND8o+RO3iYtDpzLmmsFNy6YP
OEkWLoRDYt+URJMlO2HuXudVJ22o/xSsWmxd5UhWP4H1eSdyD5I5HdU4Xy4/
aFpFFoyGq0Uth2ZNo/55cDfp04fiSdQvhpUXvMf0oen1J+DwpXM7+ZPZj+DX
WqyvA+j5eH/gXoUTN5yj6aIRrXi920dc30WWusPXJ2dPdyMrtsOKhzbF4+nx
rBz45OJR3Daazq2C7b71vvuYLPwJHy8eOSuYLDH+qOT/cpu1o9WK+gXwSvPK
e3smU/9WOKLzPK0mer84R2Gj3NU3xPR+C+7DnlfODy7hU/83OGTbpC22HtQ/
tA3jx2pekcY86p8NN+t96rNnIfUHwzN7WaZ7Lqf+DPhs1xWv/FdR/11YeTV0
3rIA6v8CL37m81EQRP2cT0o+a1B2WbqI+mfBG6a3zTlGj+duhJ/zDGqS11L/
EfjD6rXmB8mSW3D56iclFWR5G+xx2OBs1hrqN/ys5OcsyBvEJXMc4PGnQqf2
os/LBevgb+GJLd3J4kOwzCgyVs+f+kth58b3Xc6Q69Xw9DTh19M0P1v/C/ZX
m+4U1ftS/ww4LqLW9AJZFAi7c5ZNjaHHS1Ngs4zIkEFe1H8d7jlskochmdUC
P2S3PFo/n/p12/F8t91neZGF0+H4rN6WJ2l5SNbApdzFPb/R9is/AH+aE2Wg
Q8tPLYeburDt/QXUr4I/ZPx0/OxC/f2+YnvIfTuzD00X28AFjnlZ5rQ9y1bC
3iMzud/J9fFw8/2Y2WNdqb8YVgSHmJd6Uv8b+IbFxA02gdTf+5uSb3OtQi2g
5SudCudViAv+/Fv+fnCQ9gq+1jrqj4ODt8SX2EdT/2V4cnuO1RgJ9TfBe4rj
w20SqL/ndyV/zdPM7WqyfDK8sPWgsXYi9XvDQ8/0SluSQf3/wVejOqT5kwUX
4NzO/bNdaH8qboSrzXOMYnKov8cPvN4ls4YYnaT+CbBB5M5huubUvwxuXvn9
Uaku9UfD52qHzz/Kof5zcPDc4fscTKj/BVxmMmepK1mh9VPJP31AWJliRv2W
sH22/g65BfUvhev2eb4oIAuj4Jff52zIJUvOwvqvzUPf0P5KXgtbDcXaQNu7
uvMvJf9FfcmLfrR/4JjDIYfaarWnUP9iOHj2qbDkCdS/G1anzHa6QX2yM/CC
zdYdH4yh/qd/n0/jTdPnodTf6Tc8krXYuDf1j4VrN0Xd2EEWLYCPzNi7b1IH
6g+HdYoPOyd0p/5c2DkrL2zuT7r/5QkcMvJ4xrzPdP9Lhz9Kfn/1MP5lNd3/
MgqeHBm0u0TFWOIBJ66+kG/xjLE8DG7cklZu1cBYfRyu6r/QcX8dY85DeJvo
9upAml/wG9Y/dW/GmeeMxaYsFT9gXtyKvWSZG+z07POxgeT6bXDy+52122sZ
s7PhIzaLmmsrGPMq4ar0lTVnSxiLfsAdbfu7zM5jLB3eQcWfmM3VNI5nrHCB
i979ivTzpP6tsEF3761hZG4WfHte4vY2d+q/B389rTdII5T6v/59/N7gmmEh
1D+ko4rPPrTUvNMy6neGhU2tLmuF1L8ZflP72sfBm/rTYa3S2/ovFlL/Hfh2
VdaTUD71f4bVmyq3WT2h+7+NNFR8m9Hej87w6P5vJ7i9fvTHQ/0Y8zbASyef
GnQ9g+7/PgxfuVikdzOSsbQcftjBdmDEDsaKj/CbC+O7lWxnzDLspOIv9Dcf
ExzKmDsT/hL6ZQtLwFgYBKeNP7G4rwNjSSqcsL7/m6RpjOU3YfO8ib69ezFW
f4AzD3JHf2cz5uhpqviBL9x3vLnE3B8usIOXbJRe909lLF4LPxicmjfgEGNZ
MmyxPExr7F7G9SWwjVPf4BZ/xuz3sLn+q4Hhp+n+7wGdVfxLesHDn7jS/d98
2GCr7arIgXT/92rY4gJ7Z0wV3f+cCB801CxzO0f3P8vhpC2yqB7RdP+zEo59
Yjfiy166/7lvFxW/OD/qqBlNl0yDr/1e5+MTSfc/r4Cd4rZlJP9H9z/vh789
b7tm/oi5/4xzBW4o9dawespY8Br+b6B/UMh9uv+3V1f0+Wqt/byHuX9NNgUO
dtnoe86d7v/1hU0vsNgDljBmS+DOWxM6T1pA9/9eggXXtt4Ld6T7317B/VvL
0g46MZbqaKn4q1KH6pXRdMUk2ODnuG+1QxmzvGHdxU8SVIMYc/fB95Mj3wQb
MRYWwtp89rMkQ8aSBnjFsyvrjnEYy7t3U/G3mlZvdB/MWD0eDnrWNnCBAWOO
EF4wtCL05UTGgr3wpiU/810FjMUF8MUo3Z8G1Ct7Dne9k/ur1IL6u3ZX8Q8k
nQ7xpMezx8HyLT6Lr1fQ/X+ecENj8LbWUsaiSHjNBcPc8sd0/3MevDlrx4Cz
VXT/cw0s2H9pSdpNuv+5cw8V/9itHF1jHernwu6/d1UcP073fy+C3z3lr7QV
MstPsgveIWi+mr+Ysfw0vCxKUPJgKWN1NRzK1zk2bjUtfw1t9Ozx7CxZS8t/
DBwma9JbtpKxeD6csDBC++oOxrIdcPmKUHHsTrr//SS8WHYs9jeZ/RjuXPi9
JCmR7n9n6aj4Q/57qXUnju5/HwlXzY2pHpRN9z/OhWss+VdHnKH730Ph1UYR
cew3dP/7cbhAubhTymu6//0BfPR2YoiDkrHwF6xasPhlFFli0hP7w8x33cUq
6neFLe6NS9d5T/0hcNWA5bOGkznH4Pfje5yPb6F+BSy+rbuj70fq/w4HBQRf
LifLhrFV/LGtR5Mnf6b+OfBe26aEfv/u/98CPz5xNt28hvoz4Tkthj93PaP+
Cvbf7efG6xCytB1OKrNf6ElWDO6l4p87OGdd33/9znAeZ/3s/W3UvwmeUGby
OpBer1AKb26oKBVSj+Q2vKbhsXXFW+r/BI/dcWKtD70f6kG9Vfwt4oc2fDLH
EU5uFSUFt1L/etjc5c6+a2XUnwb/2vJkpVE59ZfB33lOea3F1N8Ku9nvmvrP
bIM+2F8Kq97s2Ub99nB7C2/NIbJIBA91W/np/RrqPwhP3Ry8RSeA+m/A84Lb
zNXLqf8DbHWv788QWj+5A/vi+Yq7nfyyjvptYY5O3aSAD/T9hwB4guMev6Vk
eRL82DymcTtZfQ1uK4rwClPT9x/ewVkTu12f9Iq+/9C/n4rfbdnpZ9ZK2v/x
4OG285amvqbvP6yCl30Qf79Frk+At3uWzp3/hr7/cBUOvzf5Yio9nvcWrne6
M6f4LWNRn/54v38Pm+tKllrD0c6tCRPICn94X/rAM170eNZ+WLl36gBBL+ov
gkVG/Usvsam/GS5+OXTq9960/NkDVPxmhWSxpTYtfys4teux7rt0aPn7wI5x
8rgAMicW3rI7xnndEFr+F+GmXb4tgoG0/F/CO5477/xClmnrqvhjZqXVfCPX
T4TTvzW6aAdT/3I4+ZtbyIUg6o+BG1aXVF1YR/3n4VElL8JNhdRfD98Z7n5/
B1nRbaCKP8y0zX/OQuofD6ccqwpssmLM9YLPu3WIbp9I+789MOc/rYumk2j5
58PqCtGAxZa0/Ovg/XfTZs0iq7voqfgyD6P2Jvo+C8cCVm7O/WNJFiyBHd2G
KLPo+cURsFT2wmHYAdr/y+AnLMuGkH/7/2fwGGv279c82v9r6qv4sy7sZo2w
o+OfGezk+lHjly4d/xbCT2/0HhVdSfv/nfCZqyab5j2g/f8p+AN/0s19N2j/
Xw3Lq5d8MZHT9186GuB4vGJNpm0hff9lNDzbuJtxBk2XzIP/FBuHnybLxfDd
jjlDdpPVJ2Crx3fVO67R918ewUkPM8+0XaX73//8ffyurI4v8+j+9xGGGI9N
DrGfX0T3v7vDhdpDo3xy6P737bA4s3PM2KN0/3sOPMWz8b7nKTr+VcERjrLH
j87Q8e8nbFs3NklJ06XGg3D8qZjuuZGmKwSwz7gH011OUn8IvGnsoOEJZO5R
2Fe47vgusvA+fNSw/39DT1P/N7i2vs+YM/T88qFGKn6fbXo1x8nq2fDNs4E+
Q05QfzD8IHfx1v3HqT8Dvvf6S5enGdR/F/544pLV+Uzq/wJvuRV6Modcz+Fg
PDVhfnkCzc+eBceeuzVuL5m3EV6qcWZMPFl0BL4miXtnTI+X3oIjmz7+6kZW
tMF7z8kW7SCzBg3G653e8WufMOp3gL9b+bRnkIXr4HmeKSZX/aj/ENx86HnM
dbK8FO5p/u3xKn/qV8OGa9ZmmNtTv/4QHG/f3BTOsKP+GfCAC6/KLtpSfyDs
9eB5+dHp1J8CW6knDz5Err8OHz9TciiGQ/0t8Jtl5+9JB1O/7lBsH38e57kM
pf7pMCcp3HJif+pfA09Zmz12Zj/qPwBnBXSLX6VN/dfgkVH+yRZdqV8Fv5Hw
vnl0of5+w7D//TXAJ1OL+m1g5VrfcebdqH8lPFHP2j2Vpqvj4Y1BVV+fkznF
8K1xz9y6alD/G3jE2s4F5xrp+1+9h+P1dIl/bFlL3/+aClvOcPJpeULf//KD
ozzPSxa9oO+/xMEBwRPvfSfzLsNai2WjutfQ91+aYIvzT543kqU9jTGe8rLM
SXxK33+ZDEfECI9EkVk+8NzH4xYJaX7uf3DGBysHu2f0/ZcLMOvcPa9dNL+k
EVYkruFE0+uT9zBR8Xf6HxeufkTff5kAR9Rad04hc5bBi77mjyi8T9//ioZb
Jcpjryqp/xz857hlt5+Pqf8FrKO19r5OCfVrmar4k/zPr9pPZlvC0d8L3l+V
U/9SuAPHeMBimi6KglsWqF4vL6P+s3DDiQslGeXUXwuzbLQyO1ZQf5cRKv62
5oyGWWSuOdzttUGwEVm4GE46eWXX+Drq3w1ffuilrKyn/jPwjcqKwLNvqf8p
fPJa/i7/L9TfaSSOD3MDv9Z9pf6xsCqvefLsb9S/APa/Fhz35Q/1h8MKVsXa
7Sxa/3Phy8k1+pdoOvsJLFnimN2RzOswCtO9J/jGk0Wj4Isnw//bR5Z6wGuK
pmcHkhVh8KA1SV1FZNYJ+E7A8oontL5yH8Jj92V2T+5M6/9vuKlo4ubjtD1I
TEer+AP/C3V/R5a7wfo9m1w/kdXb4AerGmru0/bEyYY1Dry2f0oWVMLya9/W
vutI2/8PuJPPO+3cn9Q/fAy237uCUcH0/tS7wIceTZhQRe8feyt880JJoT1N
52XBGv0+26SRRffgU4o34zp8p/6vcI1/dLA7WTFkLPa/zgXVfen1smbDfVd0
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
i2j5D4lQ8SvFWTvN9tLynw2zZ7XpjI2l5b8ZDvTzWekYScs/HV7bsHp4QwQt
/zuwrPr624Pk+s+wYoFXxVEymxOJ87ObAek5dL7Hc4KlbBPu9I20/DdE/v2+
S1W7E/196WH4Wqfg8lh6vKIcPjv35sBXtDxZbXCPtjWBLJqfaxiF80vPQt07
4bT8Z8KhvyM+X6P1VRIER5fvXXODLE+FjViPHI4HUP/Nv9Pf17UsInPUsIae
Sy+7POrX26Pid1Za8kryqd8Ofmm10nThOepfC4/PGT2/9Tz1J8ORp3YbbCCz
r8OfT9WPOVBI/e9hgf7tcx+PUf+Avdj/Vo4U/syifj7cN/PwIItM6l8NDwlP
Gj8hlfoPwG9SpjRfJnPl8GZRh+uWh6hfCSt8XPJun6b+vtHYfrZFbCgny6fB
keaLH3e+Qf0r4KN+vvPW0vVnTjwsL3pyIL6A+q/AJyxTzzleov7X8JdX9+om
U4+sV4yKP+rh6pOnrlP/FHj9Vrb7zVvU7wdbZl91E9L+kCeBi5XpPovvU/8l
uHX6HQ/3B9T/Cl7kP23S0FLq19mn4vfRnpSaUUz9k+Go0oLGNxXU7w2nSvQP
G9P1A+E+ePzyiuHVfWn9L4Q1XZ+HTXWg7b8B/t1q8WjECtr+u/+n4l+W9xh3
YAtt/xPg0lstbMMNtP0L4aWnD1kMIov3wu+/hGWXkmUF8LT6lwvXnKLj33O4
hcWePpGuF7C1YjEezw3OvpNG2/84WK+vreeMEtr+PeEpDXfnCcnSSLjLRo3D
bp/o/DcPXvZ7U/pSfRr/1MKnv2TYbCNzO0tU/IqO346VudL4hwsfCn+4o89c
Gv8sgtvtLoZHkeW7YKfNKWPyQ2j8cxoeu6tVR3srjX+ewjHd1neJIws04lR8
/h2XmIhgGv+Mgbu/tHn8OZTGP/PhUs5Rs05hNP7ZAZ9bEa6jT2bnwlmzN32V
0HiN9xju8ngI55WExn+s/Tj+vm94NY6mS0fC+snFtmU0/lTMhX8Fl45rI7PC
9v/9/Lxk7w8y9zgsHXJfN4ssfAD/jng5LY0s+QVvCS6IyaLxqtwkHsfPbcHv
y8hqV3hvnX25ayb1b4v/e/3CdMtssuAYPGCj3Mgsi/oV8PIZBrOVNF32Hb5t
+LbvUppePywB52v+G/WPp1O/C6zRuc+m3mTeFljw7aGfMoP6M2GVsXXIv/ml
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
XQrHaIEP7JTb1uDrZ+aPgocb7lm5mt/XvRBe10/pzhh+n+AWWHjUKuy1lOs/
DixD+XR815ndTcw/C85r06FTPusTwu3wqAWNIeG0Yzj86PPnva4/mD8PTp9+
8/5wft+03/C3utmGV/j5sv7lNWKFCw/sflYzvwTuFxRpZFfJ/FtgFdVxyya+
Zf5QeOT9aQkXeXzjnsM35ft5P6QrfsDfGn73bfOe+fVeo36sFdT9E39P0YzX
/+ZD5shvK2b+jfC2qEzDaP7+wZfg3eH9PobRuVnw8Bu77tqmM38jPH2dXvKM
q8yv+6ZGPK3Tq789U5nfEv7TFPJc0lr/Ww+fWCTcfNaX+S/CIx00A3/Rssfw
bd8R+teGMX89PCznyvgEWtKrokYslX7NrR/F/FNgnxM1qZOsmH8dvGJ6jKuP
NfOfhx227E34ytcFmXDSdKsYkxnML4N9VzycOduc+Xu8Rf1+x/y0ZK7PGWwO
K1//7W5izPyucEGbiEGDpzD/2bf/+nOH9zooZv50OLJ+XSfFMcxfC1fmpu3/
RPtrvkN9f3H3wZb8+zQxPH9h4YUfk5h/DZz4bfDiGkXmPwX7lri4HFNh/jT4
ZudFc2dpMP9nOPaPvse8HsyvUYny8FHs9CX6zG8Cj9lWdaANLVgFL9zxrcm2
O/Mfh62evxq6qRPzp8DqKT0bLiozfzW866gw9+UP1v87v0d5dqDjq/b1/1vO
GD6RcTxymoztn+Xwu73zDOO/sv3jD7+9Z7d6Qg3bP0mwq3vg2ZgvbP+8hzeX
By+s59/LOn2oEacUJ80I/8b2zzg4U7/9XEt+nsQJnlLtfnxUA9s/h+FUk2KV
g3Vs/9yGA1/vqxLRFW9hi4GD5urw/QWqVajvLK8fX8z3FxnBDYf3hbZ+nrsj
nFf0blqUlO2fA3C7Ktet0XTuLfhBvHim92fmfwP7lS4u061ifpXqGvHDELdL
K14w/yj4l13kiw+0/yI42Sr8put75t8HV8UfP2z0gfmv//v/sdtm55Yzfxk8
WuRRZP6O+ZU+1oi/ynX3rc9nfiE8R1o127yA+efDMm+f7855zL/n47/6sVK8
Ky2IhbPPWqkr8O9FJfDdtplhr5OZv+0n1DfqlXd9ZXsyeChcbDzoVmxH5p8D
W31pKG2rzvy7YLNZ+5Rn0sIY+NCwUWYXq9j+L4KDy142+L9h+1/uc43YekL9
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
4n467sXw0fo+L4v5PCm4zSi0T4fl/PlM5w6Bi4P+Pr87k+XZbNgn1vRD1DSW
Zz7w6XFfpUHcb8cxCh7yonFrD+6v418IjxrSNawjndYCb2gTk6owmvkHjsbv
f8g0cDXXm9adBe9cG/nq1UTm3z763/13uVx7E+YPh4/HppRu5nwwkcRQKs53
GdSy7gvrp1vg4Q9DP63k+uDBoXDT3wyBB537HJ5YMmHiCCnrpz/hzWFntmtw
fWihnhG+XwebyTV8fuU4A56xqc+GlVwP3X8jHCtYmx8WxfbJJVh6yLF+NdeH
l2XBnTa/MVHievK6jfD5aIOw73xeJdEdg/t/u3j9n2Fsn1jCk889+1UayvbJ
enhX/5EZ2iGsn1+E/+hdOylHC57ATdusE85cZf28HnbbsWheM9/fvddYHP/Y
8bva8P2Dp8BvbdPTf3D+VO46OPRth/nnud+C3AX45k9n5YeezJ8JRx9tu+op
7SiDX+QUPT1wjPl7jEP5MMvZRYXzR9PM4bbvpmh15HwumSussPNYeDP3X9A9
C8/xUBv2jJakw6eXR5V25f4NPrWwp/7hK8f2M7/meNx//mhqfuD7VYjh4xeX
POrYOj/NBc46UVnfja+LTsGrpM3DEmj3NLjQIvzWSL5f8Gf4wPIe4y8fYn6N
CWhvLT1ntJ7fX24SrNC13yVxAPOvgpU3ZeXk8fmh43H4U+yHPzl83T8FfrOr
4GCv1v0pquGr4SckVfx9ZJ2NpWKrqLm5HrSuMby9zWJlixPMvxxu67Tv/A3a
xx+Ouaxgk9u6P0ESrHlr5KY/dMV7WCX9p+ZvWqA2USp2FOqdOMf9DkTj4JBe
Ixw9+Lq7E2y+PWea2x7mPwz/GbeizTr+Hrm3YcHY3Q9baLl3sHLg7SJLWqhq
gvJSUUHLmnY0gruYlZRuaD3+jnDG9emCMjrtANw3Y97wSuaR3YIviOYG/jnD
/G/ggq7TJUu5H4NEZRLqx5szSrvwfPUZBfd41TzVjddL3CK4aNVGd9/W/Rn2
wT3HJ9bODGb+G7BOw24nc57PojL4XJ1h23N83V1JhPLwofvPTF/mF8KGSZMy
29O58+EuH8y8rvB5r9xeeNESn0Yznj/CWNi1z9W5q1vzl8DTeva0XunP/G3F
UvHG42d+x/N8kM2BazcNeeTEz9fdBe/pmR/Vs/V6j4EXm03Ke8Tfw6cI/rg+
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
wTc3Cb7z7yua4YjR91N304KBblJx4AY9A5WXzG8L597NHiv/hvm3war3J+kN
LWf+K7BUw/mKUynz58I5hYvL8vn3cr/h7rLdVm8qmb+/u1Q82eVP2HXacSZc
4lzf5Tvz+m+Gx9YtNz/K8Tppl+GHmSdWJgzg9f8M/rBlev1xTV7/P+B1e+eI
D3F9Rknfdbh/zf+RPawbr//p8MPiF4o+LD/jNsAdnvQeGqbB6z8Y3vOmS/o1
lleCLHj3wwcqe1ieiBpg2+KbXmNY3rjreOD61ZpzxaM7r/9psI+Gu/VVfn6u
J7ywySLjGy13EQ4/3XPI5L4s7x7DG2IOlQdwvUjHb/CX9VbjlnK/Cn9tT6l4
Uc/YlXl02mR4htmi0HccDyZzh7O8M2vkW+/v5+Ffae1j2y1j/ofwsYabT/d7
Mf8XWEnd4K2JL/N3X4/7iexdxACOF6wwg8t7qPvPYP1U4ApHLcpw2cv6negM
bJ31yH5eCfM/gGsWPY3tyPXKgqVw16zUmtrtfL7WzQu/79SBZ3K8WX8Xw/vO
/xi4m+NBhGvgxB8Bb+y4fpbjSXjq0a02/StZf0+FI8vzZhvXsP7+Cb51+mTg
sNb9z9U3oLwr7XL6Vuv+nybwwiDTuv7cb1qyEu5R61ibwfEePsfgq+ox0wq5
32ZcMuyWv+VTAfsfKqrg3hd/dRzC/S0FnTdKxf3mCzuHjGf7ZQL8c81tpylT
2X5ZBq/ulDLu1ly2X47COQuDVOtXsv2SCPutk+4t3c/+kvf/3u/GuvBRB9hf
0mmTVHxvwn7R+bPsLxkLP8rbrvI2kP0lS2FP9/VqNpfYX3IIzrk9qPj8NfaX
JMCrpzkcPh/D/pK3sNaorCXXaEmHzWjP7/uaVsnxDT6GsL6ng2hVBvM7wJL8
837L2R9fsR8+PmrbiZ592X69BWf6+oXqDWT79TWc4lFqaChk+7XdFqm4MLB/
YTP7w4JHwi9Gm6X8ZvsxdyGcv9z2yq0RbL/ug1euzjF+RwuvwwVly00DBrH9
+goOE4lrNCey/aq4VSrufMN2yLvxbL8Ohxe0dz2sLWb7dR68W+/941uT2X7d
A9cEPXDI5PeTXIOdA+fsc3Bk+/UlfDBpZMRkPm+Ik9+G+tjPs57rW8d/G8Aq
vWJWDmZ/qmAOvLZFbsr1KObfCftK1C16nmT+aFhH2M3X/ybzv4BXR/XvEcXx
5bl/4fQzgqTLlcw/eDvuVxFnNUP5vFNoB1crK71MUeTzqx3w7E9yeUZ8nuMf
Aff70T1c1sT8+XCBQ9GAgXxeKPsDS8bfM37I54m6+juk4i4L2iamtT6/tIFT
XIeVXuTn+2yFfQ28e82j48LgAx7lX8e/Zf4cuMl/dVTFZ57/v2Crp+4XTRby
/O/njfbn9o0CK0+e/9ZwF6nz5YsePP83wX3SU1ZeWczz/Rl8YuXu90tdeb43
wT+O+k2dwf3SHfv4SMVtbyj/mNq637sVHNor/MFmrp+X5gUvV77t68v97WVB
sMqOSXIa3P9V9ynczaPT3Hp1nu/fYf+xb9cJW/e77b0T7dPE5WmLuB9u3FT4
Zk9D4Ri6wgPuO/mvsQ7fXxAI3xGafR7F8fGiR3DM7gnWK/l57l/h8fvW+tqy
fzG45y7c/xLbvgpo3e/eApZ0WXnqYCbLO3f4lo2zw81ElnfnYGfvRQp2SSzv
MuBui0rGilJY3tXBFUVjVV7SaVq7pWLDrHMpluzvk5nCjvEj4qvYv6i7Fp54
96T+TvYXSk7Dlys0u4Sxf8LnPpxTu837zFE+r6iBF6mN3jOb/TMVXfegPOhm
YazC/jiBCF5ZfKpnZ1q0Gr45fdc4bZbf7ifg7n9zGiq53mjwPdjv74zEkNb9
3j/CnebscY9mf6Sc+l6p+PN99aWNHD8onAjbfny7fgj7Ix1XwJMKzyXIcTyh
fwC8LtAuNIP3h7S7sM+JHmczHzD/B9hb/1TkQVpX4Ivvm9L7QQrnJ0jGw2WH
F8+6x+c/Ps7w8/6fz6TQcUfgLvVGXkNfMv8deMw93cizN5i34z4cv7fvh0/h
8yH3MfAu079PSpOZdwnceVhIl1u8P+UehGs7l80+xPkTcgmw7yr1qpMNzFsB
9xsn2eciY972flJxdPMDw1u8n/mPhjsGutqmtN7fFsO/n7UzH8bzSeYHpw9L
c/7O/indm3Bgdlx7Gz5/kpTDY+YF1s7k/to+yvul4soXuuM8+f3iRsDdEz0S
e39m3gWwjrHqN1veLwW+8Lc6l6lveP2I4mDJq22Lj3N/aPdSeGj7RwVdDXl9
KxzA+Vy1bFv9WN7fhsHayw20+tvwep8HH+7by2i8Ja/33fC8gOaFCnG83q/C
XS/UGwRzvE1am4M4X3J/3VjD8TmyIXCXeTZX7tO6s+FIeXfH/nx+KfGBL0i3
vxbz/uATBf8ZsPLwsNb1LAthM7uhqxWnsDxrgf2ak33DprI8H3QI9UXr+ufJ
Epbns2CFqIkBY2xZnm+Hh4dHlo3m+pfB4fDrN8v77uT9Izfvn71WbjKg5f7A
c0y+hG+khQMO4/i6eX8IP8v7mQSe3DSzrpzrF/pvgRfcGTxXwP6jtFB4Q6+P
Raq07Dnsu7vDhGk1zP8TXhjytGIN7xcSvSP4vbv+HXu/A/sjZsCav69v3UTH
bYTlDSeUfWR/TsUleEt2F5tl7F8QZMMmk+Zul/Rif0QjfH5vyPX1OuyP0D0q
FT9bcPbbDs6vCraEhZpmC63Gsz9iPWywa8+847RcEPxiaHTYFRH7Y57Aswoe
57dr7X+rh9ff2pdg5cT+mF7+UrGaoUJ84nL2x0yBZRuKvfU9eT9bB3tqWF7f
vJn9MRfg6/e8zTT2sj8mEx5xausn89PML4P90uuOd7/A/D0C4KhrjbLW+Wzm
cPjFmL2H+LrADU7WH2lry/lrorOw1vILn+ZEM386POi6nXJDFPPXwiVPXi+2
i2R+zWO4XurV/Qrjmd8UvuD15sCqBOZ3gUvGvw2s4fqLjqdg0UChkw7/3j8N
ftPeS7z7DvN/ht0SfJ1cEplf4ziu35p+PVbQupPgWQsTljpmMP8q+PTT9Hqv
TOY/Do9Z2M7T6RHzp8AX7lu9DKYrqmF1t5pa36fM3+UEfs+QFQvf5TK/MXxF
/fPONp+Zfzm8S0fZs/0n5veHh41XPRFC5ybBby8d2qPyi/k/wPcjNl5+/JP5
1U6ivListf+YMeczjoMnzHFdaybifEYneOaxK3cncL5j2mG484CCWp3RnM94
G146q7JTI6377t/73Uu8PcWE8xlVT6E9eyO/s68R5zMawUHT32RdFnI+oyPc
OS12uz5dcQBu65nvUTGC8znj4a0bf53Qp0Vv4Pqxs+eWjuV8TpXTaF+7uulY
j+N8zlHwvT+y+VPGcD7nIvhim3LBLn4fOT/4eVif8ieTOJ/zBjzTvM/wnczr
WAZnbjpxpKM58yudwfUzLr/McgbzC+EQ82btYbRsPtzvQ/d6J2vm3wvHmygZ
PaMlsfDu3peHiiXMXwJ/3XS6ZBPnk1YMPYvv17J31sf5zDsXDj5m6XR+AfPu
Ovvv+UXi8zzOL3WPgW1fn2qbN4t5i+Dvh8/tNprLvHLnUL8JSTbQo+WGwJei
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
19OuwC2LYqXanF8hy4UX1bxZ5sP5MLq/4SMaAZKy1vkm/R/jfudb/20G5zv5
zIST926obt1fKm4zfHHZ+4DBrfNNLsOlgR83pPH/Bc/hgF/emdGc7yH6AZ/e
cV768zT7C/o+QXkpa8jXYn9N8HRY9rTDmK507ga4duzClSe5f5vcJXjv4bVp
AcrMnwX3Moo/EKrC/A1w7IBKpRftmV/nKdp7R/3rvPn5adPgDvkm1z62zjfy
hCdMi3Cq5+u6F+E5vnX7BK3zjR7D1q/t/RLZH+TzDTY7F/Aq8jrza2dJxQO9
ij6/oCsmw+3zYkdNY3+IYB28b96i2OnpzH8eTn4T7Xn1LvM/hF/JHtgfpIO/
wJOi9m+tZf9XbvdsnL/VA4Jl7G+RM4cVXQ18K9m/IXSF012DX3/ifCz/B/Be
kfu2JM73SpPCvs1Cm1TuVybr9gztQZHI1XI584phlS29LfotZd41cPWpPjGl
S5j35LN/4+tz3u2n41Lhe/I1JrZcv6niE5x/48WiLfOYV+M5vLedpNiBeU2e
/7v/ZkfaOTHvSjhketeAqNnMewx+t3DrBa/5zJsMS6LmunXlfpJy1XDDXueI
Kn6esHMO7qdTAyNHcn9HxwlwWucDPRT5uv8yONC1KLCA3zftKLzV7+RhK/69
LBGeMTnr0gh+X933sNGVLubDeH5JOuWifhB1sTiE+1X6jIVDT29RS6XjlsKp
445bHFnD/Ifgmct/pMRPY/7b8DIXj9UONsz/9r+W7j2eqT+O47h7yK3IJRIS
pYulEFGb5JZKQkSZkC7KKkI3U1IqWiqVS033dJN01WVKFyoWKaRIpLDoxk+6
/N6dT38+H9vsvPY9+55ztm8LvvWiqUmBft+K1/8Z5pMzTQtrp1BvMOyduMFc
TL8nIrUdnhp7Y90n+n0SViEsmee4fRD9f4vcN7CCcnNZEVmgWInjm5mx6rvv
tN7FCp6a8nRqEv2+VVcQ/LglXG0Y/Z6N0VZ4qOe905n0/zN6XYT9TQ5lXyHz
X8HXUk6sMH9D613kq7D/Hxo979YrWu9iCVtbKLXa/fu9q3mwyrI5jtNpPTI7
CXZZ2Zv849967fOwgqnV2jz6vShhDax9ff1r23Ja7yPzHPPPglHNnbT+mTUX
jhv56WQMrZ/mJsKnJz46N5UsOAM3LP9zT0T/f6qoGhb96rcvi9z1By5t26h2
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
19H487vhzEPlYv/n1G80RcKR7x0yK72F+j1g55P/uWt+oP4YuDcsKvbCE+o/
DMfmpeuGPaX+Uvi4X36w+WPq/wrvvj2fJVVO/UPYmF9al2rGlFG/G5xqomst
JLNWsf++v6onTab9j5sNmy6J0Ku4Sf0PYBnHRPVIGk9RF6zgZR9bcYX6B3Mw
nlP7ZynT62c0De7J3vJYhuwVBU84YMdOSKb+g7BarCF72g7qvwdfnXpWeRJZ
Q9dJwjHSTnOP3UO9TvCFyb8WzN9FvZGwe5XSEB5ZmAFLgpPn5tL+Ixb9vf/o
3W2iXOpthwX5D17GH6HeQVPx+t12GF6+jXqnwLZKnqw/NJ8IlsD92rImVNP7
X7QH3nTd0/APuesWPMc5YE8Q2egDnKP4WG3BOuod6Izx5qgFlND8y3eAa+8o
pS58R/P5Irife8YMaU0abwGc1DzORHow9RfBNhvcMlYMpf4WWNG6b/dYup2n
Pg3Hl9b30wMMqN8OHnIp90WkLvWHwgbybu4p+tSfBk9sy/zPx4T6r8FZJa4j
lEZRfxOs8NtrVRGb+lVccH220+tnHR0fRDbwCRcDzuJA6ufCd/c7ck7Op/4d
8IjaliETQ6j/MuzwuTZOI5zGuwGub+9N+bacxlvJFdv/IZe3cwX1j4dXqe5w
TyOzt8GTQzQvvqD5R1gPB3jXr6p/S30Kbjie7/u1MKCG+sbBejf0hveQWYHw
CWfVMTteU98W2HJ5YqeAricFF2BDv80VrmRRLbz9icEkFl2fdsm64/pYJvhW
BtloLDx7U9ctV006X/GHO735h6eT+Ztgx9X773oq0fnKWVjtjOBe4TA6X3kB
aw4w8JlrSucr0h54fSXSgQVk9ihYz+WY9h1zOl/xhYvOBDk+HEfnKwmww6si
L9V/16OnYddmy8dv3Ol85Tns1LpA2YDM+u3x9/uVWcvMl1Cv93S8/uXWhvXO
dH2yHuboVY01i6brkxPwn8W2w/W30PVIH6ypWeS3jD4/5g/3lHCmTrDJ6+5P
ny/PgvOG2S4u06LPl+Ph2C0W/mba9Pn6MTh/V6l3G30ezS6Hr8wrn/vQgj5f
/w+2Npiulz2FPl81mYHrg305YR1B9PmqJxwwb+zeYWSpWHjDBN89/afR56u5
8M+JijLabXQ99hhOdXYoP0iflwq+w3dFL4pVPlPv0Jm4vv71+2LmN+p1h1N9
Xl36qk+fr0fDHJ2C5wMH0+frh+Cfm9eEGtLn7/xH8Mq+xwW7dan/CywdPv9E
tzH1G8zC8WNX9k8+fZ6t4Qp/1pPWEJLZK+F3LwzGj1Ci/iz4/PGJ47N66Hr0
Plye0hixmXrEnbDfxpzry5roenSwl4QTpGDj+Zs+72Y5w6kNVqv7yNwV8NGp
i7pDv1D/AVjmsml1Jb3+XR3wS+Wu28Hm1KszW8LZWshWz59KvRy4fv0ym4f0
+vKXwRx1hbmh5Px98NqNSyeOcaDeO3+dWmwtGk99Wt4Szqe4zaf0JtF4Lobr
LnGXuNLn/eJ0eMVkm2c2ZKlbsLWYf/PGXBrPVvjN4NERiv70efmAOTgfKmWf
lScLJsEfnptt6/Ci7wvC4U7zU9t/k7t2wT+EUV84s6nvBnypR3fsA2/qa4ar
31xrUpxH27/QR8J5PufUlVNhNF6p8Iz5Z2Jfx1HPVfj+GLnvUxNpvN7CbJ58
35hd1GPtK+E0bRi7+G4G9XBh9dllpboHqGc7XFI/VLvzIPUUwkdGmTQc2089
b+AzqrYGMdnUo+iH3uGvxocfpR4r2Of1fhffE9QzH7afHiMf8+/7r61wcsG5
n44iGq+L8PvxehMqyPmvYP6QupPvmqhXfi7OB6+zIxLeUS9r7t/rZ5Hc9vfU
Ow8+u3XisCox9SbBwugSwfiXNJ7n4RHjspvPk8U1cN8wmz1yZClZfwknZJO6
zwv6vo41Bh4rzpA/QX+POxdW1ijlL6P7CxLhsw2z9P88pP4zsK78f7nLl1F/
NTwm5ub+usXULxWA+e+eZlDqQuq3gE1HD9yXs5T6feAPp/reKPKpfyPMcyrg
5W6i/lNwe3Tarmk7qL8KtrHjzDARUP8vOGjyyTMcMs98Hq7P5HaPHJZO/bPh
xeublxyi8RWvg13jud0ex6j/xF/7GBj1ydL3n2J498LqmZ/l6PvPH/C3lPym
WrLANBDnfy9XF2jL0/efM2GFfR+1bdXp+984eMuob/q6MfT971F4r+D7CqUE
+v73Kax2onZwaiJ9/9sDr5+1/K6Qvm/ONw7C+O/t08zMoO9/p8Ohzel73uyl
73/XwLytxeLw/fT9rxCuT7ZczjlE3/+Wwbn7Xc4uOEzf/36Dzz/pf6RKSN//
Gs6XcIyfV9pY59P3v+7wo8NxMil51L8alj+Xs/rHeerPgSfffldRTt+vCx7C
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
          "]]}, "Charting`Private`Tag#1"]}}, <|
     "HighlightElements" -> <|
       "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
      "LayoutOptions" -> <|
       "PanelPlotLayout" -> <||>, 
        "PlotRange" -> {{3.556656*^9, 3.95928*^9}, {0, 0.0798545257471515}}, 
        "Frame" -> {{True, True}, {True, True}}, 
        "AxesOrigin" -> {3.556656*^9, 0}, 
        "ImageSize" -> {1200, 1200/GoldenRatio}, "Axes" -> {False, False}, 
        "LabelStyle" -> {FontSize -> 18}, "AspectRatio" -> GoldenRatio^(-1), 
        "DefaultStyle" -> {
          Directive[
           PointSize[0.003666666666666667], 
           RGBColor[0.24, 0.6, 0.8], 
           AbsoluteThickness[2]]}, 
        "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
            (DateString[
             Identity[#], "DateShort"]& )[
             Part[#, 1]], 
            (Identity[#]& )[
             Part[#, 2]]}& ), 
          "ScalingFunctions" -> {{Identity, Identity}, {
            Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> False|>, 
      "Meta" -> <|
       "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
        DateListPlot, "GroupHighlight" -> False|>|>, 
     "DynamicHighlight"]], {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{False, False},
  AxesLabel->{None, None},
  AxesOrigin->{3.556656*^9, 0},
  Background->RGBColor[0.9625, 0.9625, 0.9625],
  DisplayFunction->Identity,
  Frame->{{True, True}, {True, True}},
  FrameLabel->{{
     FormBox[
      TagBox[
       TagBox[
        RowBox[{"Standard", " ", "deviation"}], HoldForm], HoldForm], 
      TraditionalForm], None}, {None, None}},
  FrameTicks->FrontEndValueCache[{{All, All}, {
      Charting`DateTicksFunction[All, DateTicksFormat -> {Automatic}], 
      Charting`DateTicksFunction[All, DateTicksFormat -> {Automatic}]}}, {{
     All, All}, {{{3.5343648*^9, 
        FormBox[
         StyleBox["\"2012\"", 
          Directive[], {}, StripOnInput -> False], TraditionalForm], 
        Automatic, 
        Directive[]}, {3.5975232*^9, 
        FormBox[
         StyleBox["\"2014\"", 
          Directive[], {}, StripOnInput -> False], TraditionalForm], 
        Automatic, 
        Directive[]}, {3.6605952*^9, 
        FormBox[
         StyleBox["\"2016\"", 
          Directive[], {}, StripOnInput -> False], TraditionalForm], 
        Automatic, 
        Directive[]}, {3.7237536*^9, 
        FormBox[
         StyleBox["\"2018\"", 
          Directive[], {}, StripOnInput -> False], TraditionalForm], 
        Automatic, 
        Directive[]}, {3.7868256*^9, 
        FormBox[
         StyleBox["\"2020\"", 
          Directive[], {}, StripOnInput -> False], TraditionalForm], 
        Automatic, 
        Directive[]}, {3.849984*^9, 
        FormBox[
         StyleBox["\"2022\"", 
          Directive[], {}, StripOnInput -> False], TraditionalForm], 
        Automatic, 
        Directive[]}, {3.913056*^9, 
        FormBox[
         StyleBox["\"2024\"", 
          Directive[], {}, StripOnInput -> False], TraditionalForm], 
        Automatic, 
        Directive[]}, {3.9762144*^9, 
        FormBox[
         StyleBox["\"2026\"", 
          Directive[], {}, StripOnInput -> False], TraditionalForm], 
        Automatic, 
        Directive[]}, {3.5343648*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], Automatic, 
        Directive[]}, {3.5659872*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], Automatic, 
        Directive[]}, {3.5975232*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], Automatic, 
        Directive[]}, {3.5975232*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], Automatic, 
        Directive[]}, {3.6290592*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], Automatic, 
        Directive[]}, {3.6605952*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], Automatic, 
        Directive[]}, {3.6605952*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], Automatic, 
        Directive[]}, {3.6922176*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], Automatic, 
        Directive[]}, {3.7237536*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], Automatic, 
        Directive[]}, {3.7237536*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], Automatic, 
        Directive[]}, {3.7552896*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], Automatic, 
        Directive[]}, {3.7868256*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], Automatic, 
        Directive[]}, {3.7868256*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], Automatic, 
        Directive[]}, {3.818448*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], Automatic, 
        Directive[]}, {3.849984*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], Automatic, 
        Directive[]}, {3.849984*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], Automatic, 
        Directive[]}, {3.88152*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], Automatic, 
        Directive[]}, {3.913056*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], Automatic, 
        Directive[]}, {3.913056*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], Automatic, 
        Directive[]}, {3.9446784*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], Automatic, 
        Directive[]}, {3.9762144*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], Automatic, 
        Directive[]}}, {{3.5343648*^9, 
        FormBox[
         StyleBox["\"2012\"", 
          Directive[], {}, StripOnInput -> False], TraditionalForm], 
        Automatic, 
        Directive[]}, {3.5975232*^9, 
        FormBox[
         StyleBox["\"2014\"", 
          Directive[], {}, StripOnInput -> False], TraditionalForm], 
        Automatic, 
        Directive[]}, {3.6605952*^9, 
        FormBox[
         StyleBox["\"2016\"", 
          Directive[], {}, StripOnInput -> False], TraditionalForm], 
        Automatic, 
        Directive[]}, {3.7237536*^9, 
        FormBox[
         StyleBox["\"2018\"", 
          Directive[], {}, StripOnInput -> False], TraditionalForm], 
        Automatic, 
        Directive[]}, {3.7868256*^9, 
        FormBox[
         StyleBox["\"2020\"", 
          Directive[], {}, StripOnInput -> False], TraditionalForm], 
        Automatic, 
        Directive[]}, {3.849984*^9, 
        FormBox[
         StyleBox["\"2022\"", 
          Directive[], {}, StripOnInput -> False], TraditionalForm], 
        Automatic, 
        Directive[]}, {3.913056*^9, 
        FormBox[
         StyleBox["\"2024\"", 
          Directive[], {}, StripOnInput -> False], TraditionalForm], 
        Automatic, 
        Directive[]}, {3.9762144*^9, 
        FormBox[
         StyleBox["\"2026\"", 
          Directive[], {}, StripOnInput -> False], TraditionalForm], 
        Automatic, 
        Directive[]}, {3.5343648*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], Automatic, 
        Directive[]}, {3.5659872*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], Automatic, 
        Directive[]}, {3.5975232*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], Automatic, 
        Directive[]}, {3.5975232*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], Automatic, 
        Directive[]}, {3.6290592*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], Automatic, 
        Directive[]}, {3.6605952*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], Automatic, 
        Directive[]}, {3.6605952*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], Automatic, 
        Directive[]}, {3.6922176*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], Automatic, 
        Directive[]}, {3.7237536*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], Automatic, 
        Directive[]}, {3.7237536*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], Automatic, 
        Directive[]}, {3.7552896*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], Automatic, 
        Directive[]}, {3.7868256*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], Automatic, 
        Directive[]}, {3.7868256*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], Automatic, 
        Directive[]}, {3.818448*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], Automatic, 
        Directive[]}, {3.849984*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], Automatic, 
        Directive[]}, {3.849984*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], Automatic, 
        Directive[]}, {3.88152*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], Automatic, 
        Directive[]}, {3.913056*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], Automatic, 
        Directive[]}, {3.913056*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], Automatic, 
        Directive[]}, {3.9446784*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], Automatic, 
        Directive[]}, {3.9762144*^9, 
        FormBox[
         TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], Automatic, 
        Directive[]}}}}],
  GridLines->FrontEndValueCache[{Charting`ScaledTickValues[
      (Part[
       Select[
        Charting`DateTicksFunction[All, DateTicksFormat -> {Automatic}][
         SlotSequence[1]], And[
         FreeQ[#, 
          Alternatives["", 
           Spacer[{0, 0}]]], Head[#] === List, Length[#] > 0]& ], All, 1]& )[
       SlotSequence[1]], {Identity, Identity}]& , {0., 0.01, 0.02, 0.03, 0.04,
      0.05, 0.06, 0.07, 0.08, 0.09, 0.1, 0.11, 0.12, 0.13, 0.14, 0.15, 0.16, 
     0.17, 0.18, 0.19, 0.2}}, {{3.5343648*^9, 3.5975232*^9, 3.6605952*^9, 
     3.7237536*^9, 3.7868256*^9, 3.849984*^9, 3.913056*^9, 3.9762144*^9}, {0.,
      0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1, 0.11, 0.12, 
     0.13, 0.14, 0.15, 0.16, 0.17, 0.18, 0.19, 0.2}}],
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageMargins->20,
  ImageSize->1200,
  LabelStyle->{18},
  Method->{
   "NoShowPlotTheme" -> Automatic, "AxisPadding" -> Scaled[0.02], 
    "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "DefaultPlotStyle" -> {
      Directive[
       RGBColor[0.24, 0.6, 0.8], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.95, 0.627, 0.1425], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.455, 0.7, 0.21], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.922526, 0.385626, 0.209179], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.578, 0.51, 0.85], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.772079, 0.431554, 0.102387], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.4, 0.64, 1.], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[1., 0.75, 0.], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.8, 0.4, 0.76], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.637, 0.65, 0.], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.915, 0.3325, 0.2125], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.9728288904374106, 0.621644452187053, 0.07336199581899142], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.736782672705901, 0.358, 0.5030266573755369], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.28026441037696703`, 0.715, 0.4292089322474965], 
       AbsoluteThickness[2]]}, "DomainPadding" -> Scaled[0.02], 
    "PointSizeFunction" -> "SmallPointSize", "RangePadding" -> Scaled[0.05], 
    "AllowMicroRanges" -> {True, False}, "OptimizePlotMarkers" -> True, 
    "IncludeHighlighting" -> "CurrentSet", "HighlightStyle" -> Automatic, 
    "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (DateString[
         Identity[#], "DateShort"]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (DateString[
         Identity[#], "DateShort"]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotLabel->FormBox["\"Volatility\"", TraditionalForm],
  PlotRange->{{3.556656*^9, 3.95928*^9}, {0, 0.0798545257471515}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{{}, Automatic}]], "Output",
 CellChangeTimes->CompressedData["
1:eJxTTMoPSmVkYGDQB+IN/7lqlxe/dZzPZJZ/H0hPfFTQAKIzjz5pAdHzw+3m
gWiJ97EbQXTJtkv7QXRDhk/JXyBdzsS3DkR/OMB+DEQ3PL95E0S7zzv7CETH
Pdbi+QekG40KhUD0njtFEiA6csk2ORDt9dCwk6nkrSO7mv4MEL2wOX4ViI7x
4TwEorOm6N8C0Xx9YQ9AdJXqlZcgevclzW8gepE5j7g3kH4yLVcORGt4ndYC
0T5Zl8U7gLTSHaZW3bK3jnO4/jM3Aemiglc7rpS/dXwx95pRTQVQPidmEYi+
kMrwHUQ7nD4sfxRIO4YxNwpWvnU80r7A1hdIt7+dsUS86q1jPZva5KlAuldi
9//TQLrl6aSqpOq3jlec4trlaoDucXQTXw6kS5I9ZILr3joeFvjqvx9I/zBR
vsdY/9bx0RnHk8+BNACXhsNr
  "],
 CellLabel->
  "Out[402]=",ExpressionUUID->"5cef124b-b087-46a5-b5d0-3ce9d54e4154"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.956583594880019*^9, 3.956583597703912*^9}},
 CellLabel->
  "In[403]:=",ExpressionUUID->"510a1483-7bdf-4274-aeef-821d200aff92"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1438.5, 878.25},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
FrontEndVersion->"14.2 for Mac OS X ARM (64-bit) (March 16, 2025)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"2d94d918-3899-4e18-aac0-70bf8cee834b"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[576, 22, 309, 5, 96, "Title",ExpressionUUID->"d0156753-738e-4289-aedc-5077aa29e1a2"],
Cell[888, 29, 253, 6, 33, "Text",ExpressionUUID->"267939b8-5eda-4511-bf7d-42ed242c822b"],
Cell[CellGroupData[{
Cell[1166, 39, 2910, 79, 19, "Input",ExpressionUUID->"9e5f9d4f-7f8a-46d3-b2ed-6aba96bf060c",
 CellOpen->False],
Cell[4079, 120, 1675, 27, 42, "Output",ExpressionUUID->"cb78cd40-b31f-4d52-98c8-00ce14abcd11"]
}, Open  ]],
Cell[5769, 150, 6075, 126, 19, "Input",ExpressionUUID->"7ba4890e-baff-4440-b611-c0ef85b503a5",
 CellOpen->False],
Cell[11847, 278, 2529, 62, 19, "Input",ExpressionUUID->"c3aff205-d97a-4203-8afb-492c50dd5de2",
 CellOpen->False],
Cell[CellGroupData[{
Cell[14401, 344, 47227, 959, 19, "Input",ExpressionUUID->"b56523c0-f5af-4d51-b376-8ed10c008b3c",
 CellOpen->False],
Cell[61631, 1305, 16561, 334, 5765, "Output",ExpressionUUID->"b80e0d6e-97f9-4cd5-95ce-8e459f776a6e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[78229, 1644, 16566, 334, 5781, "Input",ExpressionUUID->"eb3b9e1f-c8fe-4fa1-9732-289ee8e574ed"],
Cell[94798, 1980, 16567, 334, 5785, "Output",ExpressionUUID->"dc327173-a89a-4f50-94da-52fd70e9d149"]
}, Open  ]],
Cell[CellGroupData[{
Cell[111402, 2319, 321, 6, 66, "Section",ExpressionUUID->"673cb76b-bd4d-4e8e-b2fc-2e286e53115f"],
Cell[CellGroupData[{
Cell[111748, 2329, 3922, 88, 19, "Input",ExpressionUUID->"5df44138-e30e-41bd-843f-d9b16e477c68",
 CellOpen->False],
Cell[115673, 2419, 209222, 3581, 806, "Output",ExpressionUUID->"5cef124b-b087-46a5-b5d0-3ce9d54e4154"]
}, Open  ]],
Cell[324910, 6003, 175, 3, 29, "Input",ExpressionUUID->"510a1483-7bdf-4274-aeef-821d200aff92"]
}, Open  ]]
}, Open  ]]
}
]
*)

